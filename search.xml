<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Effective Objective-C 读书笔记--熟悉Objective-C]]></title>
      <url>http://yoursite.com/2017/03/28/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%86%9F%E6%82%89Objective-C/</url>
      <content type="html"><![CDATA[<h1 id="熟悉Objective-C"><a href="#熟悉Objective-C" class="headerlink" title="熟悉Objective-C"></a>熟悉Objective-C</h1><h2 id="OC语言的特性"><a href="#OC语言的特性" class="headerlink" title="OC语言的特性"></a>OC语言的特性</h2><p>OC语言不像是C++和Java等面向对象语言。OC是“消息结构”（message structure）而不是“函数调用”（function calling）。区别看上去如下：</p>
<ul>
<li>Messaging (OC)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object *obj = [Object new];</div><div class="line">[obj performWith:parameter1 and:parameter2];</div></pre></td></tr></table></figure>
<ul>
<li>Function calling (C++)<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object *obj = <span class="keyword">new</span> Object;</div><div class="line">obj-&gt;perform(parameter1,parameter2);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>两种结构的区别：</p>
<ol>
<li>消息结构的语言，其运行时所执行的代码由运行环境来决定；函数调用语言，由编译器决定。</li>
<li>代码中的函数是多态的，如果是函数调用语言，在运行时就要按照“虚方法表”来查出到底应该执行那个函数实现；消息结构语言，不论是否多态，总在运行时才会去查找所要执行的方法。而且接受消息的对象也在运行时处理，过程叫做“动态绑定”。</li>
<li>OC重要工作都由“运行期组件”而非编译器完成。运行组件本质上是一种与开发者所编代码相链接的“动态库”，其代码能把开发者编写的所有程序占合起来。这样只需要更新运行期组件，就能提升应用程序性能。但是工作在编译期的只能重新编译代码，才能提升性能。</li>
<li>OC是C的超集，所以c语言中的所有功能都可以在OC中继续使用。需要理解C语言的内存模型，有助于理解OC的内存模型和引用计数机制的工作原理。记住一点：OC中的指针是用来指向对象的。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString *somneString = @&quot;Feyddy&quot;;</div></pre></td></tr></table></figure>
<p>可以理解为<code>somneString</code>，这个变量指向<code>NSString</code>。所有的OC对象必须这样声明，因为对象所占内存总是分配在“堆空间”，不会在“栈”。</p>
<p><code>somneString</code>指向分配在堆里的某块空间，其中包含一个NSString对象。此时如果再创建一个对象指向同一个地址，那么并不拷贝该对象，只是这两个对象会同时指向此对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString *somneString = @&quot;Feyddy&quot;;</div><div class="line">NSString *anotherString = somneString;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这里只有一个NSString实例，但是有两个变量指向了它。这两个变量都是NSString*型，这说明当前“栈帧”里面分配了两块内存，每一块内存大小都容得下一枚指针。内存的值都是一样的，就是NSString实例的内存地址：</p>
<p>下图是此时的内存布局，存放在NSString实例中的数据含有代表字符串实际内容的字节：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fe2j5ko8xnj30b304qjrx.jpg" alt=""></p>
<p>注意：堆中的内存必须直接管理，但是栈中的变量内存会在栈帧弹出时自动清理。</p>
<p>OC将堆内存管理抽象出来了，就是<code>引用计数</code>。</p>
<h2 id="在类的头文件中尽量少引入其他头文件"><a href="#在类的头文件中尽量少引入其他头文件" class="headerlink" title="在类的头文件中尽量少引入其他头文件"></a>在类的头文件中尽量少引入其他头文件</h2><p>由于一旦在头文件（.h）文件中引入了另一个头文件，那么就会一并引入该头文件的所有内容，这样可能会引入许多根本用不到的内容，这当然会增加编译时间，影响性能。这个时候可以使用向前声明(<code>@class xxx;</code>)。同时向前声明还解决了两个类之间的互相引用的问题。</p>
<p>以下情况必须直接在头文件中引入其他头文件：</p>
<ul>
<li>继承某个超类；</li>
<li>声明写的类遵从某个协议，这样该协议就必须有完整的定义，且不能使用向前声明。向前声明只能告诉编译器有这个协议，但是此时的编译器需要知道该协议中定义的方法。</li>
</ul>
<p>最好是把协议单独放在一个头文件中，这样的话，如果把协议放在某个大的头文件里。这样要引入该协议就要引入那个大的头文件。不好。</p>
<p>但是有些协议，例如委托协议，就不用单独写一个头文件，这个时候只需要将拥有协议的头文件在实现文件（.m）里面引入就可以了。</p>
<h2 id="多用字面量语法，少用与之等价的方法"><a href="#多用字面量语法，少用与之等价的方法" class="headerlink" title="多用字面量语法，少用与之等价的方法"></a>多用字面量语法，少用与之等价的方法</h2><p>字面量语法就是直接赋值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString *someString = @&quot;Feyddy&quot;;</div></pre></td></tr></table></figure>
<p>这就”字符串字面量”。</p>
<p>如果不用这种方法的话就必须使用alloc及init方法来分配并初始化NSString对象。</p>
<h4 id="字面数值"><a href="#字面数值" class="headerlink" title="字面数值"></a>字面数值</h4><p>有的时候需要把整数、浮点数、布尔值封入Objective-C对象中。这种情况下可以使用NSNumber类：</p>
<ul>
<li><p>非字面量创建实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSNumber *someNumber = [NSNumber numberWithInt:1];</div></pre></td></tr></table></figure>
</li>
<li><p>字面量创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSNumber *someNumber = @1;</div></pre></td></tr></table></figure>
</li>
<li><p><code>NSNumber</code>其他的字面量语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSNumber *intNumber = @1;</div><div class="line">NSNumber *floatNumber = @1.23f;</div><div class="line">NSNumber *doubleNumber = @3.1415926;</div><div class="line">NSNumber *boolNumber = @YES;</div><div class="line">NSNumber *charNumber = @&quot;asd&quot;;</div><div class="line"></div><div class="line">int x = 5;</div><div class="line">float y = 6.32f;</div><div class="line">NSNumber *expressionNumber = @(x * y);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="字面量数组"><a href="#字面量数组" class="headerlink" title="字面量数组"></a>字面量数组</h4><p>数组是常用的数据结构。</p>
<ul>
<li>非字面量语法创建与取值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSArray *animals = [NSArray arrayWithObjects:@&quot;cat&quot;,@&quot;dog&quot;,@&quot;mouse&quot;,@&quot;badger&quot;,nil];</div><div class="line">NSString *dog = [animals objectAtIndex:1];</div></pre></td></tr></table></figure>
<ul>
<li>字面量语法创建与取值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSArray *animals = @[@&quot;cat&quot;,@&quot;dog&quot;,@&quot;mouse&quot;,@&quot;badger&quot;];</div><div class="line">NSString *dog = animals[1];</div></pre></td></tr></table></figure>
<p>这两中创建方式存在一点小区别，就是当其中有过一个为nil的时候：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSArray *arrayA = [NSArray arrayWithObjects:object1,object2,object3, nil];</div><div class="line">NSArray *arrayB = @[object1,object2,object3];</div></pre></td></tr></table></figure>
<p>按照上面的创建方法，如果<code>object2</code>是nil，那么arrayB会立刻抛出异常，但是arrayA却能创建出来。可是arrayA却只有一个object1对象。原因在于<code>arrayWithObjects:</code>方法会依次处理各个参数，直到发现nil为止，由于object2是nil，所以该方法会提前结束。所以可以看出来，还是字面量语法更为安全。</p>
<h4 id="字面量字典"><a href="#字面量字典" class="headerlink" title="字面量字典"></a>字面量字典</h4><p>“字典”是一种映射数据结构。可向其中添加键值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//非字面创建字典</div><div class="line">NSDictionary *peopleData1 = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;xu&quot;,@&quot;lastName&quot;,@&quot;zhonglin&quot;,@&quot;firstName&quot;,@25,@&quot;age&quot;, nil];//&lt;对象&gt;、&lt;键&gt;,&lt;对象&gt;、&lt;键&gt;,&lt;对象&gt;、&lt;键&gt;....</div><div class="line"></div><div class="line">//字面创建字典</div><div class="line">NSDictionary *peopleData2 = @&#123;</div><div class="line">                                 @&quot;lastName&quot;:@&quot;xu&quot;,</div><div class="line">                                 @&quot;firstName&quot;:@&quot;zhonglin&quot;,</div><div class="line">                                 @&quot;age&quot;:@25</div><div class="line">                                 &#125;;</div></pre></td></tr></table></figure>
<p>注意：字典中的值和键都必须是对象，所以不能直接使用<code>25</code>整数，而必须封装成NSNumber类型<code>@25</code>。</p>
<p>当然对于nil的判断和上面的数组的是一样的效果。</p>
<h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>字面量语法有一个限制，就是除了字符串以外，所有创建出来的对象必须属于Foundation框架。如果自定义了这些类的子类，既不能使用字面量语法创建，不过一般不需要这样做，也比较麻烦。但是使用字面量创建出来的字符串、数组、字典对象都是不可变的。如果想变话就必须复制一份：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSMutableArray *mutableArray = [@[@&quot;cat&quot;,@&quot;dog&quot;,@&quot;mouse&quot;,@&quot;badger&quot;] mutableCopy];</div></pre></td></tr></table></figure>
<h2 id="多用类型常量，少用-define预处理指令"><a href="#多用类型常量，少用-define预处理指令" class="headerlink" title="多用类型常量，少用#define预处理指令"></a>多用类型常量，少用#define预处理指令</h2><p>很多时候，我们喜欢将一个值提取为一个常量，一般人都会直接使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define ANIMATION_DURATION 0.3</div></pre></td></tr></table></figure>
<p>这样的话，假设在头文件中声明了此指令，那么所有引改头文件的代码，其<code>ANIMATION_DURATION</code>都会在欲处理过程被替换。而且根本看不出这个<code>ANIMATION_DURATION</code>是什么类型的。下面介绍一个可以解决这个的方法，而且比预处理指令来定义常量更好。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static const NSTimeInterval kAnimationDuration = 0.3;</div></pre></td></tr></table></figure>
<p>这样定义的好处就是常量包含类型信息，可以清楚的描述了常量的含义。还需要注意常量的命名方式：如果常量在实现文件里，加上前缀<code>k</code>；如果在类之外可见，就加上类名为前缀。</p>
<p><code>const</code>就是防止次变量不能被修改；<code>static</code>意味着该变量尽在定义次变量的编译单元（每个类的实现文件.m）中可见。如果不加上<code>static</code>的话，编译器就会为它创建一个“外部符号”。此时如果另一个编译单元中也声明了同名变量，那么编译器就会抛出异常。</p>
<p>实际上，如果一个变量同时拥有<code>static</code>和<code>const</code>，那么编译器是不会创建符号的，只会想#define预处理指令一样，把所有遇见的变量都换成值。但是用这种方式定义的常量带有类型信息。</p>
<p>有时候需要对外公开某个常量的时候，比方说，你可能要在代码中调用<code>NSNotificationCenter</code>通知他人。用一个对象派发通知，令其他欲接受通知的对象向该对象注册，这样就能实现此功能了。派发通知的时候需要使用字符串来表示此项通知的名称，而这个名字就可以声明为一个外界可见的常值变量。这样的话，注册者无需知道实际字符串的值，只需要以常值变量来注册自己想要接受的通知即可。<br>此类常量需要放在“全局符号表”中，以便可以在定义该常量的编译单元之外使用。所以定义方式不太一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//.h头文件</div><div class="line">extern NSString *const APPDelegateConstant;</div><div class="line"></div><div class="line">//.m实现文件</div><div class="line">NSString *const APPDelegateConstant = @&quot;valueChange&quot;;</div></pre></td></tr></table></figure>
<p>常量从右至左解读，APPDelegateConstant是一个常量，而这个常量是一个指针，指向NSString对象。我们不希望有人改变此指针常量。</p>
<p>此类常量必须要定义，而且只能定义一次。通常将其定义在与声明该常量的头文件相关的实现文件里。由实现文件生成目标文件时，编译器会在“数据段”为字符串分配存储空间。链接器会把此目标文件与其他目标文件相链接，以生成最终的二进制文件。</p>
<p>下面我们也把上面定义static的方式用这种方式定义一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//.h头文件</div><div class="line">extern const NSTimeInterval APPDelegateAnimationDuration;</div><div class="line"></div><div class="line">//.m实现文件</div><div class="line">const NSTimeInterval APPDelegateAnimationDuration = 0.3;</div></pre></td></tr></table></figure>
<h2 id="用枚举表示状态、选项、状态码"><a href="#用枚举表示状态、选项、状态码" class="headerlink" title="用枚举表示状态、选项、状态码"></a>用枚举表示状态、选项、状态码</h2><ol>
<li>在以一系列常量来表示错误状态码或可组合的选项时，极宜使用枚举为其命名。</li>
</ol>
<p>枚举只是一种常量命名方式。某个对象所经历的各种状态就可以简单的定义一个枚举。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">enum FDConnectionState &#123;</div><div class="line">    FDConnectionStateDisconnected,</div><div class="line">    FDConnectionStateConnecting,</div><div class="line">    FDConnectionStateConnected,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>编译器会默认<code>0</code>开始赋值，每个枚举递增<code>1</code>。</p>
<p>但是定义一个枚举变量不简洁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enum FDConnectionState state = FDConnectionStateConnecting;</div></pre></td></tr></table></figure>
<p>如果想直接写<code>FDConnectionState</code>就必须使用下面的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">enum FDConnectionState &#123;</div><div class="line">    FDConnectionStateDisconnected,</div><div class="line">    FDConnectionStateConnecting,</div><div class="line">    FDConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line">typedef enum FDConnectionState FDConnectionState;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef enum &#123;</div><div class="line">    FDConnectionStateDisconnected,</div><div class="line">    FDConnectionStateConnecting,</div><div class="line">    FDConnectionStateConnected,</div><div class="line">&#125;FDConnectionState;</div></pre></td></tr></table></figure>
<p>C++特性可以指明用何种“底层数据类型”来保存枚举类型变量。指定底层数据类型所用的语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">enum FDConnectionState: NSInteger &#123;</div><div class="line">    FDConnectionStateDisconnected,</div><div class="line">    FDConnectionStateConnecting,</div><div class="line">    FDConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line">typedef enum FDConnectionState FDConnectionState;</div></pre></td></tr></table></figure>
<p>当然我们还可以手工指定某个枚举成员所对应的值。语法如下”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">enum FDConnectionState: NSInteger &#123;</div><div class="line">    FDConnectionStateDisconnected = 1,</div><div class="line">    FDConnectionStateConnecting,</div><div class="line">    FDConnectionStateConnected,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>此时枚举值就不是从编译器默认的0开始增加，而是从自己定义的1开始；</p>
<ol>
<li>定义选项时，若这些选项可以彼此组合，更应如此。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">enum UIViewAutoresizing &#123;</div><div class="line">  UIViewAutoresizingNone                 = 0,</div><div class="line">    UIViewAutoresizingFlexibleLeftMargin   = 1 &lt;&lt; 0,</div><div class="line">    UIViewAutoresizingFlexibleWidth        = 1 &lt;&lt; 1,</div><div class="line">    UIViewAutoresizingFlexibleRightMargin  = 1 &lt;&lt; 2,</div><div class="line">    UIViewAutoresizingFlexibleTopMargin    = 1 &lt;&lt; 3,</div><div class="line">    UIViewAutoresizingFlexibleHeight       = 1 &lt;&lt; 4,</div><div class="line">    UIViewAutoresizingFlexibleBottomMargin = 1 &lt;&lt; 5</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>&lt;&lt;</code>貌似就是二进制位向左移动。每个选项均可启用或禁止，使用上述方式来定义枚举值可保证这一点，因为在每个枚举值所对应的二进制表示中，只有1个二进制位的值是1。用“按位或操作符”可组合多个选项，例如：<code>UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight</code></p>
<p>下图是每个枚举值的二进制表示：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fe2xd27duqj30o10ditbz.jpg" alt=""></p>
<p>Foundation框架中定义了一些辅助的宏，用这些宏来定义枚举类型，也可以指定用于保存枚举值的底层数据类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef NS_ENUM(NSUInteger,FDConnectionState) &#123;</div><div class="line">    FDConnectionStateDisconnected,</div><div class="line">    FDConnectionStateConnecting,</div><div class="line">    FDConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">typedef NS_OPTIONS(NSUInteger, FDPermittedDirection)&#123;</div><div class="line">    FDPermittedDirectionUp = 1&lt;&lt;0,</div><div class="line">    FDPermittedDirectionDown = 1&lt;&lt;1,</div><div class="line">    FDPermittedDirectionLeft = 1&lt;&lt;2,</div><div class="line">    FDPermittedDirectionRight = 1&lt;&lt;3,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>注意：在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所以枚举。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python学习笔记（三）]]></title>
      <url>http://yoursite.com/2017/03/26/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="字符串的详细使用"><a href="#字符串的详细使用" class="headerlink" title="字符串的详细使用"></a>字符串的详细使用</h1><h2 id="基本字符串的操作"><a href="#基本字符串的操作" class="headerlink" title="基本字符串的操作"></a>基本字符串的操作</h2><p>所有的标准的序列操作（索引、分片、乘法、判断成员资格、求长度、取最小值和最大值）对字符串同样适用。记住一点，字符串是不可以被改变的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[1:4] = &quot;name&quot;</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: &apos;str&apos; object does not support item assignment</div></pre></td></tr></table></figure>
<p>上面使用分片的方式修改一个字符串是不被允许的。</p>
<a id="more"></a>
<h2 id="字符串格式化：精简版"><a href="#字符串格式化：精简版" class="headerlink" title="字符串格式化：精简版"></a>字符串格式化：精简版</h2><p>Python提供的字符串格式化功能可能用的不太多，这里简单介绍一些主要内容：</p>
<ul>
<li>字符串格式化使用字符串格式化操作符(%)：在%的左侧放一个字符串，右侧则放希望格式化的值，可以使一个值（字符串或者数字），也可以是多个值的元组或字典。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; format = &quot;Hello guys, my name is %s,my blogSite is %s&quot;</div><div class="line">&gt;&gt;&gt; value = (&quot;Feyddy&quot;,&quot;www.feyddy.com&quot;)</div><div class="line">&gt;&gt;&gt; print format % value</div><div class="line">Hello guys, my name is Feyddy,my blogSite is www.feyddy.com</div></pre></td></tr></table></figure>
<blockquote>
<p>此处不能使用列表。列表会被转换成一个值。这样如果是两个需要格式化的话，就会报错提示只有一个参数，参数值不够。如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; format = &quot;Hello guys, my name is %s,my blogSite is %s&quot;</div><div class="line">&gt;&gt;&gt; value = [&quot;Feyddy&quot;,&quot;www.feyddy.com&quot;]</div><div class="line">&gt;&gt;&gt; print format % value</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: not enough arguments for format string</div></pre></td></tr></table></figure>
<p><code>%s</code>为转换说明符，就是你想转换的值的类型。<code>s</code>为字符串格式，如同str函数；<br><code>%f</code>为浮点型格式，也可以同时提供所需要的精度：一个句点再加上希望保留的小数位数。因为格式化说明符综合室以表示类型的字符结束，所以精度应该放在类型字符前面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; format = &quot;PI with Three decimals is %.3f&quot;</div><div class="line">&gt;&gt;&gt; value = 3.141</div><div class="line">&gt;&gt;&gt; print format % value</div><div class="line">PI with Three decimals is 3.141</div></pre></td></tr></table></figure>
<blockquote>
<p>模板字符串</p>
</blockquote>
<p>String模板提供另一种格式化方法：模板字符串。它的工作方式类似于很多UNIXShell里的变量替换。如下所示，<code>substitute</code>这个模板方法会用传递进来的关键词参数<code>foo</code>替换字符串中的<code>$foo</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import Template</div><div class="line">&gt;&gt;&gt; s = Template(&quot;$x,glorious $x!&quot;)</div><div class="line">&gt;&gt;&gt; s.substitute(x=&apos;slurm&apos;)</div><div class="line">&apos;slurm,glorious slurm!&apos;</div></pre></td></tr></table></figure>
<p>如果替换的字段是一个单词的一部分，那么这个参数就必须要用花括号括起来，以便准确指明结尾：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import Template</div><div class="line">&gt;&gt;&gt; s = Template(&quot;Hello ,my blogSite is www.$&#123;x&#125;&quot;)</div><div class="line">&gt;&gt;&gt; s.substitute(x=&quot;feyddy.com&quot;)</div><div class="line">&apos;Hello ,my blogSite is www.feyddy.com&apos;</div></pre></td></tr></table></figure>
<p>我们还可以使用<code>$$</code>插入美元符号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import Template</div><div class="line">&gt;&gt;&gt; s = Template(&quot;I hava ten $$,but this $&#123;x&#125;&quot;)</div><div class="line">&gt;&gt;&gt; s.substitute(x=&quot;Yours&quot;)</div><div class="line">&apos;I hava ten $,but this Yours&apos;</div></pre></td></tr></table></figure>
<p>还可以使用字典变量提供值/名称对：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import Template</div><div class="line">&gt;&gt;&gt; s = Template(&quot;My name is $name , my blogSite $site&quot;)</div><div class="line">&gt;&gt;&gt; dict=&#123;&#125;</div><div class="line">&gt;&gt;&gt; dict[&quot;name&quot;]=&quot;Feyddy&quot;</div><div class="line">&gt;&gt;&gt; dict[&quot;site&quot;]=&quot;is www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; s.substitute(dict)</div><div class="line">&apos;My name is Feyddy , my blogSite is www.feyddy.com&apos;</div></pre></td></tr></table></figure>
<h2 id="字符串格式化：完整版"><a href="#字符串格式化：完整版" class="headerlink" title="字符串格式化：完整版"></a>字符串格式化：完整版</h2><p>格式化操作符的右操作可以是任何东西，如果是元组或者映射类型（如字典），那么字典格式化将会有所不同。如果是元组的话，其中的每一个元素都必须被单独的格式化，每个值都需要一个对应的转换说明符。当然，如果是元组的话在元组作为转换表达式的一部分存在，那么必须将它用圆括号括起来，以免出错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;%s + %s = %s&quot;%(1,1,2)</div><div class="line">&apos;1 + 1 = 2&apos;</div><div class="line"></div><div class="line">&gt;&gt;&gt; &quot;%s + %s = %s&quot;% 1,1,2</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: not enough arguments for format string</div></pre></td></tr></table></figure>
<p>其中的<code>s</code>代表字符串格式的值。</p>
<p><strong>注意：</strong></p>
<p>基本的转换说明符包括以下部分：</p>
<ol>
<li>%字符：标记转换说明符的开始；</li>
<li>转换标识符（可选）：-表示左对齐；+表示在转换值之前要加上正负号；“”（空白字符串表示正数之前保留空格；0表示转换值，若位数不够<br>用0填充；</li>
<li>最小字段宽度（可选）：转换后的字符串至少应该具有该值指定的宽度。如果是*，则宽度会从值元组中读取；</li>
<li>点（.）后跟精度值（可选：如果转换的是实数，精度值就表示出现在小数点后的位数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*，那么精度将会从元组中读出。</li>
<li>转换类型：</li>
</ol>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fe0hwhl1fcj30hc0bomz9.jpg" alt=""></p>
<p>接下来将对转换说明符的各个元素进行详细讨论：</p>
<h3 id="简单转换"><a href="#简单转换" class="headerlink" title="简单转换"></a>简单转换</h3><p>只需要写出转换类型，使用起来简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;price of me :$%f&quot; % 100000000.99</div><div class="line">&apos;price of me :$100000000.990000&apos;</div><div class="line">&gt;&gt;&gt; &quot;Hexadecimal price of me : $%x&quot; % 100000000.99</div><div class="line">&apos;Hexadecimal price of me : $5f5e100&apos;</div><div class="line">&gt;&gt;&gt; &quot;Using str: %s&quot; %25L</div><div class="line">&apos;Using str: 25&apos;</div><div class="line">&gt;&gt;&gt; &quot;Using repr: %r&quot; %25L</div><div class="line">&apos;Using repr: 25L&apos;</div></pre></td></tr></table></figure>
<h3 id="字段宽度和精度"><a href="#字段宽度和精度" class="headerlink" title="字段宽度和精度"></a>字段宽度和精度</h3><p>转换说明符可以包含字段和精度。字段宽度就是转换后的值所保留的最小字符个数，精度则是结果中应该包含的小数位数，或者是转换后的值所能包含的最大字符个数。<br>这两个参数都是整数（首先是字段宽度，然后是精度），通过点号（.）分隔。虽然两个都是可选的参数，但如果只给出精度，就必须包含点号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;%10f&quot; % 3.1415926</div><div class="line">&apos;  3.141593&apos;</div><div class="line">&gt;&gt;&gt; &quot;%10.2f&quot; % 3.1415926</div><div class="line">&apos;      3.14&apos;</div><div class="line">&gt;&gt;&gt; &quot;%.2f&quot; % 3.1415926</div><div class="line">&apos;3.14&apos;</div><div class="line">&gt;&gt;&gt; &quot;%.2s&quot; % &quot;Feyddy&quot;</div><div class="line">&apos;Fe&apos;</div><div class="line">&gt;&gt;&gt; &quot;%10.2s&quot; % &quot;Feyddy&quot;</div><div class="line">&apos;        Fe&apos;</div><div class="line">&gt;&gt;&gt; &quot;%10s&quot; % &quot;Feyddy&quot;</div><div class="line">&apos;    Feyddy&apos;</div></pre></td></tr></table></figure>
<p>可以使用<em>（星号）作为字段宽度或者精度（或者两者都使用</em>），此时数值会从元组参数中读出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;%.*s&quot; %(5,&quot;Feyddy&quot;)</div><div class="line">&apos;Feydd&apos;</div><div class="line">&gt;&gt;&gt; &quot;%.*s&quot; % (10,&quot;www.feyddy.com&quot;)</div><div class="line">&apos;www.feyddy&apos;</div></pre></td></tr></table></figure>
<h3 id="符号、对齐和0填充"><a href="#符号、对齐和0填充" class="headerlink" title="符号、对齐和0填充"></a>符号、对齐和0填充</h3><p>在字段宽度和精度值之前还可以放置一个“标表”，该标表可以是零、加好、减号或空格。零表示数字将会用0填充。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;%010.3f&quot; % 3.1415926</div><div class="line">&apos;000003.142&apos;</div></pre></td></tr></table></figure>
<p>注意：这里的<code>010</code>,表示的是字段宽度为10，并且用0进行填充空位，而不是说字段宽度为8（八进制）。</p>
<p>减号（-）用来左对齐数值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;%-10.2f&quot; % 3.1415926</div><div class="line">&apos;3.14      &apos;</div></pre></td></tr></table></figure>
<p>空白（””）意味着在正数前加上空格。这在需要对齐正负数时会很有用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print (&quot;% 5d&quot; % 10) + &quot;\n&quot; + (&quot;% 5d&quot; % -10)</div><div class="line">   10</div><div class="line">  -10</div></pre></td></tr></table></figure>
<p>加号（+），它表示不管是正数还是负数都标示出符号（同样是在对齐的时候很有用）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print (&quot;%+5d&quot; % 10) + &quot;\n&quot; + (&quot;%+5d&quot; % -10)</div><div class="line">  +10</div><div class="line">  -10</div></pre></td></tr></table></figure>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在一个较长的字符串中查找子字符串。返回的是子串所在位置的最左端索引。如果没有找到的话就返回-1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;www.feyddy.com&quot;.find(&quot;feyddy&quot;)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; &quot;www.feyddy.com&quot;.find(&quot;Feyddy&quot;)</div><div class="line">-1</div><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite.find(&quot;Feyddy&quot;)</div><div class="line">-1</div><div class="line">&gt;&gt;&gt; blogSite.find(&quot;feyddy&quot;)</div><div class="line">4</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>可以接受可选的起始点和结束点参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; subject = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; subject.find(&quot;www&quot;)</div><div class="line">0</div><div class="line">&gt;&gt;&gt; subject.find(&quot;www&quot;,1)   #从起点是1的索引值开始往后找</div><div class="line">-1</div><div class="line">&gt;&gt;&gt; subject.find(&quot;feyddy&quot;,1)</div><div class="line">4</div><div class="line">&gt;&gt;&gt; subject.find(&quot;feyddy&quot;,0,4)   #从索引值为0的位置开始找并且到索引值为4之前的位置结束</div><div class="line">-1</div></pre></td></tr></table></figure>
<p>也就是说，这个起点和终点限制的范围包括起点的位置的内容，但是不包含终点位置的内容。</p>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>是split方法的逆方法，用来在队列中添加元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seq = [1,2,3,4,5]</div><div class="line">&gt;&gt;&gt; sep = &quot;+&quot;</div><div class="line">&gt;&gt;&gt; sep.join(seq)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: sequence item 0: expected string, int found</div><div class="line">&gt;&gt;&gt; seq=[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</div><div class="line">&gt;&gt;&gt; sep.join(seq)</div><div class="line">&apos;1+2+3+4+5&apos;</div></pre></td></tr></table></figure>
<p>可以看到，添加元素的队列必须是字符串。</p>
<p>使用目录的列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; dirs = &quot;&quot;,&quot;user&quot;,&quot;bin&quot;,&quot;env&quot;</div><div class="line">&gt;&gt;&gt; &quot;/&quot;.join(dirs)</div><div class="line">&apos;/user/bin/env&apos;</div><div class="line">&gt;&gt;&gt; print &quot;blogSite:&quot; + &quot;\\&quot;.join(dirs)</div><div class="line">blogSite:\user\bin\env</div></pre></td></tr></table></figure>
<p>格式化时，根据UNIX和DOS/WINDOWS的约定，使用了不同的分隔符号。</p>
<h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h3><p>返回字符串的小写字母版：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;Feyddy&apos;s blogSite is WWW.FEYDDY.COM&quot;.lower()</div><div class="line">&quot;feyddy&apos;s blogsite is www.feyddy.com&quot;</div></pre></td></tr></table></figure>
<p>这个可以用在判断用户是否存在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = &quot;Feyddy&quot;</div><div class="line">&gt;&gt;&gt; names = [&quot;feyddy&quot;,&quot;crice&quot;,&quot;haohao&quot;]</div><div class="line">&gt;&gt;&gt; if name in names:print &quot;Found it&quot;</div><div class="line">...</div><div class="line">&gt;&gt;&gt; if name.lower() in names:print &quot;Found it&quot;</div><div class="line">...</div><div class="line">Found it</div></pre></td></tr></table></figure>
<blockquote>
<p>和lower方法相关的是title方法，他将所有的单词的首字母全部大写，而其他的字母小写：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;that&apos;s all forks&quot;.title()</div><div class="line">&quot;That&apos;S All Forks&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>另一种string模块的capwords函数：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import string</div><div class="line">&gt;&gt;&gt; string.capwords(&quot;that&apos;s all forks&quot;)</div><div class="line">&quot;That&apos;s All Forks&quot;</div></pre></td></tr></table></figure>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>方法返回某字符串的所有匹配项均被替换之后得到的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;This is a test&quot;.replace(&quot;a&quot;,&quot;second&quot;)</div><div class="line">&apos;This is second test&apos;</div></pre></td></tr></table></figure>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>这个方法很重要。是join方法的逆方法，用来将字符串分割成序列：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;1+2+3+4+5&quot;.split(&quot;+&quot;)</div><div class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;]</div><div class="line">&gt;&gt;&gt; &quot;/user/bin/blog/feyddy&quot;.split(&quot;/&quot;)</div><div class="line">[&apos;&apos;, &apos;user&apos;, &apos;bin&apos;, &apos;blog&apos;, &apos;feyddy&apos;]</div><div class="line">&gt;&gt;&gt; &quot;using the default&quot;.split()</div><div class="line">[&apos;using&apos;, &apos;the&apos;, &apos;default&apos;]</div></pre></td></tr></table></figure>
<p>如果不提供任何的分隔符号，程序会把所有空格作为分隔符（空格、制表、换行等）。</p>
<h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h3><p>返回去除两侧（不包括内部）空格的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;   www.feyddy .com    &quot;.strip()</div><div class="line">&apos;www.feyddy .com&apos;</div></pre></td></tr></table></figure>
<p>可以和lower方法一起使用。</p>
<p>也可以指定去除的字符串的两端的字符，将他们列为参数即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;*** name ** feyddy ***asdasd! sdf ! ***&quot;.strip(&quot; *!&quot;)</div><div class="line">&apos;name ** feyddy ***asdasd! sdf&apos;</div></pre></td></tr></table></figure>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><p>和replace方法一样，可以替换字符串中的某些部分，但是和replace不同是的，translate只处理单个字符。它的优势在于可以同时进行多个替换，有的时候比replace效率高得多。</p>
<p>举个例子：假设需要将纯正的英文文本转换为带有德国口音的版本。所以需要把字符c替换成k,把s替换成z。</p>
<p>在使用translate转换之前，需要先完成一张转换表。转换表中是以某字符替换某字符的对应关系。使用string模块里的maketrans函数就行。</p>
<p>maketrans函数接受两个参数：两个等长的字符串，表示第一个字符串中的每一个字符都用第二个字符串中相同的字符替换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import maketrans</div><div class="line">&gt;&gt;&gt; table = maketrans(&quot;cs&quot;,&quot;kz&quot;)</div><div class="line">&gt;&gt;&gt; &quot;This is an incredible test&quot;.translate(table)</div><div class="line">&apos;Thiz iz an inkredible tezt&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>转换表中都有什么？</p>
</blockquote>
<p>转换表是包含替换ASCII字符集中256个字符的替换字母的字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from string import maketrans</div><div class="line">&gt;&gt;&gt; table = maketrans(&quot;cs&quot;,&quot;kz&quot;)</div><div class="line">&gt;&gt;&gt; len(table)</div><div class="line">256</div><div class="line">&gt;&gt;&gt; table[97:123]</div><div class="line">&apos;abkdefghijklmnopqrztuvwxyz&apos;</div><div class="line">&gt;&gt;&gt; maketrans(&quot;&quot;,&quot;&quot;)[97:123]</div><div class="line">&apos;abcdefghijklmnopqrstuvwxyz&apos;</div></pre></td></tr></table></figure>
<p>上面可以看出，已经把小写字部分的表提取出来了。看一下这个表和空转换中的字母表。空转换包含一个普通的字母表，而前面的代码中，字母c和s分别被替换成k和z。</p>
<p>translate的第二个参数是可选的，这个参数是用来指定需要删除的字符。例如，如果想要模拟一句语速超快的的国语，可以删除所有的空格：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;This is an incredible test&quot;.translate(table,&quot; &quot;)</div><div class="line">&apos;Thizizaninkredibletezt&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>非英语字符串的问题：有的时候字符中又不是英语的字符串，此时如果想转成大写或者小写的话，lower就没用了，只能通过translate。</p>
</blockquote>
<h1 id="函数总结"><a href="#函数总结" class="headerlink" title="函数总结"></a>函数总结</h1><p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fe0miocslwj30he04hwfg.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python学习笔记（二）]]></title>
      <url>http://yoursite.com/2017/03/24/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="列表和元组"><a href="#列表和元组" class="headerlink" title="列表和元组"></a>列表和元组</h1><p>首先介绍一下数据结构这个概念。数据结构是通过某种方式组织在一起的数据元素的集合，这些数据元素可以是数字或者字符，甚至可以是其他数据结构。在Python中最基本的数据结构是序列(sequence)。序列中的每一个元素被分配一个序列号—即元素的位置，也称为索引。第一个索引是0，第二个是1，以此类推。</p>
<h2 id="序列概览"><a href="#序列概览" class="headerlink" title="序列概览"></a>序列概览</h2><p>Python中有6种內建的序列。列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。这里我们先主要介绍列表和元组。</p>
<p>列表和元组的主要区别：列表可以修改，但是元组不能。一般情况下列表都可以代替元组。（但是元组作为字典的键，因为键不能修改，所以不能使用列表）。</p>
<p>列表在操作一组数值的时候很好用。而且一个序列也可以包含其他的序列。（列表的各个元素使用逗号分开）如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; myInfo = [&quot;Feyddy&quot;,25]</div><div class="line">&gt;&gt;&gt; blog = [&quot;iOS developer&quot;,&quot;www.feyddy.com&quot;]</div><div class="line">&gt;&gt;&gt; allInfo = [myInfo,blog]</div><div class="line">&gt;&gt;&gt; allInfo</div><div class="line">[[&apos;Feyddy&apos;, 25], [&apos;iOS developer&apos;, &apos;www.feyddy.com&apos;]]</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：Python中还有一种名为容器(container)的数据结构。容器基本上是包含其他对象的任意对象。序列（元组和列表）和映射（字典）是两类主要的容器。还有一个既不是序列也不是映射的容器类型，那就是集合（set）。</p>
</blockquote>
<a id="more"></a>
<h2 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h2><p>所有的序列类型都可以进行某些特的操作。如：索引（indexing）、分片（sliceing）、加（adding）、乘（multiplying）以及检查某个元素是否属于序列的成员（成员资格）。除此以外python还有计算长度、找出最大元素和最小元素的內建函数。</p>
<blockquote>
<p>迭代（iteration）。依次对序列中的每个元素重复执行某些操作。</p>
</blockquote>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>序列中的所有元素都是有编号的—–从0开始。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[2]</div><div class="line">&apos;w&apos;</div><div class="line">&gt;&gt;&gt; blogSite[3]</div><div class="line">&apos;.&apos;</div></pre></td></tr></table></figure>
<p>因为字符串是有字符组的序列，所以可以直接通过索引获取对应位置的字符。</p>
<p>如果使用负数索引值的话，会从右边开始计数，但是最右边的元素的位置的编号是<code>-1</code>，而不是<code>-0</code>。这是因为如果是<code>-0</code>，就会和第一个元素重合,都是<code>0</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[-0]</div><div class="line">&apos;w&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-1]</div><div class="line">&apos;m&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-2]</div><div class="line">&apos;o&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-3]</div><div class="line">&apos;c&apos;</div></pre></td></tr></table></figure>
<p>当然，一个字符串的字面值可以直接使用索引，而不需要创建一个变量来接受，然后使用索引。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;www.feyddy.com&quot;[4]</div><div class="line">&apos;f&apos;</div><div class="line">&gt;&gt;&gt; &quot;www.feyddy.com&quot;[-1]</div><div class="line">&apos;m&apos;</div></pre></td></tr></table></figure>
<p>如果一个函数有返回值，而且是一个序列类型的返回值。可以直接对返回的结果进行索引操作。如下：我只获取用户输入的第四个元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fourthValue = raw_input(&quot;Year:&quot;)[3]</div><div class="line">Year:2017</div><div class="line">&gt;&gt;&gt; fourthValue</div><div class="line">&apos;7&apos;</div></pre></td></tr></table></figure>
<h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p>可以使用索引值来访问一个元素，也可以使用分片来访问一个范围内的所有的元素。分片通过冒号相隔两个索引来实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[2:4]</div><div class="line">&apos;w.&apos;</div><div class="line">&gt;&gt;&gt; blogSite[2:-1]</div><div class="line">&apos;w.feyddy.co&apos;</div></pre></td></tr></table></figure>
<p>可以看出第一个索引是你提取的部分的索引，最后一个索引是你要截止的那部分的编号，但是此编号的数值不会截取出来。</p>
<p>总的来说，分片是需要两个索引值作为边界使用的。第一个索引值包含在里面，第二个则不包含在里面。</p>
<ol>
<li>优雅的捷径</li>
</ol>
<p>现在如果我想取某个索引值一直到最后的所有的元素的话,用下面的方法肯定没问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[6:14]</div><div class="line">&apos;yddy.com&apos;</div></pre></td></tr></table></figure>
<p>但是如果我用负数从后面开始取的话怎么办呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[-8:-1]</div><div class="line">&apos;yddy.co&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-8:0]</div><div class="line">&apos;&apos;</div></pre></td></tr></table></figure>
<p>要么永远取不了<code>-1</code>位置的数，如果使用<code>-0</code>，直接为空了。</p>
<p>因此我们可以使用便捷的方式，那就是置空后面一个索引值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[6:]</div><div class="line">&apos;yddy.com&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-8:]</div><div class="line">&apos;yddy.com&apos;</div></pre></td></tr></table></figure>
<p>当然同样适用于开始的元素索引位置：(获取某个索引值前面所有的元素)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[:-1]</div><div class="line">&apos;www.feyddy.co&apos;</div><div class="line">&gt;&gt;&gt; blogSite[:14]</div><div class="line">&apos;www.feyddy.com&apos;</div><div class="line">&gt;&gt;&gt; blogSite[:13]</div><div class="line">&apos;www.feyddy.co&apos;</div></pre></td></tr></table></figure>
<p>如果需要获取整个序列的元素的话，只需要将两个索引都置为空就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite[:]</div><div class="line">&apos;www.feyddy.com&apos;</div></pre></td></tr></table></figure>
<ol>
<li>更大的步长</li>
</ol>
<p>分片可以设置开始与结束位置。但是还有一个隐式的参数步长，默认是1。就是从开始的索引位置每隔一个步长获取该位置的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[0:14:3]</div><div class="line">&apos;w.yyo&apos;</div></pre></td></tr></table></figure>
<p>上面的意思就是从0索引值开始，每隔2个元素获取一个元素，一直到索引值为14的位置。其基本格式为<code>[索引开始位置:索引结束为止:步长]</code>。</p>
<p>这个也可以结合前面的捷径方式来使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; blogSite[4::3]</div><div class="line">&apos;fd.m&apos;</div><div class="line">&gt;&gt;&gt; blogSite[:12:3]</div><div class="line">&apos;w.yy&apos;</div><div class="line">&gt;&gt;&gt; blogSite[::3]</div><div class="line">&apos;w.yyo&apos;</div><div class="line">&gt;&gt;&gt; blogSite[::-2]</div><div class="line">&apos;mcyde.w&apos;</div><div class="line">&gt;&gt;&gt; blogSite[:-4:-2]</div><div class="line">&apos;mc&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-10::-2]</div><div class="line">&apos;fww&apos;</div><div class="line">&gt;&gt;&gt; blogSite[-10::0]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: slice step cannot be zero</div></pre></td></tr></table></figure>
<p>从上面的例子可以看出来，步长可以为负数，那就是从右往左开始数。但是步长不能为0，否则报错。</p>
<p>这里关于分片的使用最需要注意的就是索引问题。尤其是后面的索引取不到，这个就需要浩浩动些脑经了。</p>
<h3 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [1,2,3]+[4,5,6,7]</div><div class="line">[1, 2, 3, 4, 5, 6, 7]</div><div class="line">&gt;&gt;&gt; &quot;Hello guys, &quot; + &quot;welcome to my blog&quot;</div><div class="line">&apos;Hello guys, welcome to my blog&apos;</div><div class="line">&gt;&gt;&gt; [1,2,3] + &quot;Hello&quot;</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: can only concatenate list (not &quot;str&quot;) to list</div></pre></td></tr></table></figure>
<p>从上面的例子可以看出来，序列相加就是直接拼接两个序列里面的内容，进行合并。但是前提是两者必须是相同的类型。</p>
<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>如果用数字n乘以一个序列的话，会生成一个新的序列，在新的序列中，原序列被执行n次：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [1,2,3]*3</div><div class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</div><div class="line">&gt;&gt;&gt; &quot;Feyddy&quot; *3</div><div class="line">&apos;FeyddyFeyddyFeyddy&apos;</div></pre></td></tr></table></figure>
<p><strong>none、空列表和初始化</strong></p>
<p>空列表可以简单的通过<code>[]</code>来表示，但是里面什么都没有。如果想创建一个占10个元素的空间，却不包含任何元素的时候，可以使用<code>None</code>。<code>None</code>是Python的內建值。它的确切含义是“这里什么都没有”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sequence = [None] * 10</div><div class="line">&gt;&gt;&gt; sequence</div><div class="line">[None, None, None, None, None, None, None, None, None, None]</div></pre></td></tr></table></figure>
<h3 id="成员资格"><a href="#成员资格" class="headerlink" title="成员资格"></a>成员资格</h3><p>检验一个值是否在序列中，可以使用<code>in</code>运算符。返回<code>True</code>或者<code>False</code>。这个就是布尔值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; blogType = [&quot;Python&quot;,&quot;iOS&quot;,&quot;Swift&quot;,&quot;JavaScript&quot;]</div><div class="line">&gt;&gt;&gt; &quot;Python&quot; in blogType</div><div class="line">True</div><div class="line">&gt;&gt;&gt; &quot;HTML&quot; in blogType</div><div class="line">False</div><div class="line">&gt;&gt;&gt; raw_input(&quot;Which language do you want to learn from blogType?&quot;) in blogType</div><div class="line">Which language do you want to learn from blogType?Python</div><div class="line">True</div><div class="line">&gt;&gt;&gt; blogSite = &quot;www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; &quot;feyddy&quot; in blogSite</div><div class="line">True</div></pre></td></tr></table></figure>
<p>这里最后一个例子<code>&quot;feyddy&quot; in blogSite</code>有些不同。一般来说<code>in</code><br>运算符会检查一个对象是否为某个序列的成员，然而，字符串唯一的成员或者元素就是它的字符，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;f&quot; in &quot;feyddy&quot;</div><div class="line">True</div></pre></td></tr></table></figure>
<p>在早期的Python版本中，<code>in</code>是唯一能用于字符串成员资格检查的方法，也就是检查某个字符是否存在于一个字符中。如果尝试去检查一个较长的子字符串的话会报错。但是从Python2.3以后，<code>in</code>也可以用来实现这个功能了。</p>
<p>下面实现一个小例子:</p>
<p>检查用户名和PIN密码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dateBase = [</div><div class="line">[<span class="string">"Feyddy"</span>,<span class="string">"1234"</span>],[<span class="string">"haohao"</span>,<span class="string">"12345"</span>],[<span class="string">"crice"</span>,<span class="string">"123456"</span>]</div><div class="line">]</div><div class="line">userName = raw_input(<span class="string">"Please enter your userName:"</span>)</div><div class="line">pin_code = raw_input(<span class="string">"please enter your pinCode:"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> [userName,pin_code] <span class="keyword">in</span> dateBase:</div><div class="line">    print(<span class="string">"Welcome"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMac-mini:Pyhton学习笔记(二) t3$ python in.py</div><div class="line">Please enter your userName:Feyddy</div><div class="line">please enter your pinCode:1234</div><div class="line">Welcome</div><div class="line">xuzhonglindeMac-mini:Pyhton学习笔记(二) t3$ python in.py</div><div class="line">Please enter your userName:qweqw</div><div class="line">please enter your pinCode:123456</div></pre></td></tr></table></figure>
<h3 id="长度、最小值和最大值"><a href="#长度、最小值和最大值" class="headerlink" title="长度、最小值和最大值"></a>长度、最小值和最大值</h3><p>內建函数len、min和max非常有用。len函数返回序列中所包含的元素的数量。min函数和max函数则分别返回序列中最大和最小的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers = [100,34,78]</div><div class="line">&gt;&gt;&gt; len(numbers)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; min(numbers)</div><div class="line">34</div><div class="line">&gt;&gt;&gt; max(numbers)</div><div class="line">100</div><div class="line">&gt;&gt;&gt; max(2,3,476,45,89,100)</div><div class="line">476</div></pre></td></tr></table></figure>
<p>上面最后一个例子，max函数的参数并不是一个序列，而是多个数字直接作为参数。</p>
<h2 id="列表：Python的“苦力”"><a href="#列表：Python的“苦力”" class="headerlink" title="列表：Python的“苦力”"></a>列表：Python的“苦力”</h2><p>列表不同于元组和字符串的地方在于：列表是可变的（mutable）—-可以改变列表的内容，并且列表有很多有用的、专门的方法。</p>
<h3 id="list函数"><a href="#list函数" class="headerlink" title="list函数"></a>list函数</h3><p>因为字符串不能被修改，所以有时候根据字符串创建列表会很有用。这个时候用list函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list(&quot;Feyddy&quot;)</div><div class="line">[&apos;F&apos;, &apos;e&apos;, &apos;y&apos;, &apos;d&apos;, &apos;d&apos;, &apos;y&apos;]</div><div class="line">&gt;&gt;&gt; list([1,2,3,4,4])</div><div class="line">[1, 2, 3, 4, 4]</div></pre></td></tr></table></figure>
<p>list函数适用于所有类型的序列，而不只是字符串。</p>
<blockquote>
<p>可以用<code>&#39;&#39;.join(somelist)</code>。将一个由字符组成的列表转换为字符串；</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = list(&quot;Feyddy&quot;)</div><div class="line">&gt;&gt;&gt; &apos;&apos;.join(a)</div><div class="line">&apos;Feyddy&apos;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="基本的列表操作"><a href="#基本的列表操作" class="headerlink" title="基本的列表操作"></a>基本的列表操作</h3><p>列表适用于所有的序列的标准操作。但是它是可以被改变的。下面介绍元素的赋值，元素的删除，分片赋值以及列表方法。（<strong>注意：不是所有的列表方法都真正地改变列表</strong>）</p>
<ol>
<li>改变列表：元素赋值</li>
</ol>
<p>我们限定某个索引的元素进行修改赋值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3]</div><div class="line">&gt;&gt;&gt; x[1] = &quot;Feyddy&quot;</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, &apos;Feyddy&apos;, 3]</div></pre></td></tr></table></figure>
<blockquote>
<p>不能为一个位置不存在的元素进行赋值。也就是说如果列表的长度为2，就不能为索引值为100的元素进行赋值，必须创建一个长度为101的列表。</p>
</blockquote>
<ol>
<li>删除元素</li>
</ol>
<p>使用<code>del</code>语句实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x=[1,2,3,4,5,5]</div><div class="line">&gt;&gt;&gt; del x[2]</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 4, 5, 5]</div></pre></td></tr></table></figure>
<blockquote>
<p>del语句还可以用于字典元素的删除等。后面介绍。</p>
</blockquote>
<ol>
<li>分片赋值</li>
</ol>
<p>程序可以一次为多个元素赋值，而且还有个特性：可以使用与原序列不等长的序列将分片替换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; name = list(&quot;Feyddy&quot;)</div><div class="line">&gt;&gt;&gt; name[1:] = list(&quot;Welcome to my blog&quot;)</div><div class="line">&gt;&gt;&gt; name</div><div class="line">[&apos;F&apos;, &apos;W&apos;, &apos;e&apos;, &apos;l&apos;, &apos;c&apos;, &apos;o&apos;, &apos;m&apos;, &apos;e&apos;, &apos; &apos;, &apos;t&apos;, &apos;o&apos;, &apos; &apos;, &apos;m&apos;, &apos;y&apos;, &apos; &apos;, &apos;b&apos;, &apos;l&apos;, &apos;o&apos;, &apos;g&apos;]</div></pre></td></tr></table></figure>
<p>分片还可以在不替换任何元素的情况下，插入新的元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers=[1,2,3,4,5]</div><div class="line">&gt;&gt;&gt; numbers[2:2]=[10,9,8,7]</div><div class="line">&gt;&gt;&gt; numbers</div><div class="line">[1, 2, 10, 9, 8, 7, 3, 4, 5]</div></pre></td></tr></table></figure>
<p>上面的<code>2:2</code>就是替换了一个空的分片，因此实际的操作就是插入了一个序列。以此类推通过分片删除也是可以的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers=[1,2,3,4,5]</div><div class="line">&gt;&gt;&gt; numbers[1:3] = []</div><div class="line">&gt;&gt;&gt; numbers</div><div class="line">[1, 4, 5]</div></pre></td></tr></table></figure>
<h3 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h3><p>方法是一个与某些对象有紧密联系的函数，对象可能是列表和数字，也可能是字符串或者其他类型的对象，一般来说，方法可以这样进行调用：<code>对象.方法(参数)</code>。</p>
<ol>
<li>append</li>
</ol>
<p>在列表末尾追加新的对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lis=[1,2,3]</div><div class="line">&gt;&gt;&gt; lis.append([4,5,6])</div><div class="line">&gt;&gt;&gt; lis</div><div class="line">[1, 2, 3, [4, 5, 6]]</div><div class="line">&gt;&gt;&gt; lis.append(4)</div><div class="line">&gt;&gt;&gt; lis</div><div class="line">[1, 2, 3, [4, 5, 6], 4]</div></pre></td></tr></table></figure>
<p><strong>注意：append不是简单的返回一个修改过的新的列表—-而是直接修改原来的列表。</strong></p>
<ol>
<li>count</li>
</ol>
<p>计算某个元素在列表中出现的次数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [1,2,3,4,5,4,3,4,3,2,1,6,789].count(1)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; [1,2,3,4,5,4,3,4,3,2,1,6,789].count(2)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; [1,2,3,4,5,4,3,4,3,2,1,6,789].count(3)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; x=[[1,2],3,4,[1,2],4]</div><div class="line">&gt;&gt;&gt; x.count(4)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; x.count([1,2])</div><div class="line">2</div></pre></td></tr></table></figure>
<ol>
<li>extend</li>
</ol>
<p>可以在列表的末尾一次性追加另一个序列中的多个值。换句话说，可以用新列表扩展原有的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; origin_list = [1,2,3]</div><div class="line">&gt;&gt;&gt; extend_list = [4,5,6]</div><div class="line">&gt;&gt;&gt; origin_list.extend(extend_list)</div><div class="line">&gt;&gt;&gt; origin_list</div><div class="line">[1, 2, 3, 4, 5, 6]</div></pre></td></tr></table></figure>
<p>这儿看上去像是连接操作，但是<code>extend</code>是修改了原来的序列，但是连接操作是返回一个新的列表，原来的都没有修改过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = [1,2,3]</div><div class="line">&gt;&gt;&gt; b = [4,5,6]</div><div class="line">&gt;&gt;&gt; a+b</div><div class="line">[1, 2, 3, 4, 5, 6]</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[1, 2, 3]</div><div class="line">&gt;&gt;&gt; x = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]</div><div class="line">&gt;&gt;&gt; y = [&apos;d&apos;,&apos;e&apos;,&apos;f&apos;]</div><div class="line">&gt;&gt;&gt; x.extend(y)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;]</div></pre></td></tr></table></figure>
<ol>
<li>index</li>
</ol>
<p>用于从列表中找出某个值第一个匹配项的索引位置，即使列表里面有多个同样的值，但是只会返回搜索到的第一个匹配的索引值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,4,3]</div><div class="line">&gt;&gt;&gt; x.index(3)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; x.index(5)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: 5 is not in list</div></pre></td></tr></table></figure>
<ol>
<li>insert</li>
</ol>
<p>用于将对象插入列表中：<code>insert(索引值,元素)</code>。注意，元素是插在索引值前面的位置上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; names = [&quot;Feyddy&quot;,&quot;haohao&quot;,&quot;crice&quot;,&quot;Tony&quot;]</div><div class="line">&gt;&gt;&gt; names.insert(1,&quot;Donggua&quot;)</div><div class="line">&gt;&gt;&gt; names</div><div class="line">[&apos;Feyddy&apos;, &apos;Donggua&apos;, &apos;haohao&apos;, &apos;crice&apos;, &apos;Tony&apos;]</div></pre></td></tr></table></figure>
<p>还有可以使用分片的方法插入，但是不推荐：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; names = [&quot;Feyddy&quot;,&quot;haohao&quot;,&quot;crice&quot;,&quot;Tony&quot;]</div><div class="line">&gt;&gt;&gt; names[1:1] = [&quot;Donggua&quot;]</div><div class="line">&gt;&gt;&gt; names</div><div class="line">[&apos;Feyddy&apos;, &apos;Donggua&apos;, &apos;haohao&apos;, &apos;crice&apos;, &apos;Tony&apos;]</div></pre></td></tr></table></figure>
<ol>
<li>pop</li>
</ol>
<p>移除列表中的一个元素（默认是最后一个），并且返回该元素的值：<code>pop(索引值)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3]</div><div class="line">&gt;&gt;&gt; x.pop()</div><div class="line">3</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2]</div><div class="line">&gt;&gt;&gt; x.pop(1)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1]</div></pre></td></tr></table></figure>
<p><strong>注意：pop方法是唯一一个既能修改列表又返回元素值（除了None）的列表方法</strong></p>
<p>使用pop方法可以实现一种常见的数据结构—-栈。栈的原理就像是堆放盘子。只能从顶部放盘子和拿盘子。即后进先出原则。也就是入栈（push）和出栈（pop）。当然，Python没有入栈，但是可以把append方法当做是入栈方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3]</div><div class="line">&gt;&gt;&gt; x.append(x.pop())</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3]</div></pre></td></tr></table></figure>
<p>先出的是3后进的是3。</p>
<blockquote>
<p>如果需要实现一个先进先出的队列，那么可以使用insert(0,_ )来代替append方法，或者也可以继续使用append方法，但是必须用pop(0)来代替pop()。更好的是使用collection模块中的deque对象。后面讲解。</p>
</blockquote>
<ol>
<li>remove</li>
</ol>
<p>移除列表中某个值的第一匹配项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; x.remove(3)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 42, 34, 4, 3, 2]</div><div class="line">&gt;&gt;&gt; x.remove(222)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: list.remove(x): x not in list</div></pre></td></tr></table></figure>
<p><strong>注意：remove是一个没有返回值的，它改变了列表，但是没有返回值，与pop相反</strong></p>
<ol>
<li>reverse</li>
</ol>
<p>将列表中的元素反向存放：（该方法也改变了列表，但是没有返回值）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; x.reverse()</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[2, 3, 4, 34, 42, 3, 2, 1]</div></pre></td></tr></table></figure>
<blockquote>
<p>如果需要对一个序列进行反向迭代，可以使用reversed函数。这个函数并不是返回一个列表，而是一个迭代器。但是可以使用list将其转换成列表;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; reversed(x)</div><div class="line">&lt;listreverseiterator object at 0x109b90a10&gt;</div><div class="line">&gt;&gt;&gt; list(reversed(x))</div><div class="line">[2, 3, 4, 34, 42, 3, 2, 1]</div></pre></td></tr></table></figure>
<ol>
<li>sort</li>
</ol>
<p>用于在原位置对列表进行排序。“在原位置”意味着改变原来的列表，而不是简单返回一个已排序的列表副本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; x.sort()</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 2, 3, 3, 4, 34, 42]</div></pre></td></tr></table></figure>
<p>由此可以看出sort是在原来的列表上改变的。</p>
<p>但是如果想要一个排好序的列表副本，同时又保留原有的列表不变的时候，就出现问题了。很多人会想到用下面的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; y = x.sort()</div><div class="line">&gt;&gt;&gt; print y</div><div class="line">None</div></pre></td></tr></table></figure>
<p>可以看出返回的是一个空的。所以这是错误的。</p>
<p>正确的方法应该是先把x的副本赋值非y，然后对y进行排序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; y = x[:]</div><div class="line">&gt;&gt;&gt; y.sort()</div><div class="line">&gt;&gt;&gt; y</div><div class="line">[1, 2, 2, 3, 3, 4, 34, 42]</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3, 42, 34, 4, 3, 2]</div></pre></td></tr></table></figure>
<p>这里使用x[:]，是为了得到包含了x的所有元素的分片。</p>
<p><strong>注意：不能单纯地<code>y=x</code>，因为这样做就让x和y都指向同一个列表</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; y = x</div><div class="line">&gt;&gt;&gt; y.sort()</div><div class="line">&gt;&gt;&gt; y</div><div class="line">[1, 2, 2, 3, 3, 4, 34, 42]</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 2, 3, 3, 4, 34, 42]</div></pre></td></tr></table></figure>
<p>另一种获取已排序的列表副本的方法是：sorted函数—可以用于任何序列，总是会返回一个副本列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,2,3,42,34,4,3,2]</div><div class="line">&gt;&gt;&gt; y = sorted(x)</div><div class="line">&gt;&gt;&gt; y</div><div class="line">[1, 2, 2, 3, 3, 4, 34, 42]</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[1, 2, 3, 42, 34, 4, 3, 2]</div></pre></td></tr></table></figure>
<p>如果想按照相反的顺序排列，可以先使用sort(或者sorted函数),然后再使用reverse函数。</p>
<ol>
<li>高级排序</li>
</ol>
<p>如果希望元素能按照特定的方式进行排序（而不是sort函数默认的方式，即默认的升序排列方式），可以通过compare(x,y)的形式自定义比较函数。compare(x,y)函数会在x<y时返回负数，会在x>y时返回正数，如果x = y则返回0（根据你的定义）。定义好函数之后，就可以提供给sort方法作为参数。內建函数cmp函数提供了比较函数的默认实现方式：</y时返回负数，会在x></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; cmp(42,23)</div><div class="line">1</div><div class="line">&gt;&gt;&gt; cmp(23,42)</div><div class="line">-1</div><div class="line">&gt;&gt;&gt; cmp(10,10)</div><div class="line">0</div><div class="line">&gt;&gt;&gt; cmp(&quot;Feyddy&quot;,&quot;as&quot;)</div><div class="line">-1</div><div class="line">&gt;&gt;&gt; cmp(&quot;Feyddy&quot;,&quot;Feyddy&quot;)</div><div class="line">0</div><div class="line">&gt;&gt;&gt; number = [1,3,6,2,3,1,56,24]</div><div class="line">&gt;&gt;&gt; number.sort(cmp)</div><div class="line">&gt;&gt;&gt; number</div><div class="line">[1, 1, 2, 3, 3, 6, 24, 56]</div></pre></td></tr></table></figure>
<p>sort方法有另外两个可选的参数—-key和reverse。如果要使用它们，那么就要通过名字来指定。参数key与参数cmp类似—-必须提供一个在排序过程中使用的函数。然而该函数不是直接用来确定对象的大小，而是为每一个元素创建一个键，然后所有元素根据键来排序。因此，如果要根据元素的长度进行排序，那么可以使用len作为键函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [&quot;Feyddy&quot;,&quot;sccf&quot;,&quot;crice&quot;,&quot;donggua&quot;]</div><div class="line">&gt;&gt;&gt; x.sort(key=len)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[&apos;sccf&apos;, &apos;crice&apos;, &apos;Feyddy&apos;, &apos;donggua&apos;]</div></pre></td></tr></table></figure>
<p>另一个关键字参数是reverse是简单的布尔值(True或False)，用来指明列表是否进行反向排序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [1,4,2,6,3,7,4]</div><div class="line">&gt;&gt;&gt; x.sort(reverse=True)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[7, 6, 4, 4, 3, 2, 1]</div></pre></td></tr></table></figure>
<p>cmp、key、reverse参数都可以用于sorted函数。在多数情况下，为cmp或key提供自定义函数是非常有用的。</p>
<h2 id="元组：不可变序列"><a href="#元组：不可变序列" class="headerlink" title="元组：不可变序列"></a>元组：不可变序列</h2><p>元组与列表一样，也是一种序列，唯一不同的是元组不能修改。（字符串也是不能修改的）。创建方法很简单，只需要用逗号分割一些数值就行。元组大部分时候都是通过圆括号括起来的；空元组就用没有内容的两个圆括号表示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 1,2,3</div><div class="line">(1, 2, 3)</div><div class="line">&gt;&gt;&gt; (4,5,6)</div><div class="line">(4, 5, 6)</div><div class="line">&gt;&gt;&gt; ()</div><div class="line">()</div></pre></td></tr></table></figure>
<p>那么如何实现包括一个值的元组呢？实现方法比较奇特—-必须加一个逗号，即使只有一个值:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; (&quot;Feyddy&quot;,)</div><div class="line">(&apos;Feyddy&apos;,)</div><div class="line">&gt;&gt;&gt; &quot;Feyddy&quot;,</div><div class="line">(&apos;Feyddy&apos;,)</div><div class="line">&gt;&gt;&gt; (&quot;Feyddy&quot;)</div><div class="line">&apos;Feyddy&apos;</div></pre></td></tr></table></figure>
<p>如果不加逗号就会显示为字符串。所以说逗号在元组里面是很重要的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 3*(40+2)</div><div class="line">126</div><div class="line">&gt;&gt;&gt; 3*(40+2,)</div><div class="line">(42, 42, 42)</div></pre></td></tr></table></figure>
<h3 id="tuple函数"><a href="#tuple函数" class="headerlink" title="tuple函数"></a>tuple函数</h3><p>功能与list函数基本上一样：以一个序列作为参数并把它转换为元组。如果参数是元组，那么该参数就会被原样返回：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; tuple([1,2,3])</div><div class="line">(1, 2, 3)</div><div class="line">&gt;&gt;&gt; tuple((1,2,3))</div><div class="line">(1, 2, 3)</div><div class="line">&gt;&gt;&gt; tuple(&apos;abc&apos;)</div><div class="line">(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)</div><div class="line">&gt;&gt;&gt; tuple(&apos;a,b,c&apos;)</div><div class="line">(&apos;a&apos;, &apos;,&apos;, &apos;b&apos;, &apos;,&apos;, &apos;c&apos;)</div></pre></td></tr></table></figure>
<h3 id="基本元组操作"><a href="#基本元组操作" class="headerlink" title="基本元组操作"></a>基本元组操作</h3><p>元组其实并不复杂—-除了创建元组和访问元组元素之外，也没有太多其他操作。可以参照其他类型的序列来实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = 1,2,3</div><div class="line">&gt;&gt;&gt; x[1]</div><div class="line">2</div><div class="line">&gt;&gt;&gt; x[2]</div><div class="line">3</div><div class="line">&gt;&gt;&gt; x[3]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: tuple index out of range</div><div class="line">&gt;&gt;&gt; x[0:11]</div><div class="line">(1, 2, 3)</div><div class="line">&gt;&gt;&gt; x[0:1]</div><div class="line">(1,)</div><div class="line">&gt;&gt;&gt; x[0:2]</div><div class="line">(1, 2)</div></pre></td></tr></table></figure>
<p>元组的分片还是元组，列表的分片还是列表。</p>
<h3 id="元组的意义"><a href="#元组的意义" class="headerlink" title="元组的意义"></a>元组的意义</h3><p>由于列表的可变性，元组的不可变有必要吗？下面介绍元组不可替代的两个重要原因：</p>
<ul>
<li>元组可以再映射（和集合的成员）中当做键使用—-而列表则不行。</li>
<li>元组作为很多內建函数和方法的返回值存在，也就是说你必须对元组进行处理。只要不尝试修改元组，那么，处理元组在绝大多数情况下就是把它们当做列表来进行操作（除非需要使用一些元组没有的方法，例如index和count）。</li>
</ul>
<p>一般来说，列表可能更能满足对序列的所有需求。</p>
<h1 id="函数总结："><a href="#函数总结：" class="headerlink" title="函数总结："></a>函数总结：</h1><p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdy0vpp62hj30h906m75n.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python新手入门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python学习笔记（一）]]></title>
      <url>http://yoursite.com/2017/03/23/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="数字和表达式的注意点"><a href="#数字和表达式的注意点" class="headerlink" title="数字和表达式的注意点"></a>数字和表达式的注意点</h2><h3 id="整数除法"><a href="#整数除法" class="headerlink" title="整数除法(/)"></a>整数除法(/)</h3><p><code>1/2</code> 结果是0。这个其实是类似与OC语的取整运算。那么怎么才能算出小数呢？</p>
<p>有两种方法：</p>
<ol>
<li>运用实数（包含小数点的十进制数，如：10.0）而不是整数进行运算。实数在Python中被称为浮点数，两者相除，如果有一个浮点数，结果就是浮点数，如：<code>1.0/2</code>、<code>1 / 2.0</code>、<code>1/2.</code>，结果都是0.5；</li>
<li>让python改变除法的执行方式。可以通过在运行除法之前，添加使用<code>from __future__ import division</code>。来告诉Python只执行普通的除法。这个时候<code>1/2</code>结果就是<code>0.5</code>。</li>
<li>通过命令行运行Python,可以使用命令开关-<code>Qnew</code>。(这里就不介绍了)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from __future__ import division</div><div class="line">&gt;&gt;&gt; 1/2</div><div class="line">0.5</div></pre></td></tr></table></figure>
<p>通过上面的第二种方法已经将取整运算的<code>/</code>方法变成了普通的除法运算，而不是取整运算，那么怎么才能继续使用取整运算呢？<code>//</code>使用两个就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from __future__ import division</div><div class="line">&gt;&gt;&gt; 1/2</div><div class="line">0.5</div><div class="line">&gt;&gt;&gt; 1//2</div><div class="line">0</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="取余-模除"><a href="#取余-模除" class="headerlink" title="取余(模除%)"></a>取余(模除%)</h3><p>对浮点数也同样适用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 10%3</div><div class="line">1</div><div class="line">&gt;&gt;&gt; 2.75%0.5</div><div class="line">0.25</div></pre></td></tr></table></figure>
<h3 id="幂运算（乘方-）"><a href="#幂运算（乘方-）" class="headerlink" title="幂运算（乘方**）"></a>幂运算（乘方**）</h3><p><strong>注意</strong>：幂运算符的优先级比取反(<code>-</code>)的要高。也就是<code>-3**2</code>等价于<code>-(3**2)</code>,但是不等价于<code>(-3)**2</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 3**2</div><div class="line">9</div><div class="line">&gt;&gt;&gt; -3**3</div><div class="line">-27</div><div class="line">&gt;&gt;&gt; -(3**3)</div><div class="line">-27</div><div class="line">&gt;&gt;&gt; (-3)**2</div><div class="line">9</div></pre></td></tr></table></figure>
<h3 id="长整型"><a href="#长整型" class="headerlink" title="长整型"></a>长整型</h3><p>长整型和普通整型一样，但是后面有一个<code>L</code>。但是可以混合使用。除非需要检验类型，否则不用担心两者的区别。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 123123123123123123123L + 123123123123123123123L +23</div><div class="line">246246246246246246269L</div></pre></td></tr></table></figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>代表（或者引用）某值得名字。如下：<code>x=3</code>,可以称作是赋值操作，也可以称作是将变量<code>x</code>绑定了值3。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = 3</div><div class="line">&gt;&gt;&gt; x * 3</div><div class="line">9</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 在使用变量的时候必须先给变量赋值，否则会报错。</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>语句（做某事）和表达式（某事）之间的区别在赋值时会表现得更加明显一些。因为语句不是表达式，所以没有值可供交互式解释器打印出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print &quot;表达式&quot;</div><div class="line">表达式</div><div class="line">&gt;&gt;&gt; x=3</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; print &quot;语句&quot;</div><div class="line">语句</div><div class="line">&gt;&gt;&gt; print &quot;我是print语句执行出来的&quot;</div><div class="line">我是print语句执行出来的</div></pre></td></tr></table></figure>
<h2 id="获取用户输入-input函数"><a href="#获取用户输入-input函数" class="headerlink" title="获取用户输入-input函数"></a>获取用户输入-input函数</h2><p>下面的10和30都是用户自己手动输入的。input函数完成了用户与计算机的交互。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = input(&quot;x:&quot;)</div><div class="line">x:10</div><div class="line">&gt;&gt;&gt; y = input(&quot;y:&quot;)</div><div class="line">y:30</div><div class="line">&gt;&gt;&gt; print(x*y)</div><div class="line">300</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>例如上面讲的乘方（ ** ）。事实上可以使用一个函数来代替：pow。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; pow(3,4)</div><div class="line">81</div></pre></td></tr></table></figure>
<p>这就是3的4次方的结果。</p>
<p>函数就像是一个实现特定功能的小程序。通常把pow等标准函数称为內建函数。</p>
<p>很多內建函数也可以用于数值表达式：`abs函数未获取绝对值``</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 10 + pow(3,4)</div><div class="line">91</div><div class="line">&gt;&gt;&gt; 10 + abs(-100)</div><div class="line">110</div></pre></td></tr></table></figure>
<p>下面介绍与整数除法相关的两个有意思的函数：</p>
<p>round函数：将结果四舍五入为最接近的整数；<br>floor函数：将给定的数值向下取整为某个特定的整数；<br>ceil函数：将给定的数值向上取整为某个特定的整数；</p>
<blockquote>
<p>注意：floor函数和ceil函数是需要引入math模块才可以使用的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; round(10/3.0)</div><div class="line">3.0</div><div class="line">&gt;&gt;&gt; round(29.9/5)</div><div class="line">6.0</div><div class="line">&gt;&gt;&gt; round(-10/3.0)</div><div class="line">-3.0</div><div class="line">&gt;&gt;&gt; round(-29.9/5)</div><div class="line">-6.0</div><div class="line">&gt;&gt;&gt; import math</div><div class="line">&gt;&gt;&gt; math.floor(10/3.0)</div><div class="line">3.0</div><div class="line">&gt;&gt;&gt; math.floor(29.9/5)</div><div class="line">5.0</div><div class="line">&gt;&gt;&gt; math.floor(-10/3.0)</div><div class="line">-4.0</div><div class="line">&gt;&gt;&gt; math.floor(-29.9/5)</div><div class="line">-6.0</div><div class="line">&gt;&gt;&gt; math.ceil(10/3.0)</div><div class="line">4.0</div><div class="line">&gt;&gt;&gt; math.ceil(29.9/5)</div><div class="line">6.0</div><div class="line">&gt;&gt;&gt; math.ceil(-10/3.0)</div><div class="line">-3.0</div><div class="line">&gt;&gt;&gt; math.ceil(-29.9/5)</div><div class="line">-5.0</div></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块就是导入Python来增强其功能的扩展。需要用<code>import</code>来导入。如上面的math。</p>
<p>它的所用方式：“模块.函数”-&gt;<code>math.floor</code>。</p>
<p>如果你不想每次调用函数的时候都加上模块的话，可以使用<code>from 模块 import 函数</code>，这样的写法。但是这个一定要在你确定自己不会导入多个同名函数（从不同的模块导入）的情况下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from math import sqrt</div><div class="line">&gt;&gt;&gt; sqrt(9)</div><div class="line">3.0</div></pre></td></tr></table></figure>
<p>我们还有一种方式可以来引用函数，那就是使用变量来引用函数（或者Python之中大多数的对象）：<code>sq = math.sqrt</code>，然后可以直接通过<code>sq</code>来操作函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import math</div><div class="line">&gt;&gt;&gt; sq = math.sqrt</div><div class="line">&gt;&gt;&gt; sq(9)</div><div class="line">3.0</div></pre></td></tr></table></figure>
<h3 id="cmath和复数"><a href="#cmath和复数" class="headerlink" title="cmath和复数"></a>cmath和复数</h3><p>sqrt函数用来计算一个数的平方根，如果此时给他的是一个负数的话，他就没办法运行了。但是作为数学系的，我告诉你，按道理他是有值的，就是虚数。</p>
<p>所以下面我们介绍一个复数模块cmath。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import cmath</div><div class="line">&gt;&gt;&gt; cmath.sqrt(-1)</div><div class="line">1j</div></pre></td></tr></table></figure>
<p>这个<code>1j</code>就是结果，而<code>j</code>就代表这是虚数。下面我们举一个更加复杂的复数的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; (-1 + 3j)*(12 + 12j)</div><div class="line">(-48+24j)</div></pre></td></tr></table></figure>
<p>这就说明了，python是可以计算复数的。当然了，Python里面是没有虚数这个概念的，虚数就是实数部分为0的复数。</p>
<h2 id="保存并执行程序"><a href="#保存并执行程序" class="headerlink" title="保存并执行程序"></a>保存并执行程序</h2><p>我们创建一个python文件，里面写上”Hello Feyddy!”。然后保存为<code>.py</code>格式。当然，这个保存的路径你一定要知道。（最好是通过下载的python的IDLE上面的<code>File</code>-&gt;<code>New File</code>创建文件。）</p>
<p>此时不要关闭，如果关闭了，再重新打开。试着按<code>F5</code>可以直接运行文件。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fdwvvecctqj30gb041q3c.jpg" alt=""></p>
<p>接下来我们对上面的脚本进行扩展。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name = input(&quot;What is your name? &quot;)</div><div class="line">print(&quot;Hello&quot; + name + &quot;!&quot;)</div></pre></td></tr></table></figure>
<p>然后按<code>F5</code>执行后，出现<code>What is your name?</code>。之后你再输入<code>Feyddy</code>，会弹出<code>HelloFeyddy!</code>。</p>
<h3 id="通过命令提示符运行Python脚本"><a href="#通过命令提示符运行Python脚本" class="headerlink" title="通过命令提示符运行Python脚本"></a>通过命令提示符运行Python脚本</h3><p>打开电脑终端，进入有Python执行文件的目录下。以为我的<code>Feyddy.py</code>文件是放在桌面上的。所以：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMac-mini:~ t3$ cd ~/desktop</div></pre></td></tr></table></figure>
<p>然后通过：<code>python 文件名</code>来运行文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMac-mini:desktop t3$ python Feyddy.py</div><div class="line">What is your name?</div></pre></td></tr></table></figure>
<p>此时你如果输入Feyddy的话，会出现一个错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;Feyddy.py&quot;, line 1, in &lt;module&gt;</div><div class="line">    name = input(&quot;What is your name? &quot;)</div><div class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">NameError: name &apos;Feyddy&apos; is not defined</div></pre></td></tr></table></figure>
<p>这个时候就需要将<code>input</code>改成<code>raw_input</code>。（两者的区别后面讲）</p>
<p>改完之后，你再次运行操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMac-mini:desktop t3$ python Feyddy.py</div><div class="line">What is your name? Feyddy</div><div class="line">HelloFeyddy!</div></pre></td></tr></table></figure>
<h3 id="让脚本像普通程序一样运行-暂时没搞懂怎么操作，当然也没有搞懂的必要"><a href="#让脚本像普通程序一样运行-暂时没搞懂怎么操作，当然也没有搞懂的必要" class="headerlink" title="让脚本像普通程序一样运行(暂时没搞懂怎么操作，当然也没有搞懂的必要)"></a>让脚本像普通程序一样运行(暂时没搞懂怎么操作，当然也没有搞懂的必要)</h3><p>我们可能会发现一个问题，当程序运行完成后，就关闭了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">What is your name? Feyddy</div><div class="line">HelloFeyddy!</div><div class="line">Exit status: 0</div><div class="line">logout</div><div class="line">Saving session...</div><div class="line">...copying shared history...</div><div class="line">...saving history...truncating history files...</div><div class="line">...completed.</div><div class="line"></div><div class="line">[进程已完成]</div></pre></td></tr></table></figure>
<p>当我们输入<code>Feyddy</code>的之后，回车下面的就会自动执行完成。</p>
<p>此时如果我们在文件中的最后加上<code>raw_input(&quot;Press &lt;enter&gt;&quot;)</code>之后，就会发现，按了回车之后不会自动结束进程，而是弹出<code>Press &lt;enter&gt;</code>这个之后需要再一次回车才能结束进程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">What is your name? Feyddy</div><div class="line">HelloFeyddy!</div><div class="line">Press &lt;enter&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">What is your name? Feyddy</div><div class="line">HelloFeyddy!</div><div class="line">Press &lt;enter&gt;</div><div class="line">Exit status: 0</div><div class="line">logout</div><div class="line">Saving session...</div><div class="line">...copying shared history...</div><div class="line">...saving history...truncating history files...</div><div class="line">...completed.</div><div class="line"></div><div class="line">[进程已完成]</div></pre></td></tr></table></figure>
<h3 id="注释只能使用"><a href="#注释只能使用" class="headerlink" title="注释只能使用(#)"></a>注释只能使用(#)</h3><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="单引号字符串和转义引号"><a href="#单引号字符串和转义引号" class="headerlink" title="单引号字符串和转义引号"></a>单引号字符串和转义引号</h3><p>事实上单引号和双引号没有什么区别，但是在有些场景下，这两者还是很有必要分开的。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;let&apos;s go!&apos;</div><div class="line">SyntaxError: invalid syntax</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这个时候错误会指向<code>s</code>。因为程序会首先判断前面两个单引号是一组，但是<code>s</code>后面的就没办法识别了。此时就需要外面用双引号，里面的用单引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;let&apos;s go!&quot;</div><div class="line">&quot;let&apos;s go!&quot;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果里面出现的是双引号，那么外面就用单引号进行封闭。</p>
</blockquote>
<p>当然，也可以不用这么分开， 直接使用转义符号<code>\</code>转义就行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;Hello Feyddy! \&quot;,my blog site is www.feyddy.com&quot;</div><div class="line">&apos;Hello Feyddy! &quot;,my blog site is www.feyddy.com&apos;</div></pre></td></tr></table></figure>
<h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>当我们连续写了两个字符串的时候，Python会自动将两个字符串拼接起来。当然这个只限于连续写了两个字符串。可以说是书写字符串的一种特殊方法，并不是拼接字符串的一般方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;My name is Feyddy,&quot; &quot;my blog site is www.feyddy.com&quot;</div><div class="line">&apos;My name is Feyddy,my blog site is www.feyddy.com&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>拼接字符串，使用<code>+</code>就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;Hello ,guys!&quot; + &quot;Welcome to my blog!&quot;</div><div class="line">&apos;Hello ,guys!Welcome to my blog!&apos;</div><div class="line">&gt;&gt;&gt; x = &quot;My name is Feyddy ,&quot;</div><div class="line">&gt;&gt;&gt; y = &quot;my blog site is www.feyddy.com&quot;</div><div class="line">&gt;&gt;&gt; x+y</div><div class="line">&apos;My name is Feyddy ,my blog site is www.feyddy.com&apos;</div></pre></td></tr></table></figure>
<h3 id="字符串表示，str和repr"><a href="#字符串表示，str和repr" class="headerlink" title="字符串表示，str和repr"></a>字符串表示，str和repr</h3><p>通过之前的几个例子，我们可以发现这样一个规律：所有通过Python打印的字符都是带有引号的，或者是代码中原有的状态，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &quot;hello feyddy&quot;</div><div class="line">&apos;hello feyddy&apos;</div><div class="line">&gt;&gt;&gt; 1000000L</div><div class="line">1000000L</div></pre></td></tr></table></figure>
<p>也就是说，你代码中是什么格式的，打印出来的就是什么样子的。<br>但是如果使用print打印就不一样了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print 10000l</div><div class="line">10000</div><div class="line">&gt;&gt;&gt; print &quot;Hello Feyddy&quot;</div><div class="line">Hello Feyddy</div></pre></td></tr></table></figure>
<p>这个其实就是值被转换为字符串的两种机制。一种是通过str函数，它会把值转换成合理形式的字符串，以便用户可以理解；而repr会创建一个字符串，它以合法的Python表达形式来表示值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print repr(&quot;Hello Feyddy&quot;)</div><div class="line">&apos;Hello Feyddy&apos;</div><div class="line">&gt;&gt;&gt; print str(&quot;Hello Feyddy&quot;)</div><div class="line">Hello Feyddy</div><div class="line">&gt;&gt;&gt; print str(100000L)</div><div class="line">100000</div></pre></td></tr></table></figure>
<p>当然repr(x)的功能也可以用<code>x</code>实现( 注意：` 是反引号，而不是单引号 )。如果希望打印一个包含数字的句子，那么反引号就很有用。(在Python3.0中，已经不再使用反引号，因此，即使在旧的代码中看到了反引号，你也应该坚持使用repr。)如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; temp = 100</div><div class="line">&gt;&gt;&gt; print &quot;The temperature is &quot; + temp</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: cannot concatenate &apos;str&apos; and &apos;int&apos; objects</div><div class="line">&gt;&gt;&gt; print &quot;The temperature is &quot; + `temp`</div><div class="line">The temperature is 100</div></pre></td></tr></table></figure>
<p>上面第一个print语句并不能工作，那是因为不可以将字符串和数字进行相加。第二个可以是因为，我已经将temp用反引号将其转换成字符串。</p>
<blockquote>
<p>总结：简而言之，str、repr和反引号都是将Python值转换成字符串的3种方法。函数str让字符串更容易阅读，而repr(和反引号)则把结果字符串转换成合法的Python表达式。</p>
</blockquote>
<h3 id="input和raw-input的比较"><a href="#input和raw-input的比较" class="headerlink" title="input和raw_input的比较"></a>input和raw_input的比较</h3><p>还记得上面那个脚本中使用<code>print</code>然后输入<code>Feyddy</code>之后运行报错的例子吗？，然后换成用<code>raw_input</code>之后就不报错了。原因是，<code>input</code>函数会假设用户输入的是合法的Python表达式(或多或少有些与repr函数相反的意思)。如果以字符串作为输入的名字，程序是没问题的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMacBook-Air-2:Python Feyddy$ python Feyddy.py</div><div class="line">What is your name? &quot;Feyddy&quot;            </div><div class="line">HelloFeyddy!</div></pre></td></tr></table></figure>
<p>但是要求用户输入的时候带上引号，是不是有点过分。因此，这就需要使用<code>raw_input</code>函数，它会把所有的输入当作原始数据(raw data),然后将其放入字符串中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; input(&quot;Enter a number:&quot;)</div><div class="line">Enter a number:23</div><div class="line">23</div><div class="line">&gt;&gt;&gt; raw_input(&quot;Enter a number:&quot;)</div><div class="line">Enter a number:23</div><div class="line">&apos;23&apos;</div></pre></td></tr></table></figure>
<p>除非对<code>input</code>有特别的需要，否则应该尽可能使用<code>raw_input</code>函数。</p>
<h3 id="长字符串、原始字符串和Unicode"><a href="#长字符串、原始字符串和Unicode" class="headerlink" title="长字符串、原始字符串和Unicode"></a>长字符串、原始字符串和Unicode</h3><p>在需要长达多行的字符串或者包含多种特殊字符的字符串的时候，这些候选的字符串语法就会非常有用。</p>
<ol>
<li>长字符串</li>
</ol>
<p>如果需要写一个非常长的字符串，需要跨多行，可以使用三个引号(双引号和单引号都行)代替普通引号。注意，此时是三个引号，因此，在三个引号中间的字符串中可以随便使用双引号或者单引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print &apos;&apos;&apos;My name is Feyddy,</div><div class="line">... I am a iOS developer.</div><div class="line">... My blog site is www.feyddy.com.</div><div class="line">... Welcome to my blog.&apos;&apos;&apos;</div><div class="line">My name is Feyddy,</div><div class="line">I am a iOS developer.</div><div class="line">My blog site is www.feyddy.com.</div><div class="line">Welcome to my blog.</div></pre></td></tr></table></figure>
<p>当然，普通的字符串也是可以换行的，只需要一行的最后一个字符是反斜线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print &quot;Welcome to \</div><div class="line">... my blog&quot;</div><div class="line">Welcome to my blog</div></pre></td></tr></table></figure>
<p>当然，这也是和表达式和语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 1+ 2 \</div><div class="line">... + 3+4</div><div class="line">10</div><div class="line">&gt;&gt;&gt; print \</div><div class="line">... &quot;Welcome&quot; \</div><div class="line">... &quot;Guys&quot;</div><div class="line">WelcomeGuys</div></pre></td></tr></table></figure>
<p>但是输出的结果还是单行的。</p>
<ol>
<li>原始字符串</li>
</ol>
<p>原始的字符串对于反斜线的使用并不会过分挑剔。在某些情况下，这个特性就能派上用场了。在普通字符串里，反斜线有特殊的作用，会转义，可以再字符串中加入通常情况下不能直接加入的内容。如换行<code>\n</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print &quot;Hello \nGuys&quot;</div><div class="line">Hello</div><div class="line">Guys</div></pre></td></tr></table></figure>
<p>但是，有的时候我们的字符串里面就需要包含<code>\</code>这下怎么办，虽然可以使用两个<code>\</code>进行转义，但是如果想一个链接一样有很多个怎么办。这下我们的原始字符串就有用了。</p>
<p>原始字符串不会把反斜线当做是特殊的字符。我们只需要在字符串的前面加上<code>r</code>就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print r&quot;https://www.baidu.com/username=Feyddy/passWorld=Welcome&quot;</div><div class="line">https://www.baidu.com/username=Feyddy/passWorld=Welcome</div></pre></td></tr></table></figure>
<p>但是，一旦使用了原始字符串。如果里面使用<code>\</code>进行转义的话，是可以转义的，但是<code>\</code>也会被打印出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print r&quot;I\&apos;am a boy&quot;</div><div class="line">I\&apos;am a boy</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 千万不能让原始字符串的最后一个字符是<code>\</code>。如果最后一个字符是反斜线，Python就不清楚是否应该结束字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print r&quot;This is illegal\&quot;</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</div><div class="line">    print r&quot;This is illegal\&quot;</div><div class="line">                            ^</div><div class="line">SyntaxError: EOL while scanning string literal</div></pre></td></tr></table></figure>
<p>但是如果我们非要让<code>\</code>作为原始字符串的结尾的话，我们可以用字符串拼接的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print r&quot;This is right&quot; + &quot;\\&quot;</div><div class="line">This is right\</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 在原始字符串中你可以同时使用单双引号，即使三引号字符串也可以充当原始字符串。</p>
<ol>
<li>Unicode字符串</li>
</ol>
<p>字符串常量的最后一种类型就是Unicode字符串（或称是Unicode对象—-与字符串并不是同一个类型）。</p>
<p>Python中的普通字符串在内部是以8位的ASCII码形式存储的，而Unicode字符串则存储为16位Unicode字符，这样就能表示更多的字符集。这个不多说，下面举个小例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; u&quot;Hello Feyddy&quot;</div><div class="line">u&apos;Hello Feyddy&apos;</div></pre></td></tr></table></figure>
<h1 id="函数总结"><a href="#函数总结" class="headerlink" title="函数总结"></a>函数总结</h1><p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdx6ag5ejej30hb0czjuq.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python新手入门 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Realm数据库初识]]></title>
      <url>http://yoursite.com/2017/03/22/Realm%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="Realm数据库"><a href="#Realm数据库" class="headerlink" title="Realm数据库"></a>Realm数据库</h1><p>Realm是一款针对移动设备设计的数据库，已经涵盖所有主流开发平台，并且全部代码开源，地址如下：<br><a href="https://github.com/realm/realm-cocoa" target="_blank" rel="external">地址</a></p>
<h1 id="Realm特性"><a href="#Realm特性" class="headerlink" title="Realm特性"></a>Realm特性</h1><ul>
<li>移动设备支持：Realm是第一个针对手机平板和可穿戴设备设计的数据库，基本全平台支持。</li>
<li>简单：Realm的安装和接入简易，不同于Core Data,不需要开发者配置模型层结构，从开始接触到上手使用，只需要短短几分钟时间。</li>
<li>现代：关系型数据库，支持泛型。</li>
<li>快速：官方称比SQLite的常规操作要快速。</li>
</ul>
<h1 id="Realm学习资源"><a href="#Realm学习资源" class="headerlink" title="Realm学习资源"></a>Realm学习资源</h1><p>官方文档:<a href="https://realm.io/cn/docs/objc/latest/" target="_blank" rel="external">中文文档</a></p>
<p>Realm Browser:一款MAC平台的工具</p>
<p>Xcode插件（详情看官方文档里面有介绍）</p>
<a id="more"></a>
<h1 id="Realm入门小案例"><a href="#Realm入门小案例" class="headerlink" title="Realm入门小案例"></a>Realm入门小案例</h1><p>需求说明：</p>
<ul>
<li>创建一个数据模型，记录宠物狗的名字和年龄；</li>
<li>创建一个数据模型，记录主人的名字和主任持有的宠物狗对象；</li>
<li>查询年龄大于2岁的宠物狗；</li>
</ul>
<p>首先创建一个宠物狗模型：需要继承<code>RLMObject</code></p>
<p>Dog.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#import &lt;Realm/Realm.h&gt;</div><div class="line"></div><div class="line">@interface Dog : RLMObject</div><div class="line"></div><div class="line">//Realm官网不是建议我们对属性进行相关的限制说明,如;@property (nonatomic, copy)</div><div class="line"></div><div class="line">@property NSString * name;</div><div class="line"></div><div class="line">@property NSInteger age;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Dog.m没有特殊情况不需要操作</p>
<p>其次创建一个主人的模型：需要继承<code>RLMObject</code></p>
<p>Master.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;Realm/Realm.h&gt;</div><div class="line">#import &quot;Dog.h&quot;</div><div class="line"></div><div class="line">//注意：这里的必须写上你需要类型Dog</div><div class="line">RLM_ARRAY_TYPE(Dog);</div><div class="line"></div><div class="line">@interface Master : RLMObject</div><div class="line">@property NSString *name;</div><div class="line">@property RLMArray&lt;Dog*&gt;&lt;Dog&gt; *dogs;//数组里面的对象也要详细写明类型&lt;Dog*&gt;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Master.m没有特殊情况不需要操作</p>
<p>主控制器中实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;Realm.h&gt;</div><div class="line">#import &quot;Dog.h&quot;</div><div class="line">#import &quot;Master.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //创建一个数据库，记录宠物的姓名和年龄</div><div class="line">    Dog * dog = [[Dog alloc] init];</div><div class="line">    dog.name = @&quot;haohao&quot;;</div><div class="line">    dog.age = 24;</div><div class="line"></div><div class="line"></div><div class="line">    //添加一个主人的记录</div><div class="line">    Master * master = [[Master alloc] init];</div><div class="line">    master.name = @&quot;Feyddy&quot;;</div><div class="line">    [master.dogs addObject:dog];</div><div class="line">    NSLog(@&quot;The info of master = %@&quot;,master);</div><div class="line">    NSLog(@&quot;%@ has a dog called %@&quot;,master.name,dog.name);</div><div class="line"></div><div class="line"></div><div class="line">    //查询年龄小于4的宠物名字</div><div class="line">    RLMResults * results = [Dog objectsWhere:@&quot;age &gt;4&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;,results);//此时查不到数据，因为还没有将数据添加到数据库中</div><div class="line"></div><div class="line">    //将宠物添加到数据库</div><div class="line">    RLMRealm * r = [RLMRealm defaultRealm];</div><div class="line"></div><div class="line">    ///方法一：在block里面进行数据库的读写操作</div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line">        [r addObject:dog];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    //Reaml的查询是动态的，只要你的数据库里面的数据发生改变，就会被通知到修改,所以此时不需要再进行查询的操作了。里面的数据会直接变化。</div><div class="line">    NSLog(@&quot;%@&quot;,results);</div><div class="line"></div><div class="line">//    ///方法二：在两个方法之间：beginWriteTransaction和commitWriteTransaction</div><div class="line">//    [r beginWriteTransaction];</div><div class="line">//    </div><div class="line">//    [r commitWriteTransaction];</div><div class="line"></div><div class="line">    //线程辅助</div><div class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">        RLMRealm * r = [RLMRealm defaultRealm];</div><div class="line">        [r beginWriteTransaction];</div><div class="line"></div><div class="line">        [r commitWriteTransaction];</div><div class="line">    &#125;);  </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h1 id="Realm数据模型"><a href="#Realm数据模型" class="headerlink" title="Realm数据模型"></a>Realm数据模型</h1><p>Realm如何实现数据库的基本功能</p>
<p>数据模型类：<code>RLMObject</code>。它和<code>NSManagedObject</code>的共同点，都是不能重写属性的setter和getter方法的。</p>
<p><code>RLMObject</code> - 支持忽略属性；</p>
<p><code>NSManagedObject</code> - 如果需要直接通过属性来调用数据的话，需要@dynamic关键词修饰属性；</p>
<h2 id="论坛帖子属性案例"><a href="#论坛帖子属性案例" class="headerlink" title="论坛帖子属性案例"></a>论坛帖子属性案例</h2><p>论坛帖子属性：标题，作者，时间，内容，浏览量，回帖，置顶。</p>
<p>首先创建一个帖子类:Post</p>
<p>Post.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#import &lt;Realm/Realm.h&gt;</div><div class="line"></div><div class="line">@class User;//避免循环引用</div><div class="line"></div><div class="line">RLM_ARRAY_TYPE(Post);</div><div class="line"></div><div class="line">@interface Post : RLMObject</div><div class="line"></div><div class="line">//id主键设置,主键一旦设置是不可以更改的</div><div class="line">@property NSString *indentifier;</div><div class="line"></div><div class="line">//title 标题</div><div class="line">@property NSString *title;</div><div class="line"></div><div class="line">//author 作为rlm对象 一对一，一对多</div><div class="line">//@property (readonly) RLMLinkingObjects *author;//此时返回的是一个集合</div><div class="line">@property User *author;</div><div class="line"></div><div class="line">//time 时间戳</div><div class="line">@property NSDate *timestamp;</div><div class="line"></div><div class="line">//content 内容</div><div class="line">@property NSData *content;</div><div class="line"></div><div class="line"></div><div class="line">/// 注意常量在realm中是不能为空的所以改成NSNumber &lt;RLMInt&gt;*，而不用NSInteger</div><div class="line"></div><div class="line">//look 浏览量</div><div class="line">@property NSNumber &lt;RLMInt&gt;* look;</div><div class="line"></div><div class="line">//置顶</div><div class="line">@property NSNumber &lt;RLMBool&gt;* isTop;</div><div class="line"></div><div class="line">//comments 回帖</div><div class="line">@property RLMArray&lt;Post *&gt;&lt;Post&gt; * comments;</div><div class="line"></div><div class="line">//不支持CGFloat，请使用float或者double</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Post.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">#import &quot;Post.h&quot;</div><div class="line">#import &quot;User.h&quot;</div><div class="line"></div><div class="line">@implementation Post</div><div class="line"></div><div class="line">//对属性的存在进行一些相关的设置</div><div class="line"></div><div class="line">///1.可空属性的设置，决定属性是否可以为nil</div><div class="line"></div><div class="line">+ (NSArray&lt;NSString *&gt; *)requiredProperties</div><div class="line">&#123;</div><div class="line">    //在里面设置的就是必须不能为空的属性</div><div class="line">    return @[@&quot;title&quot;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">///2.忽略属性</div><div class="line">+ (NSArray&lt;NSString *&gt; *)ignoredProperties</div><div class="line">&#123;</div><div class="line">    //在里面设置的就是不写入数据库的属性，它将作为对象的属性进行操作。</div><div class="line">    return @[];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/////3.属性的反向关系，例如帖子的作者和作者的帖子</div><div class="line">//+ (NSDictionary&lt;NSString *,RLMPropertyDescriptor *&gt; *)linkingObjectsProperties</div><div class="line">//&#123;</div><div class="line">//    </div><div class="line">//    return @&#123;</div><div class="line">//             @&quot;author&quot;:[RLMPropertyDescriptor descriptorWithClass:User.class propertyName:@&quot;posts&quot;]</div><div class="line">//             &#125;;//此时必须将author属性类型改成RLMLinkingObjects,而且必须改成readonly，否则会有异常</div><div class="line">//    </div><div class="line">//&#125;</div><div class="line"></div><div class="line">///4.默认值</div><div class="line"></div><div class="line">+ (NSDictionary *)defaultPropertyValues</div><div class="line">&#123;</div><div class="line">    return @&#123;</div><div class="line">             @&quot;look&quot;: @12</div><div class="line">             &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">///5.索引属性  支持NSString，NSNumber(包括常量)，NSDate</div><div class="line">+ (NSArray&lt;NSString *&gt; *)indexedProperties</div><div class="line">&#123;</div><div class="line">    return @[@&quot;title&quot;,@&quot;timestamp&quot;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">///6.主键的设置</div><div class="line"></div><div class="line">+ (NSString *)primaryKey</div><div class="line">&#123;</div><div class="line">    return @&quot;indentifier&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><em>然后创建一个User作者类</em></p>
<p>User.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Realm/Realm.h&gt;</div><div class="line">#import &quot;Post.h&quot;</div><div class="line"></div><div class="line">@interface User : RLMObject</div><div class="line"></div><div class="line">@property NSString *nickName;</div><div class="line"></div><div class="line">////一对多需要使用RLMArray</div><div class="line">//@property RLMArray&lt;Post *&gt;&lt;Post&gt; *posts;</div><div class="line"></div><div class="line">//反向关系</div><div class="line">@property (readonly) RLMLinkingObjects *posts;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>User.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#import &quot;User.h&quot;</div><div class="line"></div><div class="line">@implementation User</div><div class="line">///3.属性的反向关系，例如帖子的作者和作者的帖子</div><div class="line">+ (NSDictionary&lt;NSString *,RLMPropertyDescriptor *&gt; *)linkingObjectsProperties</div><div class="line">&#123;</div><div class="line">    return @&#123;</div><div class="line">             @&quot;posts&quot;:[RLMPropertyDescriptor descriptorWithClass:Post.class propertyName:@&quot;author&quot;]</div><div class="line">             &#125;;//此时必须将posts属性类型改成RLMLinkingObjects,而且必须改成readonly，否则会有异常</div><div class="line"></div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>注意：反向关系设置一个就可以了。</strong></p>
<p>主控制器实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;Realm.h&gt;</div><div class="line">#import &quot;Post.h&quot;</div><div class="line">#import &quot;User.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //因为设置了标题为非空属性，所以我们可以用下面的方法设置一下</div><div class="line"></div><div class="line">    Post *post = [[Post alloc] initWithValue:@&#123;@&quot;title&quot;:@&quot;untitled&quot;&#125;];</div><div class="line"></div><div class="line"></div><div class="line">    User *user = [[User alloc] init];</div><div class="line">    user.nickName = @&quot;Feyddy&quot;;</div><div class="line"></div><div class="line">    post.author = user;//因为User设置了反向关系，所以user的post属性也会指向post的author属性</div><div class="line"></div><div class="line">    //数据库的读写</div><div class="line">    RLMRealm *r = [RLMRealm defaultRealm];</div><div class="line"></div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line"></div><div class="line">        [r addObject:post];</div><div class="line">        [r addObject:user];</div><div class="line"></div><div class="line">        NSLog(@&quot;%@&quot;,user.posts);</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">2017-03-22 15:49:34.384 Realm[12929:245389] RLMResults &lt;0x7f975b60fb00&gt; (</div><div class="line">	[0] Post &#123;</div><div class="line">		indentifier = (null);</div><div class="line">		title = untitled;</div><div class="line">		author = User &#123;</div><div class="line">			nickName = Feyddy;</div><div class="line">		&#125;;</div><div class="line">		timestamp = (null);</div><div class="line">		content = &lt;(null) — 0 total bytes&gt;;</div><div class="line">		look = 12;</div><div class="line">		isTop = (null);</div><div class="line">		comments = RLMArray &lt;0x6000002e2600&gt; (</div><div class="line"></div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>可以看出，user与post反向关联了，因为里面出现了<code>look = 12;</code>。这个我只是在post里面设置了，但是打印user的时候，他出来了。</p>
<h1 id="Realm数据库的增删改查"><a href="#Realm数据库的增删改查" class="headerlink" title="Realm数据库的增删改查"></a>Realm数据库的增删改查</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;Realm.h&gt;</div><div class="line">#import &quot;Post.h&quot;</div><div class="line">#import &quot;User.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];    </div><div class="line"></div><div class="line">    Post *post = [[Post alloc] initWithValue:@&#123;@&quot;title&quot;:@&quot;untitled&quot;&#125;];</div><div class="line">    post.indentifier = [[NSDate date] description];//防止每次创建的时候用的都是同一个主键名，但是主键是不能一样的。</div><div class="line">    RLMRealm *r = [RLMRealm defaultRealm];</div><div class="line"></div><div class="line">    //写入数据库</div><div class="line">    //以后的增删查改必须在transactionWithBlock里面进行</div><div class="line"></div><div class="line">    //增</div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line">        [r addObject:post];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    //删</div><div class="line">//    [r transactionWithBlock:^&#123;</div><div class="line">//        [r deleteObject:post];</div><div class="line">//        [r deleteAllObjects];//清空数据库，但是realm数据库文件并不会减小，为了给以后添加数据预留空间</div><div class="line">//    &#125;];</div><div class="line"></div><div class="line"></div><div class="line">    //改</div><div class="line">    ///1.直接更改</div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line">        post.timestamp = [NSDate date];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    ///2.通过主键更改</div><div class="line">    Post *postNew = [[Post alloc] init];</div><div class="line">    postNew.title = @&quot;newTitle&quot;;</div><div class="line">    postNew.indentifier = @&quot;1000&quot;;//修改主键为2017-03-22 08:54:30 +0000的</div><div class="line">    postNew.timestamp = [NSDate date];</div><div class="line"></div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line">        [r addOrUpdateObject:postNew];//这个方法就是，如果上面你写的主键名如果数据库中存在的话，那么就修改它；如果不存在就直接将这条数据添加进数据库</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line">    ///3.批量修改</div><div class="line">    RLMResults *allPostResults = [Post allObjects];</div><div class="line"></div><div class="line">    for (int  i =0;  i &lt; 20; i++) &#123;</div><div class="line">        Post *loopPost = [[Post alloc] initWithValue:@&#123;@&quot;title&quot;:@&quot;aaa&quot;&#125;];</div><div class="line">        loopPost.indentifier = [NSString stringWithFormat:@&quot;%d&quot;,i+100000];</div><div class="line"></div><div class="line">        [r transactionWithBlock:^&#123;</div><div class="line">            [post.comments addObject:loopPost];</div><div class="line">        &#125;];</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line">        [allPostResults setValue:@10000 forKey:@&quot;look&quot;];</div><div class="line">        [allPostResults setValue:[NSDate date] forKey:@&quot;timestamp&quot;];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //查</div><div class="line">    RLMResults *results = [Post objectsWhere:@&quot;indentifier == %@&quot;,@&quot;1000&quot;];</div><div class="line">    Post *postResult = [results firstObject];</div><div class="line"></div><div class="line">    NSLog(@&quot;before cahnge postResult.title = %@ &quot;,postResult.title);</div><div class="line"></div><div class="line">    [r transactionWithBlock:^&#123;</div><div class="line">        post.title = @&quot;Test for change&quot;;//这个时候查询的结果也会随之修改</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    NSLog(@&quot;after search postResult.title = %@&quot;,postResult.title);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //综合查询</div><div class="line"></div><div class="line">    ///1.检索所有浏览量大于100的帖子</div><div class="line"></div><div class="line">    RLMResults *postThatViewBiggerThan100 = [Post objectsWhere:@&quot;look &gt; 100&quot;];</div><div class="line"></div><div class="line"></div><div class="line">    ///2.检索浏览量介于10到100的帖子</div><div class="line"></div><div class="line">    RLMResults *postThatViewBetween10And100 = [Post objectsWhere:@&quot;look &gt; 10 AND look &lt; 100&quot;];</div><div class="line"></div><div class="line">    RLMResults *postThatViewBetween10And100_2 = [Post objectsWhere:@&quot;look BETWEEN &#123;10,100&#125;&quot;];</div><div class="line"></div><div class="line">    ///3.检索标题中含有“Test”的帖子,[C]表示不区分大小写</div><div class="line"></div><div class="line">    RLMResults *postThatTitleContainsTest = [Post objectsWhere:@&quot;title CONTAINS[C] &apos;Test&apos;&quot;];</div><div class="line"></div><div class="line"></div><div class="line">    ///4.检索评论量大于10且浏览量大于100的帖子</div><div class="line">    RLMResults *commentsResult = [Post objectsWhere:@&quot;comments.@count &gt;10&quot;];</div><div class="line"></div><div class="line">    RLMResults *finalResult = [commentsResult objectsWhere:@&quot;look &gt; 100&quot;];</div><div class="line"></div><div class="line"></div><div class="line">    //查询结果的排序</div><div class="line">    //按时间排序</div><div class="line">    [finalResult sortedResultsUsingKeyPath:@&quot;timestamp&quot; ascending:NO];</div><div class="line"></div><div class="line">    NSLog(@&quot;fina = %@&quot;,finalResult);</div><div class="line"></div><div class="line">    //分页</div><div class="line">    //Realm没有分页功能</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><em>注意：Realm没有分页功能</em></p>
<h1 id="Realm的配置"><a href="#Realm的配置" class="headerlink" title="Realm的配置"></a>Realm的配置</h1><p>Realm其实就是默认的一个数据库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;Realm.h&gt;</div><div class="line">#import &quot;Post.h&quot;</div><div class="line">#import &quot;User.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">@property (nonatomic,strong) RLMRealm *realm;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //RLMRealm：创建的其实是一个默认的数据库</div><div class="line">    RLMRealm *r = [RLMRealm defaultRealm];</div><div class="line"></div><div class="line">    [Post allObjects];</div><div class="line">    ///等价于</div><div class="line">    [Post allObjectsInRealm:r];</div><div class="line"></div><div class="line"></div><div class="line">    //多个数据库并存</div><div class="line">    ///配置对象</div><div class="line">    ///创建数据库主要设置RLMRealmConfiguration，设置数据库名字和存储地方。把路径以及数据库名字拼接好字符串，赋值给fileURL即可。</div><div class="line">    NSArray *docPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</div><div class="line">    NSString *path = [docPath objectAtIndex:0];</div><div class="line">    NSString *filePath = [path stringByAppendingPathComponent:@&quot;&quot;];</div><div class="line">    NSLog(@&quot;数据库目录 = %@&quot;,filePath);</div><div class="line"></div><div class="line">    RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];</div><div class="line">    config.fileURL = [NSURL URLWithString:filePath];</div><div class="line"></div><div class="line">    /**</div><div class="line">     objectClasses这个属性是用来控制对哪个类能够存储在指定 Realm 数据库中做出限制。例如，如果有两个团队分别负责开发您应用中的不同部分，并且同时在应用内部使用了 Realm 数据库，那么您肯定不希望为它们协调进行数据迁移您可以通过设置RLMRealmConfiguration的 objectClasses属性来对类做出限制。objectClasses一般可以不用设置。</div><div class="line">     */</div><div class="line">    //config.objectClasses = @[MyClass.class, MyOtherClass.class];</div><div class="line">    config.readOnly = NO;</div><div class="line">    int currentVersion = 1.0;</div><div class="line">    config.schemaVersion = currentVersion;</div><div class="line">    config.migrationBlock = ^(RLMMigration *migration , uint64_t oldSchemaVersion) &#123;</div><div class="line">        // 这里是设置数据迁移的block</div><div class="line">        if (oldSchemaVersion &lt; currentVersion) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    ///设置默认的数据库是自己刚刚创建的数据库</div><div class="line">    [RLMRealmConfiguration setDefaultConfiguration:config];</div><div class="line">    self.realm = [RLMRealm realmWithConfiguration:config error:nil];</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //内存数据库</div><div class="line">    /**</div><div class="line">     通常情况下，Realm 数据库是存储在硬盘中的，但是您能够通过设置inMemoryIdentifier而不是设置RLMRealmConfiguration中的 fileURL属性，以创建一个完全在内存中运行的数据库。内存数据库在每次程序运行期间都不会保存数据。但是，这不会妨碍到 Realm 的其他功能，包括查询、关系以及线程安全。如果需要一种灵活的数据读写但又不想储存数据的方式的话，那么可以选择用内存数据库</div><div class="line"></div><div class="line">     使用内存数据库需要注意的是：</div><div class="line"></div><div class="line">     内存数据库会在临时文件夹中创建多个文件，用来协调处理诸如跨进程通知之类的事务。 实际上没有任何的数据会被写入到这些文件当中，除非操作系统由于内存过满需要清除磁盘上的多余空间。</div><div class="line"></div><div class="line">     如果某个内存 Realm 数据库实例没有被引用，那么所有的数据就会被释放。所以必须要在应用的生命周期内保持对Realm内存数据库的强引用，以避免数据丢失。</div><div class="line">     */</div><div class="line">    RLMRealmConfiguration *config2 = [RLMRealmConfiguration defaultConfiguration];</div><div class="line">    config2.inMemoryIdentifier = @&quot;MyInMemoryRealm&quot;;</div><div class="line">    self.realm = [RLMRealm realmWithConfiguration:config2 error:nil];//必须是强引用，否则释放点数据就没了。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //数据库写入通知</div><div class="line">    /// 获取 Realm 通知</div><div class="line">    RLMNotificationToken *token = [self.realm addNotificationBlock:^(NSString *notification, RLMRealm * realm) &#123;</div><div class="line">        //[myViewController updateUI];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line">    ///Realm 实例将会在每次写入事务提交后，给其他线程上的 Realm 实例发送通知。一般控制器如果想一直持有这个通知，就需要申请一个属性，strong持有这个通知。</div><div class="line"></div><div class="line"></div><div class="line">    /// 观察 RLMResults 通知</div><div class="line">    //__weak typeof(self) weakSelf = self;</div><div class="line">    RLMNotificationToken * notificationToken = [[Post objectsWhere:@&quot;age &gt; 5&quot;] addNotificationBlock:^(RLMResults&lt;Post *&gt; *results, RLMCollectionChange *change, NSError *error) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            NSLog(@&quot;Failed to open Realm on background worker: %@&quot;, error);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //UITableView *tableView = weakSelf.tableView;</div><div class="line">        // 对于变化信息来说，检索的初次运行将会传递 nil</div><div class="line">        if (!change) &#123;</div><div class="line">            //[tableView reloadData];</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 检索结果被改变，因此将它们应用到 UITableView 当中</div><div class="line">        /*</div><div class="line">        [tableView beginUpdates];</div><div class="line">        [tableView deleteRowsAtIndexPaths:[changes deletionsInSection:0]</div><div class="line">                         withRowAnimation:UITableViewRowAnimationAutomatic];</div><div class="line">        [tableView insertRowsAtIndexPaths:[changes insertionsInSection:0]</div><div class="line">                         withRowAnimation:UITableViewRowAnimationAutomatic];</div><div class="line">        [tableView reloadRowsAtIndexPaths:[changes modificationsInSection:0]</div><div class="line">                         withRowAnimation:UITableViewRowAnimationAutomatic];</div><div class="line">        [tableView endUpdates];</div><div class="line">         */</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    /*</div><div class="line">     我们还能进行更加细粒度的通知，用集合通知就可以做到。</div><div class="line"></div><div class="line">     集合通知是异步触发的，首先它会在初始结果出现的时候触发，随后当某个写入事务改变了集合中的所有或者某个对象的时候，通知都会再次触发。这些变化可以通过传递到通知闭包当的 RLMCollectionChange参数访问到。这个对象当中包含了受 deletions、insertions和 modifications 状态所影响的索引信息。</div><div class="line"></div><div class="line">     集合通知对于 RLMResults、RLMArray、RLMLinkingObjects 以及 RLMResults 这些衍生出来的集合来说，当关系中的对象被添加或者删除的时候，一样也会触发这个状态变化。</div><div class="line">     */</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //数据库加密</div><div class="line">    /**</div><div class="line">     Realm 支持在创建 Realm 数据库时采用64位的密钥对数据库文件进行 AES-256+SHA2 加密。这样硬盘上的数据都能都采用AES-256来进行加密和解密，并用 SHA-2 HMAC 来进行验证。每次您要获取一个 Realm 实例时，您都需要提供一次相同的密钥。</div><div class="line">     */</div><div class="line"></div><div class="line">    /// 产生随机密钥</div><div class="line">    NSMutableData *key = [NSMutableData dataWithLength:64];</div><div class="line">    SecRandomCopyBytes(kSecRandomDefault, key.length, (uint8_t *)key.mutableBytes);</div><div class="line"></div><div class="line">    /// 打开加密文件</div><div class="line">    RLMRealmConfiguration *configs = [RLMRealmConfiguration defaultConfiguration];</div><div class="line">    configs.encryptionKey = key;</div><div class="line">    NSError *error = nil;</div><div class="line">    RLMRealm *realm = [RLMRealm realmWithConfiguration:config error:&amp;error];</div><div class="line">    if (!realm) &#123;</div><div class="line">        // 如果密钥错误，`error` 会提示数据库不可访问</div><div class="line">        NSLog(@&quot;Error opening realm: %@&quot;, error);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    //数据模型迁移</div><div class="line">    /**</div><div class="line">     数据库存储方面的增删改查应该都没有什么大问题，比较蛋疼的应该就是数据迁移了。在版本迭代过程中，很可能会发生表的新增，删除，或者表结构的变化，如果新版本中不做数据迁移，用户升级到新版，很可能就直接crash了。对比Core Data的数据迁移比较复杂，Realm的迁移实在太简单了.</div><div class="line"></div><div class="line">     新增删除表，Realm不需要做迁移</div><div class="line">     增删除字段，Realm不需要做迁移。Realm 会自行检测新增和需要移除的属性，然后自动更新硬盘上的数据库架构。</div><div class="line">     */</div><div class="line"></div><div class="line">    RLMRealmConfiguration *config4 = [RLMRealmConfiguration defaultConfiguration];</div><div class="line">    config4.schemaVersion = 2;</div><div class="line">    config4.migrationBlock = ^(RLMMigration *migration, uint64_t oldSchemaVersion)</div><div class="line">    &#123;</div><div class="line">        // enumerateObjects:block: 遍历了存储在 Realm 文件中的每一个“Person”对象</div><div class="line">        [migration enumerateObjects:Post.className block:^(RLMObject *oldObject, RLMObject *newObject) &#123;</div><div class="line">            // 只有当 Realm 数据库的架构版本为 0 的时候，才添加 “fullName” 属性</div><div class="line">            if (oldSchemaVersion &lt; 1) &#123;</div><div class="line">                newObject[@&quot;fullName&quot;] = [NSString stringWithFormat:@&quot;%@ %@&quot;, oldObject[@&quot;firstName&quot;], oldObject[@&quot;lastName&quot;]];</div><div class="line">            &#125;</div><div class="line">            // 只有当 Realm 数据库的架构版本为 0 或者 1 的时候，才添加“email”属性</div><div class="line">            if (oldSchemaVersion &lt; 2) &#123;</div><div class="line">                newObject[@&quot;email&quot;] = @&quot;&quot;;</div><div class="line">            &#125;</div><div class="line">            // 替换属性名</div><div class="line">            if (oldSchemaVersion &lt; 3) &#123; // 重命名操作应该在调用 `enumerateObjects:` 之外完成</div><div class="line">                [migration renamePropertyForClass:Post.className oldName:@&quot;yearsSinceBirth&quot; newName:@&quot;age&quot;]; &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;;</div><div class="line">    [RLMRealmConfiguration setDefaultConfiguration:config];</div><div class="line">    // 现在我们已经成功更新了架构版本并且提供了迁移闭包，打开旧有的 Realm 数据库会自动执行此数据迁移，然后成功进行访问</div><div class="line">    [RLMRealm defaultRealm];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Realm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Runtime常用方法总结]]></title>
      <url>http://yoursite.com/2017/03/21/Runtime%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="Runtime学习总结"><a href="#Runtime学习总结" class="headerlink" title="Runtime学习总结"></a>Runtime学习总结</h1><h1 id="Runtime-简介"><a href="#Runtime-简介" class="headerlink" title="Runtime 简介"></a>Runtime 简介</h1><ul>
<li><p>RunTime简称运行时。OC就是<strong>运行时机制</strong>，也就是在运行时候的一些机制，其中最主要的是消息机制。</p>
</li>
<li><p>对于C语言，<strong>函数的调用在编译的时候会决定调用哪个函数</strong>。</p>
</li>
<li><p>对于OC的函数，属于<strong>动态调用过程</strong>，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。</p>
</li>
<li><p>事实证明:</p>
<ul>
<li>在编译阶段，OC可以<strong>调用任何函数</strong>，即使这个函数并未实现，只要声明过就不会报错。</li>
<li>在编译阶段，C语言调用<strong>未实现的函数</strong>就会报错。</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h1 id="Runtime作用"><a href="#Runtime作用" class="headerlink" title="Runtime作用"></a>Runtime作用</h1><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><ul>
<li>方法调用的本质，就是让对象发送消息。</li>
<li>objc_msgSend,只有对象才能发送消息，因此以objc开头。</li>
<li>使用消息机制前提，必须导入<code>#import &lt;objc/message.h&gt;</code>，并且需要在：Build Setting -&gt; 搜索msg -&gt; 设置属性为No</li>
<li><p>消息机制简单使用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// 创建person对象</div><div class="line">Person *p = [[Person alloc] init];</div><div class="line"></div><div class="line">// 调用对象方法</div><div class="line">[p eat];</div><div class="line"></div><div class="line">//SEL：方法编号，根据方法编号就可以找到对应方法实现</div><div class="line">[p performSelector:@selector(eat)];</div><div class="line"></div><div class="line">// 本质：让对象发送消息</div><div class="line">objc_msgSend(p, @selector(eat));</div><div class="line">objc_msgSend(p, @selector(run:),10);//逗号后面传的都是参数可以用逗号隔开多个参数，例如10就是其中一个参数</div><div class="line"></div><div class="line">// 调用类方法的方式：两种</div><div class="line">// 第一种通过类名调用</div><div class="line">[Person eat];</div><div class="line">// 第二种通过类对象调用</div><div class="line">[[Person class] eat];</div><div class="line"></div><div class="line">// 用类名调用类方法，底层会自动把类名转换成类对象调用</div><div class="line">// 获取类对象</div><div class="line">// Class personClass = [Person class];</div><div class="line">// [personClass performSelector:@selector(eat)];</div><div class="line"></div><div class="line">// 本质：让类对象发送消息</div><div class="line">objc_msgSend([Person class], @selector(eat));</div></pre></td></tr></table></figure>
</li>
<li><p>消息机制原理:对象根据方法编号SEL去映射表查找对应的方法实现</p>
<p>  <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdtn6yvwkaj30dv078ad2.jpg" alt=""></p>
</li>
</ul>
<blockquote>
<p>先转换成对象，然后调用performSelector，然后根据方法编号进行寻找</p>
</blockquote>
<h2 id="交换方法"><a href="#交换方法" class="headerlink" title="交换方法"></a>交换方法</h2><ul>
<li><p>开发使用场景:系统自带的方法功能不够，给系统自带的方法扩展一些功能，并且保持原有的功能。</p>
</li>
<li><p>方式一:继承系统的类，重写方法。</p>
</li>
<li><p>方式二:使用runtime,交换方法。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    // 需求：给imageNamed方法提供功能，每次加载图片就判断下图片是否加载成功。</div><div class="line">    // 步骤一：先搞个分类，定义一个能加载图片并且能打印的方法+ (instancetype)imageWithName:(NSString*)name;</div><div class="line">    // 步骤二：交换imageNamed和imageWithName的实现，就能调用imageWithName，间接调用imageWithName的实现。</div><div class="line">    UIImage*image = [UIImage imageNamed:@&quot;123&quot;];</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">@implementation UIImage (Image)</div><div class="line">// 加载分类到内存的时候调用</div><div class="line">+ (void)load</div><div class="line">&#123;</div><div class="line">    // 交换方法</div><div class="line"></div><div class="line">    // 获取imageWithName方法地址</div><div class="line">    Method imageWithName = class_getClassMethod(self, @selector(imageWithName:));</div><div class="line"></div><div class="line">    // 获取imageWithName方法地址</div><div class="line">    Method imageName = class_getClassMethod(self, @selector(imageNamed:));</div><div class="line"></div><div class="line">    // 交换方法地址，相当于交换实现方式</div><div class="line">    method_exchangeImplementations(imageWithName, imageName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不能在分类中重写系统方法imageNamed，因为会把系统的功能给覆盖掉，而且分类中不能调用super.</div><div class="line"></div><div class="line">// 既能加载图片又能打印</div><div class="line">+ (instancetype)imageWithName:(NSString*)name</div><div class="line">&#123;</div><div class="line">    // 这里调用imageWithName，相当于调用imageName</div><div class="line">    UIImage* image = [self imageWithName:name];</div><div class="line"></div><div class="line">    if (image == nil) &#123;</div><div class="line">        NSLog(@&quot;加载空的图片&quot;);</div><div class="line">    &#125;</div><div class="line">    return image;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
<li><p>交换原理：</p>
<ul>
<li><p>交换之前：<br><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdtnb2jcmrj30dw0750vy.jpg" alt=""></p>
</li>
<li><p>交换之后：<br><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdtnbq34joj30dp06zn0d.jpg" alt=""></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>具体实现：</p>
<p>  首先明白需求：</p>
<ol>
<li>系统的imageNamed加载图片,并不知道图片是否加载成功</li>
<li><p>以后调用imageNamed的时候,就知道图片是否加载</p>
<p>创建一个UIImage的分类UIImage+FeyddyImage。</p>
<p><strong>UIImage+FeyddyImage.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface UIImage (FeyddyImage)</div><div class="line"></div><div class="line">//创建自己加载图片的方法</div><div class="line">+(__kindof UIImage*)FD_imageNamed:(NSString *)imageName;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>UIImage+FeyddyImage.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;UIImage+FeyddyImage.h&quot;</div><div class="line"></div><div class="line">@implementation UIImage (FeyddyImage)</div><div class="line"></div><div class="line">// 在分类里面不能调用super,分类木有父类</div><div class="line">//+(UIImage * )imageNamed:(NSString * )name</div><div class="line">//&#123;</div><div class="line">//    [super im]</div><div class="line">//&#125;</div><div class="line"></div><div class="line">// 先写一个其他方法,实现这个功能</div><div class="line"></div><div class="line">+(UIImage*)FD_imageNamed:(NSString * )imageName &#123;</div><div class="line"></div><div class="line">    //1.加载图片</div><div class="line">    UIImage * image = [UIImage imageNamed:imageName];</div><div class="line"></div><div class="line">    //2.判断图片是否存在</div><div class="line">    if (image == nil) &#123;</div><div class="line">        NSLog(@&quot;图片不存在&quot;);</div><div class="line">    &#125;</div><div class="line">    return image;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>在主控制器里面调用</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;UIImage+FeyddyImage.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line">@end</div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">-(void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    UIImage * image = [UIImage FD_imageNamed:@&quot;feyddy&quot;];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>但是使用自己的方法有两个弊端：</p>
<ol>
<li>每次使用,都需要导入头文件”UIImage+FeyddyImage.h”。</li>
<li>当一个项目开发太久,使用这个方式不靠谱。</li>
</ol>
<p>所以我们现在想实现的就是:</p>
<ul>
<li>直接使用系统的方法<code>imageNamed:</code>,但是它实际的实现方法:底层调用<code>FD_imageNamed</code></li>
</ul>
<p>本质:</p>
<ul>
<li>交换两个方法的实现<code>imageNamed:</code>和<code>FD_imageNamed</code>方法</li>
<li>调用<code>imageNamed:</code>其实就是调用<code>FD_imageNamed</code></li>
</ul>
<p>实现方法：</p>
<p>在<code>UIImage+FeyddyImage.m</code>中实现交换两个方法的实现。</p>
<blockquote>
<p>加载分类的时候会调用 <code>+ (void)load</code>方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIImage+FeyddyImage.h&quot;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line"></div><div class="line">@implementation UIImage (FeyddyImage)</div><div class="line"></div><div class="line">// 在分类里面不能调用super,分类木有父类</div><div class="line">//+ (UIImage * )imageNamed:(NSString * )name</div><div class="line">//&#123;</div><div class="line">//    [super im]</div><div class="line">//&#125;</div><div class="line"></div><div class="line">// 先写一个其他方法,实现这个功能</div><div class="line"></div><div class="line">+ (UIImage * )FD_imageNamed:(NSString * )imageName &#123;</div><div class="line"></div><div class="line">  //1.加载图片</div><div class="line">  UIImage * image = [UIImage FD_imageNamed:imageName];</div><div class="line"></div><div class="line">  //2.判断图片是否存在</div><div class="line">  if (image == nil) &#123;</div><div class="line">      NSLog(@&quot;图片不存在&quot;);</div><div class="line">  &#125;</div><div class="line">  return image;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 加载这个分类的时候调用</div><div class="line">+ (void)load</div><div class="line">&#123;</div><div class="line">  //交换方法实现，方法都是定义在类里面，所以都会以class开头、</div><div class="line">  // class_getMethodImplementation:获取方法实现,因为他的返回是IMP</div><div class="line">  // class_getInstanceMethod:获取对象方法</div><div class="line">  // class_getClassMethod:获取类方法</div><div class="line">  // IMP:方法实现</div><div class="line"></div><div class="line">  //获取imageNamed类方法</div><div class="line">  // Class:获取哪个类方法</div><div class="line">  // SEL:获取方法编号,根据SEL就能去对应的类找方法</div><div class="line">  Method imageNamedClassMethod = class_getClassMethod([UIImage class], @selector(imageNamed:));</div><div class="line"></div><div class="line">  //获取FD_imageNamed类方法</div><div class="line">  Method FD_imageNamedClassMethod = class_getClassMethod([UIImage class], @selector(FD_imageNamed:));</div><div class="line"></div><div class="line">  //交换方法实现</div><div class="line">  method_exchangeImplementations(imageNamedClassMethod, FD_imageNamedClassMethod);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>FD_imageNamed</code>里面的加载图片方法不能使用系统的，会出现死循环。改成<code>UIImage * image = [UIImage FD_imageNamed:imageName];</code>。</p>
<blockquote>
<p>其实交换方法不是简单的交换而已，当你继续使用系统的方法名的时候，你会将你交换的方法与系统的方法一起实现，可以理解为为系统方法增加新的功能。</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h2 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h2><ul>
<li><p>开发使用场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</p>
</li>
<li><p>经典面试题：有没有使用performSelector，其实主要想问你有没有动态添加过方法。</p>
</li>
<li><p>运用的其实是懒加载机制：用到的时候再加载。</p>
</li>
<li><p>简单使用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line"></div><div class="line">    Person* p = [[Person alloc] init];</div><div class="line"></div><div class="line">    // 默认person，没有实现eat方法，可以通过performSelector调用，但是会报错。</div><div class="line">    // 动态添加方法就不会报错</div><div class="line">    [p performSelector:@selector(eat)];</div><div class="line"></div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Person</div><div class="line">// void(* )()</div><div class="line">// 默认方法都有两个隐式参数，</div><div class="line">void eat(id self,SEL sel)</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%@ %@&quot;,self,NSStringFromSelector(sel));</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 当一个对象调用未实现的方法，会调用这个方法处理,并且会把对应的方法列表传过来.</div><div class="line">// 刚好可以用来判断，未实现的方法是不是我们想要动态添加的方法</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    if (sel == @selector(eat)) &#123;</div><div class="line">        // 动态添加eat方法</div><div class="line"></div><div class="line">        // 第一个参数：给哪个类添加方法</div><div class="line">        // 第二个参数：添加方法的方法编号</div><div class="line">        // 第三个参数：添加方法的函数实现（函数地址）</div><div class="line">        // 第四个参数：函数的类型，(返回值+参数类型) v:void @:对象-&gt;self :表示SEL-&gt;_cmd</div><div class="line">        class_addMethod(self, @selector(eat), eat, &quot;v@:&quot;);</div><div class="line">    &#125;</div><div class="line">    return [super resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
<li><p>具体实现：</p>
<p>首先创建一个Person类,动态添加一个带参数的<code>age:</code>方法和不带参数的<code>eat</code>方法。</p>
<p>Person.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">@implementation Person</div><div class="line"></div><div class="line">// 动态添加方法,首先实现这个resolveInstanceMethod</div><div class="line">// resolveInstanceMethod调用:当调用了没有实现的方法，就会调用resolveInstanceMethod</div><div class="line">// resolveInstanceMethod作用:就知道哪些方法没有实现,从而动态添加方法</div><div class="line">// sel:就是没有实现方法就是主控制器里面的eat方法</div><div class="line"></div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,NSStringFromSelector(sel));//打印出来的就是eat</div><div class="line"></div><div class="line">    //动态添加eat方法</div><div class="line">    //判断添加的方法是哪个</div><div class="line">    if (sel == @selector(age:)) &#123;//有参数</div><div class="line">        /*</div><div class="line">         cls:给哪个类添加方法</div><div class="line">         SEL:添加方法的方法编号是什么</div><div class="line">         IMP:方法实现,函数入口,函数名</div><div class="line">         types:方法类型,这个需要查询runtime</div><div class="line"></div><div class="line">         class_addMethod(__unsafe_unretained Class cls, SEL name, IMP imp, const char *types)</div><div class="line">         ____</div><div class="line">         */</div><div class="line">         /**/</div><div class="line">        // @-&gt;对象  :-&gt;SEL</div><div class="line">        class_addMethod(self, sel, (IMP)ageMethodRealize, &quot;v@:@&quot;);</div><div class="line"></div><div class="line">        // 处理完</div><div class="line">        return YES;</div><div class="line">    &#125;else if (sel == @selector(eat)) &#123;//没有参数</div><div class="line"></div><div class="line">        class_addMethod(self, sel, (IMP)eatMethodRealize, &quot;v@:&quot;);</div><div class="line"></div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return [super resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//IMP函数方法实现</div><div class="line">// 默认一个方法都有两个参数,self,_cmd,隐式参数</div><div class="line">// self:方法调用者</div><div class="line">// _cmd:调用方法的编号</div><div class="line">//后面的id param1如果方法有参数就加上</div><div class="line"></div><div class="line">void ageMethodRealize(id self, SEL _cmd, id param1)</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;age: 方法被调用了，%@  %@ 年龄为：  %@&quot;,self,NSStringFromSelector(_cmd),param1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void eatMethodRealize(id self, SEL _cmd) &#123;</div><div class="line">    NSLog(@&quot;eat 方法被调用了，%@  %@ &quot;,self,NSStringFromSelector(_cmd));</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>在主控制器中的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //performSelector动态添加方法</div><div class="line">    Person * p = [[Person alloc] init];</div><div class="line"></div><div class="line">    //动态添加方法eat，但是Person里面如果没有这个方法会报错</div><div class="line">    [p performSelector:@selector(eat)];</div><div class="line"></div><div class="line">    [p performSelector:@selector(age:) withObject:@25];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2017-03-21 14:24:33.333 runtime动态添加方法[5770:176029] eat</div><div class="line">2017-03-21 14:24:33.333 runtime动态添加方法[5770:176029] _dynamicContextEvaluation:patternString:</div><div class="line">2017-03-21 14:24:33.333 runtime动态添加方法[5770:176029] descriptionWithLocale:</div><div class="line">2017-03-21 14:24:33.334 runtime动态添加方法[5770:176029] eat 方法被调用了，&lt;Person: 0x60800000fdc0&gt;  eat</div><div class="line">2017-03-21 14:24:33.334 runtime动态添加方法[5770:176029] age:</div><div class="line">2017-03-21 14:24:33.335 runtime动态添加方法[5770:176029] _dynamicContextEvaluation:patternString:</div><div class="line">2017-03-21 14:24:33.335 runtime动态添加方法[5770:176029] descriptionWithLocale:</div><div class="line">2017-03-21 14:24:33.335 runtime动态添加方法[5770:176029] age: 方法被调用了，&lt;Person: 0x60800000fdc0&gt;  age: 年龄为：  25</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="给分类添加属性"><a href="#给分类添加属性" class="headerlink" title="给分类添加属性"></a>给分类添加属性</h2><ul>
<li><p>原理：给一个类声明属性，其实本质就是给这个类添加关联，并不是直接把这个值的内存空间添加到类存空间。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">  [super viewDidLoad];</div><div class="line">  // Do any additional setup after loading the view, typically from a nib.</div><div class="line"></div><div class="line">  // 给系统NSObject类动态添加属性name</div><div class="line"></div><div class="line">  NSObject * objc = [[NSObject alloc] init];</div><div class="line">  objc.name = @&quot;Feyddy&quot;;</div><div class="line">  NSLog(@&quot;%@&quot;,objc.name);</div><div class="line"></div><div class="line">&#125;</div><div class="line">@end</div><div class="line">// 定义关联的key</div><div class="line">static const char *key = &quot;name&quot;;</div><div class="line"></div><div class="line">@implementation NSObject (Property)</div><div class="line"></div><div class="line">- (NSString * )name</div><div class="line">&#123;</div><div class="line">  // 根据关联的key，获取关联的值。</div><div class="line">  return objc_getAssociatedObject(self, key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setName:(NSString * )name</div><div class="line">&#123;</div><div class="line">  // 第一个参数：给哪个对象添加关联</div><div class="line">  // 第二个参数：关联的key，通过这个key获取</div><div class="line">  // 第三个参数：关联的value</div><div class="line">  // 第四个参数:关联的策略</div><div class="line">  objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
<li><p>具体实现：<br>我们给NSObject添加一个属性：创建一个分类<code>NSObject+FeyddyObjc</code></p>
<p>NSObject+FeyddyObjc.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface NSObject (FeyddyObjc)</div><div class="line"></div><div class="line">//在分类里面的@property只会生成get和set方法的声明，不会自动实现，需要自己去实现</div><div class="line">@property(nonatomic,copy) NSString * name;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>NSObject+FeyddyObjc.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;NSObject+FeyddyObjc.h&quot;</div><div class="line"></div><div class="line">@implementation NSObject (FeyddyObjc)</div><div class="line"></div><div class="line">static NSString * staticName;//用来接收外面传进的name属性值</div><div class="line"></div><div class="line">- (void)setName:(NSString * )name</div><div class="line">&#123;</div><div class="line">    staticName = name;</div><div class="line">&#125;</div><div class="line">- (NSString * )name</div><div class="line">&#123;</div><div class="line">    return staticName;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>主控制器实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;NSObject+FeyddyObjc.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    NSObject * obj = [[NSObject alloc] init];</div><div class="line">    obj.name = @&quot;Feyddy&quot;;</div><div class="line">    NSLog(@&quot;%@&quot;,obj.name);  </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-03-21 15:03:01.392 runtime给分类添加属性[6602:200009] Feyddy</div></pre></td></tr></table></figure>
<p>虽然是可以用了，但是这个相当于给静态变量<code>staticName</code>赋值，但是<code>name</code>这个属性和这个类，没有关系直接关系。直接关系的<code>staticName</code>。但是如果我们这个类消失了，但是<code>staticName</code>还在。所以不是我们的初衷。</p>
<p>下面动态添加属性：</p>
<p>NSObject+FeyddyObjc.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#import &quot;NSObject+FeyddyObjc.h&quot;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line"></div><div class="line">@implementation NSObject (FeyddyObjc)</div><div class="line"></div><div class="line">//static NSString * staticName;//用来接收外面传进的name属性值</div><div class="line"></div><div class="line">- (void)setName:(NSString * )name</div><div class="line">&#123;</div><div class="line">    // 添加属性,跟对象</div><div class="line"></div><div class="line">    /* 给某个对象产生关联,添加属性</div><div class="line">     object:给哪个对象添加属性</div><div class="line">     key:属性名,根据key去获取关联的对象 ,void * == id</div><div class="line">     value:关联的值</div><div class="line">     policy:策越</div><div class="line">     objc_setAssociatedObject(id object, const void * key, id value, objc_AssociationPolicy policy)</div><div class="line">     */</div><div class="line">    /**/</div><div class="line"></div><div class="line">    objc_setAssociatedObject(self, @&quot;name&quot;, name, OBJC_ASSOCIATION_COPY);</div><div class="line"></div><div class="line">//    staticName = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString * )name</div><div class="line">&#123;</div><div class="line">    /* 获取某个对象关联的属性</div><div class="line">     object:给哪个对象添加属性</div><div class="line">     key:属性名,根据key去获取关联的对象 ,void * == id</div><div class="line">     objc_getAssociatedObject(id object, const void * key)</div><div class="line">     */</div><div class="line">    /**/</div><div class="line">    return objc_getAssociatedObject(self, @&quot;name&quot;);</div><div class="line"></div><div class="line">//    return staticName;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果同上。</p>
</li>
</ul>
<h2 id="字典转模型"><a href="#字典转模型" class="headerlink" title="字典转模型"></a>字典转模型</h2><ul>
<li><p>设计模型：字典转模型的第一步</p>
<ul>
<li>模型属性，通常需要跟字典中的key一一对应</li>
<li>问题：一个一个的生成模型属性，很慢？</li>
<li>需求：能不能自动根据一个字典，生成对应的属性。</li>
<li><p>解决：提供一个分类，专门根据字典生成对应的属性字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@implementation NSObject (Log)</div><div class="line"></div><div class="line">// 自动打印属性字符串</div><div class="line">+(void)resolveDict:(NSDictionary * )dict&#123;</div><div class="line"></div><div class="line">    // 拼接属性字符串代码</div><div class="line">    NSMutableString * strM = [NSMutableString string];</div><div class="line"></div><div class="line">    // 1.遍历字典，把字典中的所有key取出来，生成对应的属性代码</div><div class="line">    [dict enumerateKeysAndObjectsUsingBlock:^(id _Nonnull key, id _Nonnull obj, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        // 类型经常变，抽出来</div><div class="line">         NSString * type;</div><div class="line"></div><div class="line">        if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFString&quot;)]) &#123;</div><div class="line">            type = @&quot;NSString&quot;;</div><div class="line">        &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFArray&quot;)])&#123;</div><div class="line">            type = @&quot;NSArray&quot;;</div><div class="line">        &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFNumber&quot;)])&#123;</div><div class="line">            type = @&quot;int&quot;;</div><div class="line">        &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFDictionary&quot;)])&#123;</div><div class="line">            type = @&quot;NSDictionary&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 属性字符串</div><div class="line">        NSString *str;</div><div class="line">        if ([type containsString:@&quot;NS&quot;]) &#123;</div><div class="line">            str = [NSString stringWithFormat:@&quot;@property (nonatomic, strong) %@ *%@;&quot;,type,key];</div><div class="line">        &#125;else&#123;</div><div class="line">            str = [NSString stringWithFormat:@&quot;@property (nonatomic, assign) %@ %@;&quot;,type,key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 每生成属性字符串，就自动换行。</div><div class="line">        [strM appendFormat:@&quot;\n%@\n&quot;,str];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    // 把拼接好的字符串打印出来，就好了。</div><div class="line">    NSLog(@&quot;%@&quot;,strM);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
<li><p><strong>具体实现</strong></p>
<p>创建一个工具分类：<code>NSObject+PropertyAutoFeyddy</code></p>
<p>NSObject+PropertyAutoFeyddy.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface NSObject (PropertyAutoFeyddy)</div><div class="line"></div><div class="line">//创一个字典过来</div><div class="line">+ (void)createPropertyCodeWithDict:(NSDictionary * )dict;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>NSObject+PropertyAutoFeyddy.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">#import &quot;NSObject+PropertyAutoFeyddy.h&quot;</div><div class="line"></div><div class="line">@implementation NSObject (PropertyAutoFeyddy)</div><div class="line"></div><div class="line">+ (void)createPropertyCodeWithDict:(NSDictionary *)dict &#123;</div><div class="line"></div><div class="line">  //遍历字典</div><div class="line">  /**</div><div class="line">   key -&gt;属性名propertyName</div><div class="line">   obj -&gt;属性值value</div><div class="line">   */</div><div class="line"></div><div class="line">  NSMutableString *strm = [NSMutableString string];</div><div class="line"></div><div class="line">  [dict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line"></div><div class="line">      //属性代码</div><div class="line">      NSString *code;</div><div class="line"></div><div class="line">      //NSLog(@&quot;---%@---%@&quot;,key,[obj class]);//通过获取字典中的字段的内容我们可以发现到下面的类型</div><div class="line"></div><div class="line">      /*</div><div class="line">      2017-03-21 16:18:03.447 runtime字典转模型KVC实现[8119:245304] ---source---__NSCFString</div><div class="line">      2017-03-21 16:18:03.448 runtime字典转模型KVC实现[8119:245304] ---reposts_count---__NSCFNumber</div><div class="line">      2017-03-21 16:18:03.448 runtime字典转模型KVC实现[8119:245304] ---pic_urls---__NSCFArray</div><div class="line">      2017-03-21 16:18:03.449 runtime字典转模型KVC实现[8119:245304] ---created_at---__NSCFString</div><div class="line">      2017-03-21 16:18:03.449 runtime字典转模型KVC实现[8119:245304] ---attitudes_count---__NSCFNumber</div><div class="line">      2017-03-21 16:18:03.450 runtime字典转模型KVC实现[8119:245304] ---idstr---__NSCFString</div><div class="line">      2017-03-21 16:18:03.450 runtime字典转模型KVC实现[8119:245304] ---text---__NSCFString</div><div class="line">      2017-03-21 16:18:03.450 runtime字典转模型KVC实现[8119:245304] ---comments_count---__NSCFNumber</div><div class="line">      2017-03-21 16:18:03.451 runtime字典转模型KVC实现[8119:245304] ---user---__NSCFDictionary</div><div class="line">       */</div><div class="line"></div><div class="line">      //属性策略，判断obj类型，对象strong，基本数据类型assign</div><div class="line"></div><div class="line">      if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFString&quot;)]) &#123;</div><div class="line">          code = [NSString stringWithFormat:@&quot;@property (nonatomic, strong) NSString *%@;&quot;,key]</div><div class="line">          ;</div><div class="line">      &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFNumber&quot;)])&#123;</div><div class="line">          code = [NSString stringWithFormat:@&quot;@property (nonatomic, assign) int %@;&quot;,key]</div><div class="line">          ;</div><div class="line">      &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFArray&quot;)])&#123;</div><div class="line">          code = [NSString stringWithFormat:@&quot;@property (nonatomic, strong) NSArray *%@;&quot;,key]</div><div class="line">          ;</div><div class="line">      &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFDictionary&quot;)])&#123;</div><div class="line">          code = [NSString stringWithFormat:@&quot;@property (nonatomic, strong) NSDictionary *%@;&quot;,key]</div><div class="line">          ;</div><div class="line">      &#125;else if ([obj isKindOfClass:NSClassFromString(@&quot;__NSCFBoolean&quot;)])&#123;</div><div class="line">          code = [NSString stringWithFormat:@&quot;@property (nonatomic, assign) BOOL %@;&quot;,key]</div><div class="line">          ;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      [strm appendFormat:@&quot;\n%@\n&quot;,code];</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  NSLog(@&quot;==== %@&quot;,strm);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>在主控制器中实现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;NSObject+PropertyAutoFeyddy.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //获取文件路径</div><div class="line">    NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;status.plist&quot; ofType:nil];</div><div class="line"></div><div class="line">    //获取文件最外层字典</div><div class="line">    NSDictionary *dict = [NSDictionary dictionaryWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">    //获取文件中的某个字典数组</div><div class="line">    NSArray *dictArray = dict[@&quot;statuses&quot;];</div><div class="line"></div><div class="line">    //设计模型属性代码</div><div class="line">    [NSObject createPropertyCodeWithDict:dictArray[0][@&quot;user&quot;]];</div><div class="line"></div><div class="line">    for (NSDictionary *dic in dictArray) &#123;</div><div class="line">        //字典转模型-&gt;创建模型Status</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><em>运行结果</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) NSString *source;</div><div class="line"></div><div class="line">@property (nonatomic, assign) int reposts_count;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray *pic_urls;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString *created_at;</div><div class="line"></div><div class="line">@property (nonatomic, assign) int attitudes_count;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString *idstr;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString *text;</div><div class="line"></div><div class="line">@property (nonatomic, assign) int comments_count;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSDictionary *user;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>字典转模型的方式一：KVC</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@implementation Status</div><div class="line"></div><div class="line">+ (instancetype)statusWithDict:(NSDictionary * )dict</div><div class="line">&#123;</div><div class="line">    Status * status = [[self alloc] init];</div><div class="line">    //KVC设置值</div><div class="line">    [status setValuesForKeysWithDictionary:dict];</div><div class="line"></div><div class="line">    return status;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<ul>
<li><p>KVC字典转模型弊端：必须保证，模型中的属性和字典中的key一一对应。</p>
<ul>
<li>如果不一致，就会调用<strong>[<status 0x7fa74b545d60=""> setValue:forUndefinedKey:]</status></strong> 报<strong>key</strong>找不到的错。</li>
<li>分析:模型中的属性和字典的key不一一对应，系统就会调用<strong>setValue:forUndefinedKey:</strong>报错。</li>
<li><p>解决:重写对象的<strong>setValue:forUndefinedKey:</strong>,把系统的方法覆盖， 就能继续使用KVC，字典转模型了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void)setValue:(id)value forUndefinedKey:(NSString * )key</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>具体实现：</p>
<p>创建一个Status模型：</p>
<p>Status.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Status : NSObject</div><div class="line"></div><div class="line">// 写一段程序自动生成属性代码</div><div class="line"></div><div class="line">@property (nonatomic, assign) NSInteger ID;</div><div class="line"></div><div class="line">// 解析字典自动生成属性代码</div><div class="line">@property (nonatomic, strong) NSString *source;</div><div class="line"></div><div class="line">@property (nonatomic, assign) NSInteger reposts_count;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray *pic_urls;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString *created_at;</div><div class="line"></div><div class="line">@property (nonatomic, assign) int attitudes_count;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString *idstr;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString *text;</div><div class="line"></div><div class="line">@property (nonatomic, assign) int comments_count;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSDictionary *user;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSDictionary *retweeted_status;</div><div class="line"></div><div class="line">// 模型的属性名跟字典一一对应</div><div class="line"></div><div class="line">+ (__kindof Status *)statusWithDict:(NSDictionary *)dict;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Status.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#import &quot;Status.h&quot;</div><div class="line"></div><div class="line">@implementation Status</div><div class="line"></div><div class="line">+ (Status * )statusWithDict:(NSDictionary * )dict &#123;</div><div class="line">    Status * status = [[self alloc] init];</div><div class="line"></div><div class="line">    //KVC设置值</div><div class="line">    [status setValuesForKeysWithDictionary:dict];</div><div class="line"></div><div class="line">    return  status;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//解决KVC报错-&gt;id字段问题处理</div><div class="line"></div><div class="line">- (void)setValue:(id)value forUndefinedKey:(NSString * )key &#123;</div><div class="line">    // key:没有找到key</div><div class="line">    // value:没有找到key对应的值</div><div class="line">    if ([key isEqualToString:@&quot;id&quot;]) &#123;</div><div class="line">        self.ID = (NSString * )value;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>主控制器实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;NSObject+PropertyAutoFeyddy.h&quot;</div><div class="line">#import &quot;Status.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //获取文件路径</div><div class="line">    NSString * filePath = [[NSBundle mainBundle] pathForResource:@&quot;status.plist&quot; ofType:nil];</div><div class="line"></div><div class="line">    //获取文件最外层字典</div><div class="line">    NSDictionary * dict = [NSDictionary dictionaryWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">    //获取文件中的某个字典数组</div><div class="line">    NSArray * dictArray = dict[@&quot;statuses&quot;];</div><div class="line"></div><div class="line">    //设计模型属性代码</div><div class="line">//    [NSObject createPropertyCodeWithDict:dictArray[0]];</div><div class="line">    NSMutableArray * statusArray = [NSMutableArray array];</div><div class="line"></div><div class="line">    for (NSDictionary * dic in dictArray) &#123;</div><div class="line">        //字典转模型-&gt;创建模型Status</div><div class="line">        Status * status = [Status statusWithDict:dic];</div><div class="line">        [statusArray addObject:status];</div><div class="line">    &#125;</div><div class="line">    NSLog(@&quot;---%@&quot;,statusArray);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  2017-03-21 17:30:56.000 runtime字典转模型KVC实现[9351:278442] ---(</div><div class="line">    &quot;&lt;Status: 0x6000000a4260&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4620&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4680&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4740&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a47a0&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4800&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4860&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a48c0&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4920&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4980&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a49e0&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4a40&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4aa0&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4b00&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4b60&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4bc0&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4c20&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4c80&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4ce0&gt;&quot;,</div><div class="line">    &quot;&lt;Status: 0x6000000a4d40&gt;&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>字典转模型的方式二：Runtime</p>
<ul>
<li>思路：利用运行时，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值。</li>
<li><p>步骤：提供一个NSObject分类，专门字典转模型，以后所有模型都可以通过这个分类转。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line"></div><div class="line">    // 解析Plist文件</div><div class="line">    NSString * filePath = [[NSBundle mainBundle] pathForResource:@&quot;status.plist&quot; ofType:nil];</div><div class="line"></div><div class="line">    NSDictionary * statusDict = [NSDictionary dictionaryWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">    // 获取字典数组</div><div class="line">    NSArray * dictArr = statusDict[@&quot;statuses&quot;];</div><div class="line"></div><div class="line">    // 自动生成模型的属性字符串</div><div class="line">    // [NSObject resolveDict:dictArr[0][@&quot;user&quot;]];</div><div class="line">    NSMutableArray * statusArray = [NSMutableArray array];</div><div class="line">    // 遍历字典数组</div><div class="line">    for (NSDictionary * dict in dictArr) &#123;</div><div class="line">        Status * status = [Status modelWithDict:dict];</div><div class="line">        [statusArray addObject:status];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 测试数据</div><div class="line">    NSLog(@&quot;%@ %@&quot;,statusArray,[statusArray[0] user]);</div><div class="line"></div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@implementation NSObject (Model)</div><div class="line"></div><div class="line">+(instancetype)modelWithDict:(NSDictionary * )dict</div><div class="line">&#123;</div><div class="line">    // 思路：遍历模型中所有属性-》使用运行时</div><div class="line"></div><div class="line">    // 0.创建对应的对象</div><div class="line">    id objc = [[self alloc] init];</div><div class="line"></div><div class="line">    // 1.利用runtime给对象中的成员属性赋值</div><div class="line"></div><div class="line">    // class_copyIvarList:获取类中的所有成员属性</div><div class="line">    // Ivar：成员属性的意思</div><div class="line">    // 第一个参数：表示获取哪个类中的成员属性</div><div class="line">    // 第二个参数：表示这个类有多少成员属性，传入一个Int变量地址，会自动给这个变量赋值</div><div class="line">    // 返回值Ivar *：指的是一个ivar数组，会把所有成员属性放在一个数组中，通过返回的数组就能全部获取到。</div><div class="line">    /* 类似下面这种写法</div><div class="line"></div><div class="line">     Ivar ivar;</div><div class="line">     Ivar ivar1;</div><div class="line">     Ivar ivar2;</div><div class="line">     // 定义一个ivar的数组a</div><div class="line">     Ivar a[] = &#123;ivar,ivar1,ivar2&#125;;</div><div class="line"></div><div class="line">     // 用一个Ivar * 指针指向数组第一个元素</div><div class="line">     Ivar * ivarList = a;</div><div class="line"></div><div class="line">     // 根据指针访问数组第一个元素</div><div class="line">     ivarList[0];</div><div class="line"></div><div class="line">     */</div><div class="line">    unsigned int count;</div><div class="line"></div><div class="line">    // 获取类中的所有成员属性</div><div class="line">    Ivar * ivarList = class_copyIvarList(self, &amp;count);</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        // 根据角标，从数组取出对应的成员属性</div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line"></div><div class="line">        // 获取成员属性名</div><div class="line">        NSString * name = [NSString stringWithUTF8String:ivar_getName(ivar)];</div><div class="line"></div><div class="line">        // 处理成员属性名-&gt;字典中的key</div><div class="line">        // 从第一个角标开始截取</div><div class="line">        NSString * key = [name substringFromIndex:1];</div><div class="line"></div><div class="line">        // 根据成员属性名去字典中查找对应的value</div><div class="line">        id value = dict[key];</div><div class="line"></div><div class="line">        // 二级转换:如果字典中还有字典，也需要把对应的字典转换成模型</div><div class="line">        // 判断下value是否是字典</div><div class="line">        if ([value isKindOfClass:[NSDictionary class]]) &#123;</div><div class="line">            // 字典转模型</div><div class="line">            // 获取模型的类对象，调用modelWithDict</div><div class="line">            // 模型的类名已知，就是成员属性的类型</div><div class="line"></div><div class="line">            // 获取成员属性类型</div><div class="line">           NSString * type = [NSString stringWithUTF8String:ivar_getTypeEncoding(ivar)];</div><div class="line">          // 生成的是这种@&quot;@\&quot;User\&quot;&quot; 类型 -》 @&quot;User&quot;  在OC字符串中 \&quot; -&gt; &quot;，\是转义的意思，不占用字符</div><div class="line">            // 裁剪类型字符串</div><div class="line">            NSRange range = [type rangeOfString:@&quot;\&quot;&quot;];</div><div class="line"></div><div class="line">           type = [type substringFromIndex:range.location + range.length];</div><div class="line"></div><div class="line">            range = [type rangeOfString:@&quot;\&quot;&quot;];</div><div class="line"></div><div class="line">            // 裁剪到哪个角标，不包括当前角标</div><div class="line">          type = [type substringToIndex:range.location];</div><div class="line"></div><div class="line">            // 根据字符串类名生成类对象</div><div class="line">            Class modelClass = NSClassFromString(type);</div><div class="line">            if (modelClass) &#123; // 有对应的模型才需要转</div><div class="line"></div><div class="line">                // 把字典转模型</div><div class="line">                value  =  [modelClass modelWithDict:value];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 三级转换：NSArray中也是字典，把数组中的字典转换成模型.</div><div class="line">        // 判断值是否是数组</div><div class="line">        if ([value isKindOfClass:[NSArray class]]) &#123;</div><div class="line">            // 判断对应类有没有实现字典数组转模型数组的协议</div><div class="line">            if ([self respondsToSelector:@selector(arrayContainModelClass)]) &#123;</div><div class="line"></div><div class="line">                // 转换成id类型，就能调用任何对象的方法</div><div class="line">                id idSelf = self;</div><div class="line"></div><div class="line">                // 获取数组中字典对应的模型</div><div class="line">                NSString * type =  [idSelf arrayContainModelClass][key];</div><div class="line"></div><div class="line">                // 生成模型</div><div class="line">               Class classModel = NSClassFromString(type);</div><div class="line">                NSMutableArray * arrM = [NSMutableArray array];</div><div class="line">                // 遍历字典数组，生成模型数组</div><div class="line">                for (NSDictionary * dict in value) &#123;</div><div class="line">                    // 字典转模型</div><div class="line">                  id model =  [classModel modelWithDict:dict];</div><div class="line">                    [arrM addObject:model];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // 把模型数组赋值给value</div><div class="line">                value = arrM;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (value) &#123; // 有值，才需要给模型的属性赋值</div><div class="line">            // 利用KVC给模型中的属性赋值</div><div class="line">            [objc setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return objc;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS9新特性回顾]]></title>
      <url>http://yoursite.com/2017/03/21/iOS9%E6%96%B0%E7%89%B9%E6%80%A7%E5%9B%9E%E9%A1%BE/</url>
      <content type="html"><![CDATA[<h1 id="iOS9新特性"><a href="#iOS9新特性" class="headerlink" title="iOS9新特性"></a>iOS9新特性</h1><h2 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h2><p>iOS9新出的关键字:用来修饰属性,或者方法的参数,方法的返回值。</p>
<p>好处:</p>
<ol>
<li>迎合swift</li>
<li>提高我们开发人员开发规范,减少程序员之间交流</li>
</ol>
<p><strong>注意:iOS9新出关键字<code>nonnull</code>,<code>nullable</code>只能修饰对象,不能修饰基本数据类型</strong></p>
<h3 id="nullable"><a href="#nullable" class="headerlink" title="nullable"></a>nullable</h3><p>作用:表示可以为空</p>
<p>nullable书写规范:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 方式一:</div><div class="line">@property (nonatomic, strong, nullable) NSString *name;</div><div class="line">// 方式二:</div><div class="line">@property (nonatomic, strong) NSString *_Nullable name;</div><div class="line">// 方式三:</div><div class="line">@property (nonatomic, strong) NSString *__nullable name;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="nonnull"><a href="#nonnull" class="headerlink" title="nonnull"></a>nonnull</h3><p>non:非 null:空</p>
<p>书写格式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong, nonnull) NSString *icon;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString * _Nonnull icon;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSString * __nonnull icon;</div></pre></td></tr></table></figure>
<h3 id="NS-ASSUME-NONNULL-BEGIN和NS-ASSUME-NONNULL-END"><a href="#NS-ASSUME-NONNULL-BEGIN和NS-ASSUME-NONNULL-END" class="headerlink" title="NS_ASSUME_NONNULL_BEGIN和NS_ASSUME_NONNULL_END"></a>NS_ASSUME_NONNULL_BEGIN和NS_ASSUME_NONNULL_END</h3><p>在<code>NS_ASSUME_NONNULL_BEGIN</code>和<code>NS_ASSUME_NONNULL_END</code>之间,定义的所有对象属性和方法默认都是<code>nonnull</code></p>
<h3 id="方法中-关键字书写规范"><a href="#方法中-关键字书写规范" class="headerlink" title="方法中,关键字书写规范"></a>方法中,关键字书写规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (nonnull NSString *)test:(nonnull NSString *)str;</div><div class="line">- (NSString * _Nonnull)test1:(NSString * _Nonnull)str;</div></pre></td></tr></table></figure>
<h3 id="null-resettable"><a href="#null-resettable" class="headerlink" title="null_resettable"></a>null_resettable</h3><p><code>get:</code>不能返回为空, <code>set:</code>可以为空</p>
<p><strong>注意:如果使用null_resettable,必须重写get方法或者set方法,处理传递的值为空的情况</strong></p>
<p>书写方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong, null_resettable) NSString *name;</div></pre></td></tr></table></figure>
<h3 id="Null-unspecified"><a href="#Null-unspecified" class="headerlink" title="_Null_unspecified"></a><em>_Null_unspecified</em></h3><p><em>_Null_unspecified(不确定是否为空)</em></p>
<p>书写方式只有这种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//方式一</div><div class="line">@property (nonatomic, strong) NSString *_Null_unspecified name;</div><div class="line"></div><div class="line">//方式二</div><div class="line">@property (nonatomic, strong) NSString *__null_unspecified name;</div></pre></td></tr></table></figure>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型:限制类型。</p>
<p>泛型使用场景:</p>
<pre><code>1. 在集合(数组,字典,NSSet)中使用泛型比较常见。
2. 当声明一个类,类里面的某些属性的类型不确定,这时候我们才使用泛型。
</code></pre><p>泛型书写规范：</p>
<pre><code>在类型后面定义泛型,`NSMutableArray&lt;UITouch *&gt; *datas`
</code></pre><p>泛型修饰:</p>
<pre><code>只能修饰方法的调用。
</code></pre><p>泛型好处:   </p>
<pre><code>1. 提高开发规范,减少程序员之间交流
2. 通过集合取出来对象,直接当做泛型对象使用,可以直接使用点语法    
</code></pre><p>下面对上面的几点通过代码进行说明：</p>
<h3 id="泛型书写规范"><a href="#泛型书写规范" class="headerlink" title="泛型书写规范"></a>泛型书写规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//普通的类型声明</div><div class="line">@property (nonatomic, strong) NSMutableArray *data1;</div><div class="line"></div><div class="line">//泛型声明-限制数组里面全部是字符串</div><div class="line">@property (nonatomic, strong) NSMutableArray&lt;NSString *&gt; *data2;</div></pre></td></tr></table></figure>
<h3 id="泛型修饰"><a href="#泛型修饰" class="headerlink" title="泛型修饰"></a>泛型修饰</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//普通的id类型，没有限制</div><div class="line">self.data1 addObject:(nonnull id)</div><div class="line"></div><div class="line">//泛型限制数组里面的对象必须为字符串</div><div class="line">self.data2 addObject:(nonnull NSString *)</div></pre></td></tr></table></figure>
<h3 id="泛型好处第二点，id类型没有点语法。"><a href="#泛型好处第二点，id类型没有点语法。" class="headerlink" title="泛型好处第二点，id类型没有点语法。"></a>泛型好处第二点，<code>id</code>类型没有点语法。</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdu7n559ycj30m801u0su.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//联想不出来，并且报错，如上图</div><div class="line">self.data1[0].length</div><div class="line"></div><div class="line">//可以联想出来</div><div class="line">self.data2[0].length;</div></pre></td></tr></table></figure>
<h3 id="泛型使用场景第二点"><a href="#泛型使用场景第二点" class="headerlink" title="泛型使用场景第二点"></a>泛型使用场景第二点</h3><p>我们自定义一个泛型类：</p>
<p>需求说明：Person类,开发语言Language类。iOS,Java两个继承Language类。</p>
<p>Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">#import &quot;Language.h&quot;</div><div class="line">#import &quot;IOS.h&quot;</div><div class="line"></div><div class="line">// 声明泛型</div><div class="line">@interface Person&lt;ObjectType&gt; : NSObject</div><div class="line"></div><div class="line">// 语言</div><div class="line">@property (nonatomic)  ObjectType language;</div><div class="line">// id类型</div><div class="line">@property (nonatomic)  id language2;</div><div class="line">//Language类型</div><div class="line">@property (nonatomic)  Language * language3;</div><div class="line">//IOS类型</div><div class="line">@property (nonatomic)  IOS * language4;</div><div class="line">/*</div><div class="line"> id:任何对象都能传进来</div><div class="line"> Language:在外面调用的时候,没有提示</div><div class="line"> IOS* 以后只能传IOS对象,不能传其他的对象了</div><div class="line">*/</div><div class="line"></div><div class="line">//如果声明了泛型就会自动的生成下面的set和get方法</div><div class="line">- (ObjectType)language;</div><div class="line">- (void)setLanguage:(ObjectType)language;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><em>上面的解释通过代码来演示一下：</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">不是泛型的三种情况的弊端</div><div class="line">*/</div><div class="line">Person *idP = [[Person alloc] init];</div><div class="line">idP.language2 = @&quot;123&quot;;//此时的language2是一个id类型，什么类型都可以赋值</div><div class="line"></div><div class="line">Person *languageP = [[Person alloc] init];</div><div class="line">languageP.language3 = [[IOS alloc] init];//此时的language3是一个Language类型，但是Language类型现在有两个，没有提示，所以还是不知道有哪些类型。</div><div class="line"></div><div class="line">Person *iOSP = [[Person alloc] init];</div><div class="line">iOSP.language4 = [[Java alloc] init];//此时的language4是ios类型的，所以只能赋iOS类型对象，不能赋其他类型的对象。此时报警告</div><div class="line"></div><div class="line">/*</div><div class="line">泛型的好处演示</div><div class="line">*/</div><div class="line">//Language</div><div class="line">Person&lt;Language *&gt; *p = [[Person alloc] init];</div><div class="line">p.language = [[Language alloc] init];//此时的language为Language类型</div><div class="line"></div><div class="line">//iOS</div><div class="line">Person&lt;IOS *&gt; *iosP = [[Person alloc] init];</div><div class="line">iosP.language = [[IOS alloc] init];//此时的language为IOS类型</div><div class="line"></div><div class="line">//JAVA</div><div class="line">Person&lt;Java *&gt; *javaP = [[Person alloc] init];</div><div class="line">javaP.language = [[Java alloc] init];//此时的language为Java类型</div></pre></td></tr></table></figure>
<h3 id="泛型的进阶-协变、逆变"><a href="#泛型的进阶-协变、逆变" class="headerlink" title="泛型的进阶(协变、逆变)"></a>泛型的进阶(协变、逆变)</h3><p><code>__covariant</code>(协变):用于泛型数据强转类型,可以向上强转,子类 可以转成 父类。<br><code>__contravariant</code>(逆变):用于泛型数据强转类型,可以向下强转, 父类 可以 转成子类。</p>
<p>将上面的Person.h里面修改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">#import &quot;Language.h&quot;</div><div class="line">#import &quot;IOS.h&quot;</div><div class="line"></div><div class="line">// 声明泛型</div><div class="line">@interface Person&lt;__contravariant ObjectType&gt; : NSObject</div><div class="line"></div><div class="line">// 语言</div><div class="line">@property (nonatomic)  ObjectType language;</div><div class="line">// id类型</div><div class="line">@property (nonatomic)  id language2;</div><div class="line">//Language类型</div><div class="line">@property (nonatomic)  Language * language3;</div><div class="line">//IOS类型</div><div class="line">@property (nonatomic)  IOS * language4;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//Language</div><div class="line">Person&lt;Language *&gt; *p = [[Person alloc] init];</div><div class="line">p.language = [[Language alloc] init];//此时的language为Language类型</div><div class="line"></div><div class="line">//iOS</div><div class="line">Person&lt;IOS *&gt; *iosP = [[Person alloc] init];</div><div class="line">iosP.language = [[IOS alloc] init];//此时的language为IOS类型</div><div class="line"></div><div class="line">//JAVA</div><div class="line">Person&lt;Java *&gt; *javaP = [[Person alloc] init];</div><div class="line">javaP.language = [[Java alloc] init];//此时的language为Java类型</div><div class="line"></div><div class="line">// 如果子类想给父类赋值,协变</div><div class="line"></div><div class="line">iosP = p;//需要__contravariant</div><div class="line"></div><div class="line">p = javaP;//需要__covariant</div></pre></td></tr></table></figure>
<h2 id="kindof"><a href="#kindof" class="headerlink" title="__kindof"></a><em>__kindof</em></h2><p><strong>__kindof:表示当前类或者它子类</strong>：在调用的时候,很清楚的知道返回类型。</p>
<p><strong>__kindof书写格式:</strong></p>
<pre><code>放在类型前面,表示修饰这个类型`(__kindof Person *)`
</code></pre><p>下面我们通过代码演示说明一下：</p>
<p>首先创建一个Person类，然后创建一个集成它的SonPerson子类。</p>
<p><strong>Person.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line"></div><div class="line">// 会自动识别当前对象的类</div><div class="line">// SonPerson</div><div class="line">//+ (instancetype)person;</div><div class="line"></div><div class="line">///id类型</div><div class="line">// + (id)person;</div><div class="line"></div><div class="line">/// Person类型</div><div class="line">// + (Person * )person;</div><div class="line"></div><div class="line">// __kindof Person *:表示可以是Person类或者它的子类</div><div class="line">+ (__kindof Person *)person;</div><div class="line"></div><div class="line">// 仅仅表示只能是Person类</div><div class="line">+ (Person *)person1;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>Person.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@implementation Person</div><div class="line">// id坏处: 1.不能在编译的时候检查真实类型</div><div class="line">//        2.返回值,没有提示</div><div class="line">+ (id)person</div><div class="line">&#123;</div><div class="line">    return [[self alloc] init];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>下面进行操作演示：</p>
<ul>
<li>当Person.h里面的是</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">///id类型</div><div class="line">// + (id)person;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// id坏处: 1.不能在编译的时候检查真实类型</div><div class="line">//        2.返回值,没有提示</div><div class="line">NSString *p = [SonPerson person];//此时就什么类型都可以指向</div><div class="line">[SonPerson person];//调用的方法返回的是id类型，没有提示，不知道是什么</div></pre></td></tr></table></figure>
<ul>
<li>当Person.h里面的是</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">///Person类型</div><div class="line">// 仅仅表示只能是Person类</div><div class="line">// + (Person * )person;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SonPerson *p = [SonPerson person];//会报警告，说类型不匹配</div></pre></td></tr></table></figure>
<ul>
<li>当Person.h里面的是</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 会自动识别当前对象的类</div><div class="line">// SonPerson</div><div class="line">+ (instancetype)person;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SonPerson *p = [SonPerson person];//不会报警告</div><div class="line">[SonPerson person];//这个时候也不会有提示告诉你person返回的是哪种类型</div></pre></td></tr></table></figure>
<ul>
<li>当Person.h里面的是</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// __kindof Person *:表示可以是Person类或者它的子类</div><div class="line">+ (__kindof Person *)person;</div></pre></td></tr></table></figure>
<p><strong>结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[SonPerson person];//这个时候会提示是返回的Person类</div><div class="line">NSString *p = [SonPerson person];//此时就会报警告。说类型不匹配</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nullable </tag>
            
            <tag> nonnull </tag>
            
            <tag> null_resettable </tag>
            
            <tag> _Null_unspecified </tag>
            
            <tag> 泛型 </tag>
            
            <tag> __kindof </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript运动事件-中级篇]]></title>
      <url>http://yoursite.com/2017/03/20/JavaScript%E8%BF%90%E5%8A%A8%E4%BA%8B%E4%BB%B6-%E4%B8%AD%E7%BA%A7%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdtdekjp9qj30oc0gkq5r.jpg" alt=""></p>
<a id="more"></a>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdtdf0u4edj30o90fadi0.jpg" alt=""></p>
<h1 id="多物体运动"><a href="#多物体运动" class="headerlink" title="多物体运动"></a>多物体运动</h1><p>首先我们先做一个小的<code>div变宽的例子</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            timer = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oDiv.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="number">400</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oDiv.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="number">200</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">                clearInterval(timer);</div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> iSpeed = (iTarget - oDiv.offsetWidth) / <span class="number">8</span>;</div><div class="line"></div><div class="line">                    iSpeed = iSpeed &gt; <span class="number">0</span>? <span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(oDiv.offsetWidth == iTarget)&#123;</div><div class="line">                        clearInterval(timer);</div><div class="line"></div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        oDiv.style.width = oDiv.offsetWidth + iSpeed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdte7tjf8qg30ou0g00sy.gif" alt=""></p>
<p>下面我们对多个div进行运动</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            timer = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>( i = <span class="number">0</span>;i &lt; oDiv.length;i++)&#123;</div><div class="line"></div><div class="line">                <span class="comment">//为了给每个div加上自己的一个定时器属性，在移动的函数框架里面每次一处自己的定时器，不影响其他的定时器。防止出现鼠标切换div导致div停止运动。</span></div><div class="line">                oDiv[i].timer = <span class="literal">null</span>;</div><div class="line">                oDiv[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    startMove(<span class="keyword">this</span>,<span class="number">400</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                oDiv[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    startMove(<span class="keyword">this</span>,<span class="number">200</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj , iTarget</span>) </span>&#123;</div><div class="line">                clearInterval(obj.timer);</div><div class="line">                obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> iSpeed = (iTarget - obj.offsetWidth) / <span class="number">8</span>;</div><div class="line"></div><div class="line">                    iSpeed = iSpeed &gt; <span class="number">0</span>? <span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(obj.offsetWidth == iTarget)&#123;</div><div class="line">                        clearInterval(obj.timer);</div><div class="line"></div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        obj.style.width = obj.offsetWidth + iSpeed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdte9bxz5lg30ou0li753.gif" alt=""></p>
<p>同样的方式，我们也可以将alpha设置成一个div的属性：</p>
<p>多个div淡入淡出：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity:30);<span class="comment">/*IE用的*/</span></div><div class="line">            <span class="attribute">opacity </span>: <span class="number">0.3</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line">            <span class="keyword">var</span> alpha = <span class="number">30</span>;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; oDiv.length; i++)&#123;</div><div class="line">                oDiv[i].timer = <span class="literal">null</span>;</div><div class="line">                <span class="comment">//这里赋值属性alpha目的是为了在移动到另一个div的时候，这个div的alpha继续运动</span></div><div class="line">                oDiv[i].alpha = <span class="number">30</span>;</div><div class="line">                oDiv[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    startMove(<span class="keyword">this</span>,<span class="number">100</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                oDiv[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    startMove(<span class="keyword">this</span>,<span class="number">30</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, itarget</span>)</span>&#123;</div><div class="line"></div><div class="line">                clearInterval(obj.timer);</div><div class="line"></div><div class="line">                obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> iSpeed = (itarget - obj.alpha) / <span class="number">8</span>;</div><div class="line"></div><div class="line">                    iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(obj.alpha == itarget)&#123;</div><div class="line">                        clearInterval(obj.timer);</div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        obj.alpha += iSpeed;</div><div class="line">                        obj.style.filter = <span class="string">"alpha(opacity:"</span> + obj.alpha + <span class="string">")"</span>;</div><div class="line">                        obj.style.opacity = obj.alpha/<span class="number">100</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运动效果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdtezpawb7g30ou0liq3f.gif" alt=""></p>
<h1 id="任意值变化"><a href="#任意值变化" class="headerlink" title="任意值变化"></a>任意值变化</h1><blockquote>
<p>offsetWidth系列的BUG解决。由于offsetWidth实际上是由width+padding+border三部分组成的，所以有时候就会出现问题。所以真正在做项目的时候千万不要用。可以使用下面的例子中的方法:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span>&#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(obj.currentStyle)&#123;</div><div class="line">                <span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">false</span>)[attr];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</div><div class="line"></div><div class="line">            oDiv.style.width = <span class="built_in">parseInt</span>(getStyle(oDiv,<span class="string">"width"</span>)) - <span class="number">1</span> + <span class="string">"px"</span>;</div><div class="line"></div><div class="line">        &#125;,<span class="number">30</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdtfild54fg30ou0lit8z.gif" alt=""></p>
<p>下面我们实现任意值框架的制作：(不会使用offset系列)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"></div><div class="line">            oDiv[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="keyword">this</span>,<span class="string">"width"</span>,<span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            oDiv[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="keyword">this</span>,<span class="string">"height"</span>,<span class="number">200</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            oDiv[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="keyword">this</span>,<span class="string">"borderWidth"</span>,<span class="number">50</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            oDiv[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="keyword">this</span>,<span class="string">"fontSize"</span>,<span class="number">100</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(obj.currentStyle)&#123;</div><div class="line">                <span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">false</span>)[attr];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, attr ,iTarget</span>) </span>&#123;</div><div class="line">            clearInterval(obj.timer);</div><div class="line"></div><div class="line">            obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> icurrent = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">                <span class="keyword">var</span> iSpeed = (iTarget - icurrent) / <span class="number">8</span>;</div><div class="line"></div><div class="line">                iSpeed = iSpeed &gt; <span class="number">0</span>? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</div><div class="line">                <span class="keyword">if</span>(icurrent == iTarget)&#123;</div><div class="line">                    clearInterval(obj.timer);</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    obj.style[attr] = icurrent + iSpeed + <span class="string">"px"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;,<span class="number">30</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>www.feyddy.com<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdtg6as7erg30ou0limyz.gif" alt=""></p>
<p>但是我们这个有个小问题，那就是没有对透明度的问题进行处理：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-id">#div1</span> &#123;<span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">200px</span>; <span class="attribute">background</span>:red; <span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity:30); <span class="attribute">opacity</span>:<span class="number">0.3</span>;&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> oDiv=<span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">	oDiv.onmouseover=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		startMove(oDiv, <span class="string">'opacity'</span>, <span class="number">100</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	oDiv.onmouseout=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		startMove(oDiv, <span class="string">'opacity'</span>, <span class="number">30</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(obj.currentStyle)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[attr];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, attr, iTarget</span>)</span></div><div class="line">&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	obj.timer=setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> iCur=<span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)</div><div class="line">		&#123;</div><div class="line">			iCur=<span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(obj, attr))*<span class="number">100</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			iCur=<span class="built_in">parseInt</span>(getStyle(obj, attr));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> iSpeed=(iTarget-iCur)/<span class="number">8</span>;</div><div class="line">		iSpeed=iSpeed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(iCur==iTarget)</div><div class="line">		&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)</div><div class="line">			&#123;</div><div class="line">				obj.style.filter=<span class="string">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class="string">')'</span>;</div><div class="line">				obj.style.opacity=(iCur+iSpeed)/<span class="number">100</span>;</div><div class="line"></div><div class="line">				<span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>).value=obj.style.opacity;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				obj.style[attr]=iCur+iSpeed+<span class="string">'px'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;, <span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdtgddpbz0g30ou0li74k.gif" alt=""></p>
<p>这样就可以对透明度进行封装了。</p>
<blockquote>
<p>小数与整数判断的话，只要不是小数部位的值相等，会判断两者相等。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> b=<span class="number">3.10000000000000000001</span>;</div><div class="line">alert(a==b);<span class="comment">//true</span></div></pre></td></tr></table></figure>
</blockquote>
<h1 id="封装自己的运动框架"><a href="#封装自己的运动框架" class="headerlink" title="封装自己的运动框架"></a>封装自己的运动框架</h1><p>通过上面的例子已经出来了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(obj.currentStyle)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[attr];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, attr, iTarget</span>)</span></div><div class="line">&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	obj.timer=setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> iCur=<span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)</div><div class="line">		&#123;</div><div class="line">			iCur=<span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(obj, attr))*<span class="number">100</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			iCur=<span class="built_in">parseInt</span>(getStyle(obj, attr));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">var</span> iSpeed=(iTarget-iCur)/<span class="number">8</span>;</div><div class="line">		iSpeed=iSpeed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(iCur==iTarget)</div><div class="line">		&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)</div><div class="line">			&#123;</div><div class="line">				obj.style.filter=<span class="string">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class="string">')'</span>;</div><div class="line">				obj.style.opacity=(iCur+iSpeed)/<span class="number">100</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				obj.style[attr]=iCur+iSpeed+<span class="string">'px'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;, <span class="number">30</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="下面我们就用我们自己的运动框架做一个图片轮换播放器的例子"><a href="#下面我们就用我们自己的运动框架做一个图片轮换播放器的例子" class="headerlink" title="下面我们就用我们自己的运动框架做一个图片轮换播放器的例子"></a>下面我们就用我们自己的运动框架做一个图片轮换播放器的例子</h1><p>效果如下：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdtgmq4vfrg30ou0lix6q.gif" alt=""></p>
<p>demo下载地址：<a href="https://github.com/Feyddy/JSPictureWheel" target="_blank" rel="external">https://github.com/Feyddy/JSPictureWheel</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多物体运动 </tag>
            
            <tag> 图片轮播器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Socket(理论篇)]]></title>
      <url>http://yoursite.com/2017/03/18/Socket-%E7%90%86%E8%AE%BA%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h1><p>网络模型的出现，由于网络是一个比较复杂的系统，所以需要将网络进行分层，每一层规范相应的职能。正如一个公司越来越大时，会进行改革，也就是部门划分，员工制度规范。网络也是一样，为了维持网络的可持续发展，所以网络模型就出来。</p>
<p>网络模型有OSI参考模型（局域网）和TCP/IP参考模型：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdqoc9qr7mj30g20b8ab9.jpg" alt=""></p>
<a id="more"></a>
<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><blockquote>
<p>OSI参考模型，只是为实现网络交互建立一个参考标准</p>
</blockquote>
<p>其中OSI参考模型中分层的原则：</p>
<ul>
<li>网络中各结点都有相同的层次</li>
<li>不同结点相同层次具有相同的功能</li>
<li>同一结点相邻层间通过接口通信</li>
<li>每一层可以使用下层提供的服务，并向上层提供服务</li>
<li>不同结点的同等层间通过协议来实现对等层间的通信</li>
</ul>
<p>OSI参考模型各层职能</p>
<ol>
<li><p><strong>物理层</strong>:主要定义物理设备标准，如网线的接口类型、各种传输介质的传输速率等。主要作用是传输比特流(就是由1、0转化为电流强弱来进行传输，到达目的地后再转化为1、0，也就是常说的数模 与模数转换)。这一层的数据叫做比特(bit)，主要设备:集线器、网线。<em>网线-水晶头-指针排序是规定</em></p>
</li>
<li><p><strong>数据链路层</strong>:主要将从物理层接收的数据进行 MAC 地址的封装与解封装。常把这一层的数据叫做 帧，主要设备:网卡，交换机。<em>IP地址可以对mac地址进行绑定；交换机也可以实现路由的功能，三层交换机 -带来路由的功能</em></p>
</li>
<li><p><strong>网络层</strong>:选择合适的网间路由和交换结点， 确保数据及时传送，将从下层接收到的数据进行IP 地址的封装与解封装,称为 IP 协议。常把这一层数据叫做数据包，主要设备:路由器。<em>192.168.0.23 传输到 192.168.0.140 - 最好确保它们之间行走的距离短</em></p>
</li>
<li><p><strong>传输层</strong>:定义了一些传输数据的协议和端口，如 TCP、UDP 协议，主要将从下层接收的数据进行 分段和传输，到达目的地址后再进行重组，以往把这一层数据叫做段。<em>通过端口来识别发送的是哪个应用，所以微信不会把消息发送到QQ上</em></p>
</li>
</ol>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdqpb4lx4jj30jn0a7q45.jpg" alt=""></p>
<ol>
<li><strong>会话层</strong>:通过传输层建立数据传输通道。在系统之间发起会话或者接受会话请求(设备之间需要 互相认识)</li>
</ol>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdqs9ezx3uj30gw06ddgg.jpg" alt=""></p>
<ol>
<li><p><strong>表示层</strong>:主要是进行对接收的数据进行解释、压缩与解压缩等，即把计算机能够识别的东西转化 成人能够识别的东西(如图片、声音等)</p>
</li>
<li><p><strong>应用层</strong>:主要是一些终端的应用，比如说 FTP(各种文件下载)、浏览器、QQ 等，可以将其理解 为在电脑屏幕上可以看到的东西，也就是终端应用。</p>
</li>
</ol>
<h1 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h1><blockquote>
<p>TCP/IP参考模型是对OSI参考模型的简化</p>
</blockquote>
<h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><p>网络协议即网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为网络协议。</p>
<p>TCP/IP 协议是网络的基础，是 Internet 的语言，可以说没有 TCP/IP 协议就没有互联网的今天。</p>
<p><strong>IP是网络层,TCP是传输层,UDP也是传输层的,socket属于会话层</strong></p>
<h2 id="什么是-TCP-和-UDP-及区别"><a href="#什么是-TCP-和-UDP-及区别" class="headerlink" title="什么是 TCP 和 UDP 及区别"></a>什么是 TCP 和 UDP 及区别</h2><h3 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP(传输控制协议)"></a>TCP(传输控制协议)</h3><ul>
<li>建立连接，形成传输数据的通道</li>
<li>在连接中进行大数据传输(数据大小不受限制)</li>
<li>通过三次握手完成连接，是可靠协议，安全送达</li>
<li>必须建立连接，效率会稍低<ul>
<li>http就是基于tcp数据传输,每发送一次http请求就会建立三次握手；</li>
</ul>
</li>
</ul>
<h3 id="UDP-用户数据报协议"><a href="#UDP-用户数据报协议" class="headerlink" title="UDP(用户数据报协议)"></a>UDP(用户数据报协议)</h3><ul>
<li>将数据及源和目的封装成数据包中，不需要建立连接</li>
<li>每个数据包的大小限制在 64K 之内</li>
<li>因为无需连接，因此是不可靠协议，不安全</li>
<li>不需要建立连接，速度快</li>
</ul>
<p>典型的例子就是屏幕共享和手机发短信；</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdqq60um5vj30ii0d6gmn.jpg" alt=""></p>
<blockquote>
<p>UDP数据传输是不安全，对方收不收得都是不能保证</p>
</blockquote>
<h1 id="网络通讯要素"><a href="#网络通讯要素" class="headerlink" title="网络通讯要素"></a>网络通讯要素</h1><ul>
<li><p>IP地址(唯一标示网络设备的):</p>
<ul>
<li>网络中设备的标示</li>
<li>不易记忆，可以用主机名</li>
<li><p>本地回环地址:127.0.0.1 主机名:localhost</p>
<ul>
<li><p>本地回环地址可以测试网卡有没有问题</p>
<p><code>ping -c 4 127.0.0.1</code></p>
<p>结果如果ping不通，网卡坏了，或者网卡没插好。</p>
</li>
<li><p><code>ping -c 4 localhost</code>的时候，返回的IP地址是<code>127.0.0.1</code>的原因：本地存在一个<code>/etc/hosts</code>文件。</p>
<p>下面我们打开这个文件看看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMacBook-Air-2:~ Feyddy$ cat /etc/hosts</div><div class="line">##</div><div class="line"># Host Database</div><div class="line">#</div><div class="line"># localhost is used to configure the loopback interface</div><div class="line"># when the system is booting.  Do not change this entry.</div><div class="line">##</div><div class="line">127.0.0.1	localhost</div><div class="line">255.255.255.255	broadcasthost</div><div class="line">::1             localhost</div><div class="line">fe80::1%lo0	localhost</div></pre></td></tr></table></figure>
<p>我们可以发现里面有<code>127.0.0.1    localhost</code>。这就代表当我们ping<code>localhost</code>的时候，其实就代表了<code>127.0.0.1</code></p>
<p>当然我们可以更改<code>/etc/hosts</code>文件：</p>
<blockquote>
<p>sudo vi /etc/hosts</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">##</div><div class="line"># Host Database</div><div class="line">#</div><div class="line"># localhost is used to configure the loopback interface</div><div class="line"># when the system is booting.  Do not change this entry.</div><div class="line">##</div><div class="line">127.0.0.1       localhost</div><div class="line">255.255.255.255 broadcasthost</div><div class="line">::1             localhost</div><div class="line">fe80::1%lo0     localhost</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">~</div><div class="line">&quot;/etc/hosts&quot; 10L, 236C</div></pre></td></tr></table></figure>
<blockquote>
<p>按下键盘<code>i</code>让终端进入编辑模式。</p>
<p>输入输入127.0.0.1       www.baidu.com</p>
<p>按<code>:</code>,然后输入<code>wq</code>退出编辑</p>
</blockquote>
<p>这个时候如果我们用<code>ping -c 4 www.baidu.com</code>来访问百度的话实际上访问的就是<code>127.0.0.1</code></p>
</li>
<li><p>访问域名的流程</p>
<p>会优先查看本地的hosts文件中有没有该IP地址：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdqrmhyz1qj30ji0dxwgw.jpg" alt=""></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>端口号(定位程序)</p>
<ul>
<li>用于标示进程的逻辑地址，不同进程的标示</li>
<li>有效端口:0~65535，其中 0~1024 由系统使用或者保留端口，开发中不要使用 1024 以下的端口</li>
</ul>
</li>
<li><p>传输协议(用什么样的方式进行交互)</p>
<ul>
<li>通讯的规则</li>
<li>常见协议:TCP、UDP</li>
</ul>
</li>
</ul>
<blockquote>
<p>TCP和HTTP的区别：</p>
<p>TCP:传输协议(用什么样的方式进行交互)</p>
<p> HTTP:协议（数据格式）请求头”content-type” content-size 编码方式URL编码</p>
<p> 比如从广州到北京 坐飞机 高铁 火车（传输协议）</p>
<p> 到了北京后，进行交流用英语 国语，(HTTP)</p>
</blockquote>
<ul>
<li>URL(统一资源定位) <a href="http://ip:端口号/文件路径" target="_blank" rel="external">http://ip:端口号/文件路径</a></li>
</ul>
<blockquote>
<p>http 是数据传输格式协议，tcp 是数据传输方式，tcp 相当于邮寄信封或者是打电话,http 相当于信或者 打电话是英语还是国语沟通</p>
</blockquote>
<p><em>在开发过程中，经常发送HTTP请求，获取服务器返回的数据。访问不了数据问题可能是 “服务器没有开启”</em></p>
<p>这个时候我们就可以通过<code>Telnet</code>查看服务是否开启。</p>
<p><code>telnet IP 端口号</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMacBook-Air-2:~ Feyddy$ telnet 127.0.0.1 80</div><div class="line">Trying 127.0.0.1...</div><div class="line">telnet: connect to address 127.0.0.1: Connection refused</div><div class="line">telnet: Unable to connect to remote host</div></pre></td></tr></table></figure>
<p>我们可以看出本地的80端口没有开启。</p>
<p>当我们链接百度的IP地址的时候(端口也是80)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMacBook-Air-2:~ Feyddy$ ping -c 4 www.baidu.com</div><div class="line">PING www.a.shifen.com (115.239.210.27): 56 data bytes</div><div class="line">64 bytes from 115.239.210.27: icmp_seq=0 ttl=53 time=8.483 ms</div><div class="line">64 bytes from 115.239.210.27: icmp_seq=1 ttl=53 time=6.883 ms</div><div class="line">64 bytes from 115.239.210.27: icmp_seq=2 ttl=53 time=9.352 ms</div><div class="line">64 bytes from 115.239.210.27: icmp_seq=3 ttl=53 time=10.773 ms</div><div class="line"></div><div class="line">--- www.a.shifen.com ping statistics ---</div><div class="line">4 packets transmitted, 4 packets received, 0.0% packet loss</div><div class="line">round-trip min/avg/max/stddev = 6.883/8.873/10.773/1.410 ms</div><div class="line">xuzhonglindeMacBook-Air-2:~ Feyddy$ telnet 115.239.210.27 80</div><div class="line">Trying 115.239.210.27...</div><div class="line">Connected to 115.239.210.27.</div><div class="line">Escape character is &apos;^]&apos;.</div></pre></td></tr></table></figure>
<p>可以看出连接成功。</p>
<h1 id="Socket-套接字"><a href="#Socket-套接字" class="headerlink" title="Socket(套接字)"></a>Socket(套接字)</h1><ul>
<li>Socket 就是为网络服务提供的一种机制</li>
<li>通信的两端都是 Socket</li>
<li>网络通信其实就是 Socket 间的通信</li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdqpbz0a5kj30gx06baar.jpg" alt=""></p>
<ul>
<li>数据在两个 Socket 间通过 IO（输入输出流） 传输</li>
<li>HTTP 协议的传输实质就是 Socket 通信</li>
</ul>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdqsdw0yn0j30gt07t74r.jpg" alt=""></p>
<h2 id="模拟QQ聊天实现的socket流程"><a href="#模拟QQ聊天实现的socket流程" class="headerlink" title="模拟QQ聊天实现的socket流程"></a>模拟QQ聊天实现的socket流程</h2><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdqsj9c6mij30jl0c73zu.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdqsjy6mqdj30j00aq3zl.jpg" alt=""></p>
<h2 id="Socket通信流程图"><a href="#Socket通信流程图" class="headerlink" title="Socket通信流程图"></a>Socket通信流程图</h2><p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdqskmmk98j30a80aiabb.jpg" alt=""></p>
<h2 id="案例-简单聊天室"><a href="#案例-简单聊天室" class="headerlink" title="案例:简单聊天室"></a>案例:简单聊天室</h2><p>步骤:</p>
<blockquote>
<p>启动聊天服务器 Python chatserver.py</p>
<p>连接到主机，分配输入输出流空间</p>
<p>建立长连接CFStreamCreatePairWithSocketToHost</p>
<p>将C语言的输入输出流转成OC对象</p>
<p>设置代理监听输入输出流的状态</p>
<p>添加到主运行循环，否理代理不工作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[_inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];</div></pre></td></tr></table></figure>
<blockquote>
<p>打开输入输出流 &gt;登录发送</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString *loginStr = [NSString stringWithFormat:@&quot;iam:zhangsan&quot;];</div><div class="line">NSData *data = [loginStr dataUsingEncoding:NSUTF8StringEncoding]; [_outputStream write:data.bytes maxLength:data.length];</div></pre></td></tr></table></figure>
<blockquote>
<p>数据读取</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//建立个缓冲区来保存读取到的数据</div><div class="line">uint8_t buffer[1024]; //返回实际读取的数据长度</div><div class="line">NSInteger len = [_inputStream read:buffer</div><div class="line">maxLength:sizeof(buffer)];</div><div class="line">//有数据</div><div class="line">if (len &gt; 0) &#123;</div><div class="line">  NSString* receiver = [[NSString alloc] initWithBytes:buffer length:len</div><div class="line">encoding:NSUTF8StringEncoding];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>断开连接要关闭输入输出流并移除主运行循环</p>
</blockquote>
<h3 id="实现配置服务器"><a href="#实现配置服务器" class="headerlink" title="实现配置服务器"></a>实现配置服务器</h3><p>我们这里使用已经写好的一个Python文件：<code>chatserver.py</code>。它的详细代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> twisted.internet.protocol <span class="keyword">import</span> Protocol, Factory</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IphoneChat</span><span class="params">(Protocol)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="comment">#self.transport.write("""connected""")</span></div><div class="line">		self.factory.clients.append(self)</div><div class="line">		<span class="keyword">print</span> <span class="string">"clients are "</span>, self.factory.clients</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">connectionLost</span><span class="params">(self, reason)</span>:</span></div><div class="line">	    self.factory.clients.remove(self)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></div><div class="line">	    <span class="comment">#print "data is ", data</span></div><div class="line">		a = data.split(<span class="string">':'</span>)</div><div class="line">		<span class="keyword">if</span> len(a) &gt; <span class="number">1</span>:</div><div class="line">			command = a[<span class="number">0</span>]</div><div class="line">			content = a[<span class="number">1</span>]</div><div class="line"></div><div class="line">			msg = <span class="string">""</span></div><div class="line">			<span class="keyword">if</span> command == <span class="string">"iam"</span>:</div><div class="line">				self.name = content</div><div class="line">				msg = self.name + <span class="string">" has joined"</span></div><div class="line"></div><div class="line">			<span class="keyword">elif</span> command == <span class="string">"msg"</span>:</div><div class="line">				msg = self.name + <span class="string">": "</span> + content</div><div class="line"></div><div class="line">			<span class="keyword">print</span> msg</div><div class="line"></div><div class="line">			<span class="keyword">for</span> c <span class="keyword">in</span> self.factory.clients:</div><div class="line">				c.message(msg)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">message</span><span class="params">(self, message)</span>:</span></div><div class="line">		self.transport.write(message + <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line">factory = Factory()</div><div class="line">factory.protocol = IphoneChat</div><div class="line">factory.clients = []</div><div class="line"></div><div class="line">reactor.listenTCP(<span class="number">12345</span>, factory)</div><div class="line"><span class="keyword">print</span> <span class="string">"Iphone Chat server started"</span></div><div class="line">reactor.run()</div></pre></td></tr></table></figure>
<p>我们通过终端进入此文件的目录下，运行<code>python 文件名</code>开启ChatSever服务</p>
<blockquote>
<p>如果你本地没有文件，可以参考这篇博客：<a href="http://www.aichengxu.com/python/29129.htm" target="_blank" rel="external">点击这里</a></p>
<p>如果是MAC系统可能涉及到权限的问题，所以在上面的博客里，在安装的时候前面最好都加上<code>sudo</code>。</p>
</blockquote>
<h3 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h3><p><a href="http://192.168.0.1/login(后面的两个值为参数" target="_blank" rel="external">http://192.168.0.1/login(后面的两个值为参数</a>) 实现登录的功能：username passworld传给服务器<br>socket: 192.168.0.1:12345<br>登录指令：iam:Feyddy</p>
<h3 id="实现发送聊天功能"><a href="#实现发送聊天功能" class="headerlink" title="实现发送聊天功能"></a>实现发送聊天功能</h3><p>发送聊天数据指令：msg:xxxxx</p>
<p>下面开始进行小项目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">@interface ViewController ()&lt;NSStreamDelegate&gt;&#123;</div><div class="line">    NSInputStream * _inputStream;</div><div class="line">    NSOutputStream *_outputSteam;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">&#125;</div><div class="line"></div><div class="line">//连接服务器</div><div class="line">- (IBAction)connectToServer:(id)sender &#123;</div><div class="line">    //ios里实现sokcet的连接，使用C语言</div><div class="line"></div><div class="line">    // 1.与服务器通过三次握手建立连接</div><div class="line">    NSString *host = @&quot;127.0.0.1&quot;;//ip地址</div><div class="line">    int port = 12345;//端口号</div><div class="line"></div><div class="line">    // 2.定义输入输出流</div><div class="line">    CFReadStreamRef readStream;</div><div class="line">    CFWriteStreamRef writeStream;</div><div class="line"></div><div class="line">    // 3.分配输入输出流的内存空间</div><div class="line">    CFStreamCreatePairWithSocketToHost(NULL, (__bridge CFStringRef)host, port, &amp;readStream, &amp;writeStream);</div><div class="line"></div><div class="line">    // 4.把C语言的输入输出流转成OC对象</div><div class="line">    _inputStream = (__bridge NSInputStream *)readStream;</div><div class="line">    _outputSteam = (__bridge NSOutputStream *)(writeStream);</div><div class="line"></div><div class="line">    // 5.设置代理,监听数据接收的状态</div><div class="line">    _outputSteam.delegate = self;</div><div class="line">    _inputStream.delegate = self;</div><div class="line"></div><div class="line">    // 把输入输入流添加到主运行循环(RunLoop)</div><div class="line">    // 主运行循环是监听网络状态</div><div class="line">    [_outputSteam scheduleInRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];</div><div class="line">    [_inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];</div><div class="line"></div><div class="line"></div><div class="line">    // 6.打开输入输出流</div><div class="line">    [_inputStream open];</div><div class="line">    [_outputSteam open];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - NSStreamDelegate</div><div class="line">-(void)stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode&#123;</div><div class="line"></div><div class="line">//    NSStreamEventOpenCompleted = 1UL &lt;&lt; 0,</div><div class="line">//    NSStreamEventHasBytesAvailable = 1UL &lt;&lt; 1,</div><div class="line">//    NSStreamEventHasSpaceAvailable = 1UL &lt;&lt; 2,</div><div class="line">//    NSStreamEventErrorOccurred = 1UL &lt;&lt; 3,</div><div class="line">//    NSStreamEventEndEncountered = 1UL &lt;&lt; 4</div><div class="line"></div><div class="line">    switch (eventCode) &#123;</div><div class="line">        case NSStreamEventOpenCompleted:</div><div class="line">            NSLog(@&quot;%@&quot;,aStream);</div><div class="line">            NSLog(@&quot;成功连接建立，形成输入输出流的传输通道&quot;);</div><div class="line">            break;</div><div class="line"></div><div class="line">        case NSStreamEventHasBytesAvailable:</div><div class="line">            NSLog(@&quot;有数据可读&quot;);</div><div class="line">            [self readData];</div><div class="line">            break;</div><div class="line"></div><div class="line">        case NSStreamEventHasSpaceAvailable:</div><div class="line">            NSLog(@&quot;可以发送数据&quot;);</div><div class="line">            break;</div><div class="line"></div><div class="line">         case NSStreamEventErrorOccurred:</div><div class="line">            NSLog(@&quot;有错误发生，连接失败&quot;);</div><div class="line">            break;</div><div class="line"></div><div class="line">         case NSStreamEventEndEncountered:</div><div class="line">            NSLog(@&quot;正常的断开连接&quot;);</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//登录</div><div class="line">- (IBAction)loginBtnClick:(id)sender &#123;</div><div class="line">    //发送登录请求 使用输出流</div><div class="line"></div><div class="line">    //拼接登录的指令 iam:zhangsan</div><div class="line">    NSString * loginStr = @&quot;iam:zhangsan&quot;;</div><div class="line"></div><div class="line">    //uint8_t * 字符数组</div><div class="line">    NSData * data = [loginStr dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">    [_outputSteam write:data.bytes maxLength:data.length];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark 读取服务器返回的数据</div><div class="line">-(void)readData&#123;</div><div class="line"></div><div class="line">    //定义缓冲区 这个缓冲区只能存储1024字节</div><div class="line">    uint8_t buf[1024];</div><div class="line"></div><div class="line">    // 读取数据</div><div class="line">    // len为服务器读取到的实际字节数</div><div class="line">    NSInteger len = [_inputStream read:buf maxLength:sizeof(buf)];</div><div class="line"></div><div class="line">    // 把缓冲区里的实现字节数转成字符串</div><div class="line">    NSString * receiverStr = [[NSString alloc] initWithBytes:buf length:len encoding:NSUTF8StringEncoding];</div><div class="line">    NSLog(@&quot;%@&quot;,receiverStr);</div><div class="line"></div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python初识]]></title>
      <url>http://yoursite.com/2017/03/17/Python%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="为什么这么受欢迎？"><a href="#为什么这么受欢迎？" class="headerlink" title="为什么这么受欢迎？"></a>为什么这么受欢迎？</h2><p>面向对象，解释型计算机程序设计语言。</p>
<p>设计哲学：优雅，明确，简单，可读性强。<br>优点：功能强大，开发效率高，应用广泛，易上手，语法简洁。<br>用途：</p>
<ul>
<li>网页开发</li>
<li>可视化（GUI）界面开发</li>
<li>网络</li>
<li>系统编程</li>
<li>数据分析</li>
<li>机器学习</li>
<li>网络爬虫</li>
<li>科学计算</li>
</ul>
<p>哪些著名网站是用Python实现的？</p>
<ul>
<li>雅虎地图</li>
<li>谷歌中的很多组成部分</li>
<li>Youtube</li>
<li>豆瓣网</li>
</ul>
<a id="more"></a>
<h2 id="安装Python环境配置"><a href="#安装Python环境配置" class="headerlink" title="安装Python环境配置"></a>安装Python环境配置</h2><p>首先去Python官网下载安装包：<a href="https://www.python.org" target="_blank" rel="external">https://www.python.org</a>。</p>
<p>点击Downloads模块里面的MAC OSX系统（视情况而定）。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdf1eg9vbpj30eu0drmz3.jpg" alt=""></p>
<p>然后选择自己电脑相应的位数，例如我的是64位的。点击下载,安装。安装完成后你会发现：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdf2jftescj304i03o0t5.jpg" alt=""></p>
<p>这就是Python自带的IDEL。</p>
<h2 id="IDLE介绍"><a href="#IDLE介绍" class="headerlink" title="IDLE介绍"></a>IDLE介绍</h2><p>下面我们使用Python shell简单的编写python。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdf2qxrmwtj30gb04tq3q.jpg" alt=""></p>
<p>这就证明我们的Python已经成功安装在系统上面了。</p>
<p>下面介绍怎么建立具体的模块来运行代码。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdf2v6fg19j30fr07e76c.jpg" alt=""></p>
<p>然后会弹出下面的编辑窗口，然后我们进行简单的编辑：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdf2xt38acj30ge0hwzkp.jpg" alt=""></p>
<p>按command+s进行保存</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdf2y2tl69j30ga0hw0tg.jpg" alt=""></p>
<p>这样我们就完成了一个python文件的创建。</p>
<p>当然如果需要运行这个文件，我们可以直接点击<code>Run</code>,选择<code>Run Module</code>就可以了。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdf33zj20qj30gb02tjs5.jpg" alt=""></p>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdf34tn03aj30gc07wjsz.jpg" alt=""></p>
<p>上面的<code>Check Module</code>是用来检查是否存在语法错误。</p>
<p>IDLE比较简单，满足不了大型开发。下面介绍其他的编辑软件。</p>
<h2 id="PyDev介绍"><a href="#PyDev介绍" class="headerlink" title="PyDev介绍"></a>PyDev介绍</h2><ul>
<li>Eclipse</li>
<li>PyDev for Eclipse</li>
</ul>
<h2 id="下载Eclipse"><a href="#下载Eclipse" class="headerlink" title="下载Eclipse"></a>下载Eclipse</h2><ul>
<li><p>下载安装Java</p>
<p>  <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
</li>
<li><p>下载Eclipse</p>
<p>  <a href="http://www.pc6.com/mac/115396.html" target="_blank" rel="external">http://www.pc6.com/mac/115396.html</a></p>
</li>
</ul>
<h2 id="配置PyDev以及安装package"><a href="#配置PyDev以及安装package" class="headerlink" title="配置PyDev以及安装package"></a>配置PyDev以及安装package</h2><h3 id="介绍Python-interpreter"><a href="#介绍Python-interpreter" class="headerlink" title="介绍Python interpreter"></a>介绍Python interpreter</h3><p>代码解释器。所有的代码都需要通过它来执行。</p>
<h3 id="命令行中运行Python（配置环境变量）-mac里面内置有python"><a href="#命令行中运行Python（配置环境变量）-mac里面内置有python" class="headerlink" title="命令行中运行Python（配置环境变量）(mac里面内置有python)"></a>命令行中运行Python（配置环境变量）(mac里面内置有python)</h3><p>这里我们讲解下如何升级MAC里面自带的Python。</p>
<ul>
<li>先去python的官网下载最新的python(我这里下载的是3.6)，并安装好。现在要删除mac自带的python，如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -R /System/Library/Frameworks/Python.framework/Versions/2.7</div></pre></td></tr></table></figure>
<ul>
<li>把第一步里安装好的Python目录移到原本系统所持有的目录位置。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv /Library/Frameworks/Python.framework/Versions/3.6 /System/Library/Frameworks/Python.framework/Versions</div></pre></td></tr></table></figure>
<ul>
<li>第三步，修改文件所属的Group.设置Group为wheel，原来系统自带的就是这样的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R root:wheel /System/Library/Frameworks/Python.framework/Versions/3.6</div></pre></td></tr></table></figure>
<ul>
<li>第四步，更新一下Current的Link。在Versions的目录里有一个Current的link，是指向当前的Python版本，原始是指向系统自带的Python2.7.2，我们把它删除后，link就失效了，所以需要重新链一下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /System/Library/Frameworks/Python.framework/Versions/Current</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.6 /System/Library/Frameworks/Python.framework/Versions/Current</div></pre></td></tr></table></figure>
<ul>
<li><p>第五步，重新链接可执行文件</p>
<ul>
<li><p>先把系统原来的执行文件删掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo rm /usr/bin/pydoc</div><div class="line"></div><div class="line">sudo rm /usr/bin/python</div><div class="line"></div><div class="line">sudo rm /usr/bin/pythonw</div><div class="line"></div><div class="line">sudo rm /usr/bin/python-config</div></pre></td></tr></table></figure>
</li>
<li><p>建立新的链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.6/bin/pydoc3.6 /usr/bin/pydoc</div><div class="line"></div><div class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6 /usr/bin/python</div><div class="line"></div><div class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.6/bin/pythonw3.6 /usr/bin/pythonw</div><div class="line"></div><div class="line">sudo ln -s /System/Library/Frameworks/Python.framework/Versions/3.6/bin/python3.6m-config /usr/bin/python-config</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>最后，更新一下.bash_profile文件</p>
</li>
</ul>
<h3 id="配置Eclipse"><a href="#配置Eclipse" class="headerlink" title="配置Eclipse"></a>配置Eclipse</h3><ul>
<li><p>配置Eclipse中的java的路径(mac不需要配置)</p>
</li>
<li><p>测试java</p>
</li>
</ul>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdfpgvtm02j30mw0gognx.jpg" alt=""></p>
<h3 id="配置PyDev"><a href="#配置PyDev" class="headerlink" title="配置PyDev"></a>配置PyDev</h3><ul>
<li>在Eclipse里安装PyDev</li>
</ul>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdfpi1v7fcj30io08amzs.jpg" alt=""></p>
<p>然后点击<code>Add</code>按钮,并且在里面输入下图中的文字：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdfpmia08tj30in0algms.jpg" alt=""></p>
<p>我们发现Eclipse成功检测到</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdfpmwcjpsj30li092gme.jpg" alt=""></p>
<p>我们只需要选择下图中的就可以了</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdfpnylr82j30og05d3ys.jpg" alt=""></p>
<p>最后一步一步按照指示完成安装即可。</p>
<p>安装完成后，再新建的时候就会出现PyDev</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdfqkad0vyj30lx0gjdir.jpg" alt=""></p>
<p>下面我们新建一个Python文件</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdfqppocnbj30en0ix0uu.jpg" alt=""></p>
<p>然后我们点击上图中的蓝色字体，让Eclipse知道我们选择哪块Python interpreter</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdfqt7v531j30eg03lgm0.jpg" alt=""></p>
<p>为了快速，我们可以选择快速匹配。也可以手动。</p>
<p>完成后创建了项目。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdfr15zibnj306802yt8x.jpg" alt=""></p>
<p>下面我们开始新建一个基本模块</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdfr1i7xncj30g308bwg6.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdfr2mn971j30eo0ab3z6.jpg" alt=""></p>
<p>测试一下：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdfr449u96j30n10eiac6.jpg" alt=""></p>
<p>但是会出错</p>
<p><code>SyntaxError: Non-ASCII character &#39;\xe5&#39; in file /Users/admin/Documents/workspace/TestPython/PythonTest1.py on line 3, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details</code></p>
<p>这是因为我的代码里出现了中文编码<code>年月日</code>,所以需要在文件的第一行加上<code># -*- coding: UTF-8 -*-</code>。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdfrd7xea5j306v0fx3z4.jpg" alt=""></p>
<p>但是每创建一个文件就要粘贴一遍是在太烦了。下面我们来设置一下，一创建就自动添上这行代码。</p>
<p>在偏好设置里-&gt;<code>PyDev</code>-&gt;<code>Templates</code>-&gt;<code>&lt;Empty&gt;</code>-&gt;<code>Edit</code>-&gt;粘贴上<code># -*- coding: UTF-8 -*-</code></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdfrlo931vj30rf0dzgpb.jpg" alt=""></p>
<h2 id="Package以及数据类型"><a href="#Package以及数据类型" class="headerlink" title="Package以及数据类型"></a>Package以及数据类型</h2><h3 id="自带-built-in-package和外部-external-package"><a href="#自带-built-in-package和外部-external-package" class="headerlink" title="自带(built-in)package和外部(external)package"></a>自带(built-in)package和外部(external)package</h3><h4 id="自带的包的使用。下面通过举例说明"><a href="#自带的包的使用。下面通过举例说明" class="headerlink" title="自带的包的使用。下面通过举例说明"></a>自带的包的使用。下面通过举例说明</h4><p>新建一个PyDev Project。然后<code>import os</code>（这个os就是自带的package,import是引入的方式）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月9日</div><div class="line"></div><div class="line">@author: admin</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="comment"># 获取当前的路径</span></div><div class="line">print(os.getcwd())</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdg7778hn3j30ai01saaa.jpg" alt=""></p>
<h4 id="安装额外的package（package以及管理系统介绍：easy-install，pip）"><a href="#安装额外的package（package以及管理系统介绍：easy-install，pip）" class="headerlink" title="安装额外的package（package以及管理系统介绍：easy_install，pip）"></a>安装额外的package（package以及管理系统介绍：easy_install，pip）</h4><p>这两个工具3.4以上的版本就已经安装好了，只需要配置环境就可以直接使用。</p>
<ul>
<li>环境变量中配置easy_install，pip</li>
</ul>
<p>首先我们在终端中输入<code>easy_install</code>，可以发现已经安装好了，因为mac是需要权限的，所以执行下面的命令可以安装任何东西，包括pip。因为pip是easy_install的取代品。</p>
<p><code>sudo easy_install pip</code></p>
<p>然后输入电脑密码就可以了。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdg7tua3wmj30ft03iq3h.jpg" alt=""></p>
<ul>
<li>使用easy_install,pip安装package举例</li>
</ul>
<p>我们来安装一个<code>requests</code>。这个是用提供很多针对网页的抓取和函数。</p>
<p>在终端中输入<code>sudo pip install requests</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo pip install requests</div><div class="line">Password:</div><div class="line">The directory &apos;/Users/admin/Library/Caches/pip/http&apos; or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&apos;s -H flag.</div><div class="line">The directory &apos;/Users/admin/Library/Caches/pip&apos; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&apos;s -H flag.</div><div class="line">Collecting requests</div><div class="line">  Downloading requests-2.13.0-py2.py3-none-any.whl (584kB)</div><div class="line">    100% |████████████████████████████████| 593kB 598kB/s</div><div class="line">Installing collected packages: requests</div><div class="line">Successfully installed requests-2.13.0</div><div class="line">xuzhonglindeMacBook-Air-2:bin admin$</div></pre></td></tr></table></figure>
<p>安装成功，然后我们导入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMacBook-Air-2:workspace admin$ python</div><div class="line">Python 2.7.10 (default, Jul 30 2016, 19:40:32)</div><div class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>但是你会发现并没有用，因为这个只是操作的系统自带的python2.7.10的。</p>
<p>但是我们可以通过加后缀在操作我们刚刚下载的3.6的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">xuzhonglindeMacBook-Air-2:~ admin$ pip3 install requests</div><div class="line">Collecting requests</div><div class="line">  Using cached requests-2.13.0-py2.py3-none-any.whl</div><div class="line">Installing collected packages: requests</div><div class="line">Successfully installed requests-2.13.0</div><div class="line">xuzhonglindeMacBook-Air-2:~ admin$ python3</div><div class="line">Python 3.6.0 (v3.6.0:41df79263a11, Dec 22 2016, 17:23:13)</div><div class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这样我们刚刚下载的就可以导入了。</p>
<p>python就是2的版本,python3就是3的版本. pip是2的版本, pip3是3的版本.</p>
<p>下面开始举例应用它：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月9日</div><div class="line"></div><div class="line">@author: admin</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="comment"># 获取当前的路径</span></div><div class="line">print(os.getcwd())</div><div class="line"></div><div class="line">r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">print(r.url)<span class="comment">#返回url地址</span></div><div class="line">print(r.encoding)<span class="comment">#返回编码</span></div><div class="line">print(r.text)<span class="comment">#返回了内容</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/Users/admin/Documents/workspace/TeachingPython</div><div class="line">http://www.baidu.com/</div><div class="line">ISO-8859-1</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">。。。。</div></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="Numeric-数字型-：int（包含Boolean）-float-complex（复数）"><a href="#Numeric-数字型-：int（包含Boolean）-float-complex（复数）" class="headerlink" title="Numeric(数字型)：int（包含Boolean）,float,complex（复数）"></a>Numeric(数字型)：int（包含Boolean）,float,complex（复数）</h4><ul>
<li>int 长度不受限制</li>
<li>float 对应的是c语言的double，可查看具体范围：通过sys.float_info</li>
<li>complex:real(实部)，imaginary(虚部)，用z.real和z.imag来获取</li>
</ul>
<p>具体用法参考官方文件。</p>
<p>下面简单举几个小例子来了解一下Numeric类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月11日</div><div class="line"></div><div class="line">@author: admin</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="comment">#整型变量</span></div><div class="line">a = <span class="number">3</span><span class="comment">#声明变量的时候不需要申明类型，系统自动的判断</span></div><div class="line">b = <span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment">#浮点型变量</span></div><div class="line">c = <span class="number">5.66</span></div><div class="line">d = <span class="number">8.0</span></div><div class="line"></div><div class="line"><span class="comment">#复数变量complex(实部,虚部)</span></div><div class="line"><span class="comment">#float()强转成浮点型</span></div><div class="line">e = complex(c,d)</div><div class="line">f = complex(float(a),float(b))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#查询类型type()</span></div><div class="line">print(<span class="string">"a is type:"</span>,type(a))</div><div class="line">print(<span class="string">"a is type:"</span>,type(c))</div><div class="line">print(<span class="string">"a is type:"</span>,type(e))</div><div class="line"></div><div class="line">print(a+b)</div><div class="line">print(d / c)</div><div class="line">print(b/a)<span class="comment">#整数相除结果是浮点型</span></div><div class="line">print(b // a)<span class="comment">#取整数部分</span></div><div class="line">print(e)</div><div class="line">print(f-e)</div><div class="line"></div><div class="line"><span class="comment">#获取系统对浮点类型的详细信息</span></div><div class="line">print(sys.float_info)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a is type: &lt;class &apos;int&apos;&gt;</div><div class="line">a is type: &lt;class &apos;float&apos;&gt;</div><div class="line">a is type: &lt;class &apos;complex&apos;&gt;</div><div class="line">7</div><div class="line">1.4134275618374559</div><div class="line">1.3333333333333333</div><div class="line">1</div><div class="line">(5.66+8j)</div><div class="line">(-2.66-4j)</div><div class="line">sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)</div></pre></td></tr></table></figure>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>简单的来说，字符串就是一串字符。显示或者打印出来文字信息。<br>下面介绍几个知识点：</p>
<ul>
<li>表现形式：单引号，双引号，三引号。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月11日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line"><span class="comment">#单引号</span></div><div class="line">print(<span class="string">'My blog site is http://www.feyddy.com'</span>)</div><div class="line"></div><div class="line"><span class="comment">#双引号</span></div><div class="line">print(<span class="string">"My blog site is http://www.feyddy.com"</span>)</div><div class="line"></div><div class="line"><span class="comment">#三引号-输入换行显示</span></div><div class="line">print(<span class="string">'''My name is Feyddy,</span></div><div class="line">my realName is xuzhonglin,</div><div class="line">my blog site is http://www.feyddy.com''')</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">My blog site is http://www.feyddy.com</div><div class="line">My blog site is http://www.feyddy.com</div><div class="line">My name is Feyddy,</div><div class="line">my realName is xuzhonglin,</div><div class="line">my blog site is http://www.feyddy.com</div></pre></td></tr></table></figure>
<ul>
<li><p>如果想打印中文字符串需要在模块中第一行加上编码，编码是：<code># -*- coding: UTF-8 -*-</code>。</p>
</li>
<li><p>不可变（immutable）</p>
</li>
<li><p>Format字符串,对字符串的格式进行调整，让他打印出来我们需要的格式</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月11日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line">name = <span class="string">"Feyddy"</span></div><div class="line">site = <span class="string">"http://www.feyddy.com"</span></div><div class="line">print(<span class="string">"&#123;&#125; is blog site is &#123;&#125;"</span>.format(name, site))</div><div class="line">print(<span class="string">"&#123;0&#125; is blog site is &#123;1&#125;"</span>.format(name, site))</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Feyddy is blog site is http://www.feyddy.com</div><div class="line">Feyddy is blog site is http://www.feyddy.com</div></pre></td></tr></table></figure>
<ul>
<li>联合（前提必须保证所有的部分都是字符串,可以用<code>str()</code>将里面的值转成字符型`）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月11日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line">name = <span class="string">"Feyddy"</span></div><div class="line">age = <span class="number">25</span></div><div class="line">print(<span class="string">"My name is"</span> + <span class="string">" "</span> + name + <span class="string">". I am "</span> + str(age) + <span class="string">" years old"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">My name is Feyddy. I am 25 years old</div></pre></td></tr></table></figure>
<ul>
<li><p>换行符(<code>\n</code>)</p>
</li>
<li><p>字面常量（常量不会被改变）：如：6，34，“this is a”等，可以直接以字面的意义使用它们</p>
</li>
<li><p>变量：</p>
</li>
</ul>
<p>它是用来储存信息，属于identifier，也就是变量名。</p>
<p>命名规则：第一个字符必须是字母或者下划线，其余字符可以使字母，数字，或者下划线，区分大小写。</p>
<ul>
<li><p>注释：<code>#</code></p>
</li>
<li><p>缩进</p>
</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h3><h4 id="列表操作包含以下函数："><a href="#列表操作包含以下函数：" class="headerlink" title="列表操作包含以下函数："></a>列表操作包含以下函数：</h4><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fdp19kwmj9j30ow0df10f.jpg" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月14日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">from</span> _ast <span class="keyword">import</span> Num</div><div class="line">print(<span class="string">"今天我们学习数据结构列表"</span>);<span class="comment">#因为最上面第一行的设置，可以打印中文</span></div><div class="line"></div><div class="line"><span class="comment">#换行</span></div><div class="line">print(<span class="string">"今天我们学习这个\n明天我们学习那个"</span>);</div><div class="line"></div><div class="line"><span class="comment">#创建一个list</span></div><div class="line">number_list = [<span class="number">25</span>,<span class="number">26</span>,<span class="number">35</span>,<span class="number">36</span>];</div><div class="line">print(<span class="string">"number_list:"</span> + str(number_list));</div><div class="line"></div><div class="line">string_list = [<span class="string">"Feyddy"</span>,<span class="string">"xuzhonglin"</span>,<span class="string">"tom"</span>];</div><div class="line">print(<span class="string">"string_list:"</span> + str(string_list));</div><div class="line"></div><div class="line">mixed_list = [<span class="string">"Feyddy"</span>,<span class="number">25</span>];</div><div class="line">print(<span class="string">"mixed_list:"</span> + str(mixed_list));</div><div class="line"></div><div class="line"><span class="comment">#访问列表指定位置的元素</span></div><div class="line">print(<span class="string">"number_list的第一个："</span>+ str(number_list[<span class="number">0</span>]) + <span class="string">"，string_list的第二个："</span> + str(string_list[<span class="number">1</span>]) + <span class="string">"。mixed_list的名字："</span> + str(mixed_list[<span class="number">0</span>]) + <span class="string">",年龄："</span> + str(mixed_list[<span class="number">1</span>]));</div><div class="line"></div><div class="line"><span class="comment">#更新元素</span></div><div class="line">number_list[<span class="number">1</span>] = <span class="number">30</span>;</div><div class="line">print(<span class="string">"修改number_list第二个元素"</span> + str(number_list));</div><div class="line"></div><div class="line"><span class="comment">#删除元素</span></div><div class="line"><span class="keyword">del</span> number_list[<span class="number">1</span>];</div><div class="line">print(<span class="string">"删除number_list第二个元素"</span> + str(number_list));</div><div class="line"></div><div class="line"><span class="comment">#求list的长度</span></div><div class="line">print(<span class="string">"number_list的长度："</span> +str(len(number_list)));</div><div class="line"></div><div class="line"><span class="comment">#两个list中的元素相加合并</span></div><div class="line">number_list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">35</span>];</div><div class="line">print(number_list + number_list2);</div><div class="line"></div><div class="line"><span class="comment">#list中的元素进行加减乘除</span></div><div class="line">print(number_list[<span class="number">1</span>] *<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">#判断list中是否包含某个值</span></div><div class="line">print(<span class="number">34</span> <span class="keyword">in</span> number_list);</div><div class="line"></div><div class="line"><span class="comment">#截取元素</span></div><div class="line">print(number_list[<span class="number">1</span>]);<span class="comment">#正向截取</span></div><div class="line">print(number_list[<span class="number">-2</span>]);<span class="comment">#反向截取index</span></div><div class="line">print(number_list[<span class="number">1</span>:]);<span class="comment">#截取第二个之后所有的</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">今天我们学习数据结构列表</div><div class="line">今天我们学习这个</div><div class="line">明天我们学习那个</div><div class="line">number_list:[25, 26, 35, 36]</div><div class="line">string_list:[&apos;Feyddy&apos;, &apos;xuzhonglin&apos;, &apos;tom&apos;]</div><div class="line">mixed_list:[&apos;Feyddy&apos;, 25]</div><div class="line">number_list的第一个：25，string_list的第二个：xuzhonglin。mixed_list的名字：Feyddy,年龄：25</div><div class="line">修改number_list第二个元素[25, 30, 35, 36]</div><div class="line">删除number_list第二个元素[25, 35, 36]</div><div class="line">number_list的长度：3</div><div class="line">[25, 35, 36, 1, 2, 3, 4, 35]</div><div class="line">140</div><div class="line">False</div><div class="line">35</div><div class="line">35</div><div class="line">[35, 36]</div></pre></td></tr></table></figure>
<h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h3><ul>
<li>创建只有一个元素的Tuple，需要用逗号结尾消除歧义；</li>
<li>Tuple是不可变的list，一旦创建了一个tuple就不能以任何方式改变他；</li>
<li>Tuple与list的相同之处：<ul>
<li>整个元素集都是用小括号包含的；</li>
<li>都是按照定义的次序排序，索引也一样；</li>
<li>负数的索引都是从尾部开始的；</li>
<li>都可以用slice分片。注意当分割一个list时，会得到新的list，tuple也一样。</li>
</ul>
</li>
<li>Tuple不存在的方法：<ul>
<li>不能增减元素；<br>可以用in来查看一个元素是否存在与tuple中</li>
</ul>
</li>
<li>用Tuple的好处：<ul>
<li>比list操作快。遍历的时候尽量用Tuple；</li>
<li>因为不能修改，所以安全；</li>
<li>可以和list转换</li>
<li>可以一次赋多个值</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月14日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line"><span class="comment">#元祖</span></div><div class="line">a_tuple = (<span class="number">2</span>,);<span class="comment">#这里必须加上,避免歧义</span></div><div class="line">print(a_tuple);</div><div class="line"></div><div class="line"><span class="comment">#元组中的list</span></div><div class="line">mixed_tuple = (<span class="number">1</span>,<span class="number">2</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>]);</div><div class="line">print(mixed_tuple);</div><div class="line"></div><div class="line"><span class="comment">#修改元素。但是此时修改的并不是Tuple中的元素，而是list中的，对Tuple没有什么结构上的更改</span></div><div class="line">mixed_tuple[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'Feyddy'</span>;</div><div class="line">print(mixed_tuple);</div><div class="line"></div><div class="line"><span class="comment">#删除整个mixed_tuple，但是不能删除里面的某个元素，因为不能改变mixed_tuple</span></div><div class="line"><span class="comment"># del mixed_tuple</span></div><div class="line"><span class="comment"># print(mixed_tuple)</span></div><div class="line"></div><div class="line"><span class="comment">#获取长度</span></div><div class="line">print(len(mixed_tuple))</div><div class="line"><span class="comment">#相加</span></div><div class="line">print((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)+(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</div><div class="line"><span class="comment">#相乘</span></div><div class="line">print(<span class="string">'hello'</span> * <span class="number">4</span>)</div><div class="line"><span class="comment">#判断是否存在某个元素</span></div><div class="line">print(<span class="string">'a'</span> <span class="keyword">in</span> (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#截取元素</span></div><div class="line">print(mixed_tuple[<span class="number">1</span>]);<span class="comment">#正向截取</span></div><div class="line">print(mixed_tuple[<span class="number">-2</span>]);<span class="comment">#反向截取index</span></div><div class="line">print(mixed_tuple[<span class="number">1</span>:]);<span class="comment">#截取第二个之后所有的</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(2,)</div><div class="line">(1, 2, [&apos;a&apos;, &apos;b&apos;])</div><div class="line">(1, 2, [&apos;Feyddy&apos;, &apos;b&apos;])</div><div class="line">3</div><div class="line">(1, 2, 3, 4, 5, 6)</div><div class="line">hellohellohellohello</div><div class="line">True</div><div class="line">2</div><div class="line">2</div><div class="line">(2, [&apos;Feyddy&apos;, &apos;b&apos;])</div></pre></td></tr></table></figure>
<h2 id="字典Dictionary"><a href="#字典Dictionary" class="headerlink" title="字典Dictionary"></a>字典Dictionary</h2><p>基本语法：<code>key:value</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月16日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line"><span class="comment">#创建一个字典</span></div><div class="line">phone_book = &#123;<span class="string">"Feyddy"</span>:<span class="number">15757166448</span>,<span class="string">"YUHAO"</span>:<span class="number">13166253623</span>,<span class="string">"Crics"</span>:<span class="number">18555066961</span>&#125;</div><div class="line"></div><div class="line">mixed_dict = &#123;<span class="string">"Feyddy"</span>:<span class="string">"xuzhonglin"</span>,<span class="number">11</span>:<span class="number">11.5</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">#读取字典里的值</span></div><div class="line">print(<span class="string">"Feyddy is "</span> + mixed_dict[<span class="string">"Feyddy"</span>] + <span class="string">", his phone number is "</span>+ str(phone_book[<span class="string">"Feyddy"</span>]))</div><div class="line"></div><div class="line"><span class="comment">#修改字典里的值</span></div><div class="line">phone_book[<span class="string">"YUHAO"</span>] = <span class="number">1233124124124</span></div><div class="line">print(str(phone_book[<span class="string">"YUHAO"</span>]))</div><div class="line"></div><div class="line"><span class="comment">#添加一个值</span></div><div class="line">phone_book[<span class="string">"HAONAN"</span>] = <span class="number">18809593139</span></div><div class="line">print(str(phone_book))</div><div class="line"></div><div class="line"><span class="comment">#删除一个值</span></div><div class="line"><span class="keyword">del</span> phone_book[<span class="string">"YUHAO"</span>]</div><div class="line">print(str(phone_book))</div><div class="line"></div><div class="line"><span class="comment">#清空所有内容，但是字典还是存在的</span></div><div class="line">phone_book.clear()</div><div class="line">print(str(phone_book))</div><div class="line"></div><div class="line"><span class="comment">#键可以是元组</span></div><div class="line">phone_book = &#123;(<span class="string">"name"</span>):<span class="string">"Feyddy"</span>&#125;</div><div class="line">print(phone_book)</div><div class="line"></div><div class="line"><span class="comment">#删除整个字典</span></div><div class="line"><span class="keyword">del</span> phone_book</div><div class="line">print(str(phone_book))</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Feyddy is xuzhonglin, his phone number is 15757166448</div><div class="line">1233124124124</div><div class="line">&#123;&apos;Feyddy&apos;: 15757166448, &apos;YUHAO&apos;: 1233124124124, &apos;Crics&apos;: 18555066961, &apos;HAONAN&apos;: 18809593139&#125;</div><div class="line">&#123;&apos;Feyddy&apos;: 15757166448, &apos;Crics&apos;: 18555066961, &apos;HAONAN&apos;: 18809593139&#125;</div><div class="line">&#123;&#125;</div><div class="line">&#123;&apos;name&apos;: &apos;Feyddy&apos;&#125;</div><div class="line">	File &quot;/Users/admin/Documents/workspace/TeachingPython/5-Dictionary.py&quot;, line 33, in &lt;module&gt;</div><div class="line">    print(str(phone_book))</div><div class="line">NameError: name &apos;phone_book&apos; is not defined</div></pre></td></tr></table></figure>
<p>特性：</p>
<ul>
<li>不允许两个相同的键。如果出现两个相同的键指向不同的内容，那么系统会自动选择后面一个键指向的内容；</li>
<li>键必须是不可变的，不能用列表来充当键，可以用数字，字符串或者元组充当。</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的基本语法及用法"><a href="#函数的基本语法及用法" class="headerlink" title="函数的基本语法及用法"></a>函数的基本语法及用法</h3><p>函数：程序中可重复使用的程序段。<br>给一段程序起一个名字，用这个名字来执行一段程序，反复使用（调用函数）<br>用关键词<code>def</code>来定义，identifier(参数)</p>
<ul>
<li><p>identifier</p>
</li>
<li><p>参数list</p>
</li>
<li><p>return statement</p>
</li>
<li><p>局部变量vs全局变量</p>
</li>
</ul>
<p>定义函数的语法：</p>
<p><em>注意函数执行前面一定要有压根<code>TAB</code></em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></div><div class="line">	函数执行方法</div><div class="line"></div><div class="line">函数调用</div></pre></td></tr></table></figure>
<p>下面介绍几个函数的定义以及使用方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment">#函数的基本定义及实现，无参无返回值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_a</span><span class="params">()</span>:</span></div><div class="line">    a= <span class="number">100</span></div><div class="line">    print(a)</div><div class="line"></div><div class="line"><span class="comment">#函数调用</span></div><div class="line">print_a()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#函数传参1无返回值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sum</span><span class="params">(a,b)</span>:</span></div><div class="line">    sum = a+b</div><div class="line">    print(sum)</div><div class="line"></div><div class="line"><span class="comment">#函数调用</span></div><div class="line">print_sum(<span class="number">12</span>,<span class="number">23</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#函数传参2无返回值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span><span class="params">(name,blogSite)</span>:</span></div><div class="line">    print(<span class="string">"My name is "</span> + name + <span class="string">", my blogSite is "</span> + blogSite)</div><div class="line"></div><div class="line"><span class="comment">#函数调用</span></div><div class="line">print_str(<span class="string">"Feyddy"</span>,<span class="string">"www.Feyddy.com"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#函数传参有返回值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat_str</span><span class="params">(str,times)</span>:</span></div><div class="line">    repeated_str = str * times</div><div class="line">    <span class="keyword">return</span> repeated_str</div><div class="line"></div><div class="line"><span class="comment">#函数调用</span></div><div class="line">repeat_strResult = repeat_str(<span class="string">"Feyddy!"</span>,<span class="number">5</span>)</div><div class="line">print(repeat_strResult)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#全局变量x</span></div><div class="line">x = <span class="number">60</span></div><div class="line"></div><div class="line"><span class="comment">#函数定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">local_change_foo</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="comment">#全局变量传进去只能读取，修改不了它原本的值</span></div><div class="line">    print(<span class="string">"x is :"</span>+str(x))</div><div class="line">    <span class="comment">#局部变量，所以x的变化只在函数内部有用</span></div><div class="line">    x = <span class="number">30</span></div><div class="line">    print(<span class="string">"change local x to "</span>+str(x))</div><div class="line"></div><div class="line">local_change_foo(x)</div><div class="line"><span class="comment">#x还是60</span></div><div class="line">print(<span class="string">"x is still "</span>+ str(x))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#在函数里面修改全局变量的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_change_foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">#此时定义的x就是全局变量，所以接下来对x的改变会影响到全局的x值</span></div><div class="line">    <span class="keyword">global</span> x</div><div class="line">    print(<span class="string">"x is :"</span> + str(x))</div><div class="line">    x = <span class="number">3</span></div><div class="line">    print(<span class="string">"change local x to :"</span> + str(x))</div><div class="line"></div><div class="line">global_change_foo()</div><div class="line"><span class="comment">#x是3</span></div><div class="line">print(<span class="string">"x is :"</span>+ str(x))</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">100</div><div class="line">35</div><div class="line">My name is Feyddy, my blogSite is www.Feyddy.com</div><div class="line">Feyddy!Feyddy!Feyddy!Feyddy!Feyddy!</div><div class="line">x is :60</div><div class="line">change local x to 30</div><div class="line">x is still 60</div><div class="line">x is :60</div><div class="line">change local x to :3</div><div class="line">x is :3</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>默认参数：可以让多个参数都有默认值，但是默认值必须放在所有参数的最后面；</li>
<li>关键字参数：通过指定让某个参数等于多少，直接跨过中间的参数；而且指明赋值也可以不按照顺序来；</li>
<li>VarArgs参数:通过<code>*</code>和<code>**</code>，具体用法见下面的代码；</li>
</ul>
<p>下面结合具体的代码例子介绍这三种参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></div><div class="line"><span class="comment">#############参数###################</span></div><div class="line"><span class="comment">### 默认参数值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeart_str_default_param</span><span class="params">(str,times = <span class="number">2</span>)</span>:</span></div><div class="line">    repeated_str_default = str * times</div><div class="line">    <span class="keyword">return</span> repeated_str_default</div><div class="line"></div><div class="line"><span class="comment">#使用默认值</span></div><div class="line">repeated_str_default_Result = repeart_str_default_param(<span class="string">"Feyddy!"</span>)</div><div class="line">print(repeated_str_default_Result)</div><div class="line"></div><div class="line"><span class="comment">#不使用默认值</span></div><div class="line">repeated_str_default_Result2 = repeart_str_default_param(<span class="string">"Feyddy!"</span>,<span class="number">4</span>)</div><div class="line">print(repeated_str_default_Result2)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">### 关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword_func</span><span class="params">(name,age = <span class="number">25</span>,sex = <span class="string">"male"</span>)</span>:</span></div><div class="line">    print(<span class="string">"My name is "</span>, name , <span class="string">", my age is "</span> , age,<span class="string">'I am '</span>,sex)</div><div class="line"></div><div class="line"><span class="comment">#正常传参</span></div><div class="line">keyword_func(<span class="string">"Feyddy"</span>,<span class="number">28</span>)</div><div class="line"></div><div class="line"><span class="comment">#指明赋值</span></div><div class="line">keyword_func(<span class="string">"Feyddy"</span>,sex = <span class="string">"female"</span>)</div><div class="line"></div><div class="line"><span class="comment">#不按照顺序赋值</span></div><div class="line">keyword_func(sex = <span class="string">"female"</span>, name = <span class="string">"Feyddy"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">### VarArgs参数不定参数---`*`</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_params</span><span class="params">(name , *nums , **phones)</span>:</span></div><div class="line">    print(<span class="string">"name is "</span>+ str(name))</div><div class="line">    print(<span class="string">"nums is "</span>+ str(nums))</div><div class="line">    print(<span class="string">"phones is "</span>+ str(phones))</div><div class="line"></div><div class="line"><span class="comment">#如何判断nums和phones之间的分割数据，通过关键字phones，也就是说phones之后的都是属于phones这个里面的</span></div><div class="line"><span class="comment">#phones的使用类似于字典的使用key : value</span></div><div class="line">print_params(<span class="string">"Feyddy"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,phones = <span class="string">"Iphone"</span> ,ano_phones = <span class="string">"android"</span>,girlFriends = <span class="string">"nobody"</span>,second_girl=<span class="string">"still nobody"</span>)</div></pre></td></tr></table></figure></p>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Feyddy!Feyddy!</div><div class="line">Feyddy!Feyddy!Feyddy!Feyddy!</div><div class="line">(&apos;My name is &apos;, &apos;Feyddy&apos;, &apos;, my age is &apos;, 28, &apos;I am &apos;, &apos;male&apos;)</div><div class="line">(&apos;My name is &apos;, &apos;Feyddy&apos;, &apos;, my age is &apos;, 25, &apos;I am &apos;, &apos;female&apos;)</div><div class="line">(&apos;My name is &apos;, &apos;Feyddy&apos;, &apos;, my age is &apos;, 25, &apos;I am &apos;, &apos;female&apos;)</div><div class="line">name is Feyddy</div><div class="line">nums is (1, 2, 3, 4, 5)</div><div class="line">phones is &#123;&apos;phones&apos;: &apos;Iphone&apos;, &apos;second_girl&apos;: &apos;still nobody&apos;, &apos;girlFriends&apos;: &apos;nobody&apos;, &apos;ano_phones&apos;: &apos;android&apos;&#125;</div></pre></td></tr></table></figure>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="if-amp-for"><a href="#if-amp-for" class="headerlink" title="if &amp;for"></a>if &amp;for</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:UTF-8-*-</span></div><div class="line"></div><div class="line"><span class="comment">#####################If################################</span></div><div class="line"><span class="comment">#猜数字</span></div><div class="line">number = <span class="number">110</span></div><div class="line"><span class="comment">#input函数可以让用户在控制台输入内容</span></div><div class="line">guess = int(input(<span class="string">'请输入数字 :'</span>))</div><div class="line"></div><div class="line"><span class="comment">#if 判断</span></div><div class="line"><span class="keyword">if</span> guess == number:</div><div class="line">    <span class="comment">#执行操作</span></div><div class="line">    print(<span class="string">"Congratulation! "</span>)</div><div class="line"><span class="keyword">elif</span> guess &lt; number:</div><div class="line">    print(<span class="string">"your number is lower!"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"your number is higher!"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"Guess done!"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">请输入数字 :123                                                                                                            </div><div class="line">your number is higher!                                                                                                         </div><div class="line">Guess done!</div></pre></td></tr></table></figure>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:UTF-8-*-</span></div><div class="line"><span class="comment">#####################for################################</span></div><div class="line">print(<span class="string">"####################range遍历###############"</span>)</div><div class="line"><span class="comment">#range遍历</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">    print(i)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"The for loop is over!"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"####################list遍历###############"</span>)</div><div class="line"><span class="comment">#list遍历</span></div><div class="line">list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</div><div class="line">    print(i)</div><div class="line"></div><div class="line">print(<span class="string">"###################tuple遍历###############"</span>)</div><div class="line"><span class="comment">#tuple遍历</span></div><div class="line">tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple:</div><div class="line">    print(i)</div><div class="line"></div><div class="line">print(<span class="string">"###################Dictionary字典遍历方法一###############"</span>)</div><div class="line"><span class="comment">#Dictionary字典遍历方法一</span></div><div class="line">dict = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> dict:</div><div class="line">    print(ele)</div><div class="line">    print(dict[ele])</div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">"###################Dictionary字典遍历方法二###############"</span>)</div><div class="line"><span class="comment">#Dictionary字典遍历方法二</span></div><div class="line">dict = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">for</span> (key,value) <span class="keyword">in</span> dict.items():</div><div class="line">    print(key,value)</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">####################range历###############                     </div><div class="line">1                                                               </div><div class="line">2                                                               </div><div class="line">3                                                               </div><div class="line">4                                                               </div><div class="line">5                                                               </div><div class="line">6                                                               </div><div class="line">7                                                               </div><div class="line">8                                                               </div><div class="line">9                                                               </div><div class="line">The for loop is over!                                           </div><div class="line">####################list历###############                      </div><div class="line">a                                                               </div><div class="line">b                                                               </div><div class="line">c                                                               </div><div class="line">d                                                               </div><div class="line">###################tuple历###############                      </div><div class="line">1                                                               </div><div class="line">2                                                               </div><div class="line">3                                                               </div><div class="line">4                                                               </div><div class="line">5                                                               </div><div class="line">6                                                               </div><div class="line">###################Dictionary字典遍历方法一###############       </div><div class="line">a                                                               </div><div class="line">1                                                               </div><div class="line">c                                                               </div><div class="line">3                                                               </div><div class="line">b                                                               </div><div class="line">2                                                               </div><div class="line">###################Dictionary字典遍历方法二###############       </div><div class="line">(&apos;a&apos;, 1)                                                        </div><div class="line">(&apos;c&apos;, 3)                                                        </div><div class="line">(&apos;b&apos;, 2)</div></pre></td></tr></table></figure>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#-*-coding:UTF-8-*-</span></div><div class="line"></div><div class="line"><span class="comment">#########################while############################</span></div><div class="line"><span class="comment">#做个猜数字游戏，直到用户猜对为止</span></div><div class="line"></div><div class="line">number = <span class="number">60</span></div><div class="line">guess_flag = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> guess_flag == <span class="keyword">False</span>:</div><div class="line">    guess = int(input(<span class="string">"请输入您猜的数字："</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        guess_flag = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">elif</span> guess &gt; number:</div><div class="line">        print(<span class="string">"The number is higher than the right one"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"The number is lower than the right one"</span>)</div><div class="line">print(<span class="string">"congratulation!"</span>)</div><div class="line">print(<span class="string">"done!"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">请输入您猜的数字：56                                             </div><div class="line">The number is lower than the right one                          </div><div class="line">请输入您猜的数字：62                                             </div><div class="line">The number is higher than the right one                         </div><div class="line">请输入您猜的数字：60                                             </div><div class="line">congratulation!                                                 </div><div class="line">done!</div></pre></td></tr></table></figure>
<h3 id="break-amp-continue-amp-pass"><a href="#break-amp-continue-amp-pass" class="headerlink" title="break &amp; continue &amp; pass"></a>break &amp; continue &amp; pass</h3><ul>
<li>break跳出当前循环,执行循环后面的任务；</li>
<li>continue不执行当前这一次循环后面的内容,但是继续执行下一次循环；</li>
<li>pass继续执行当前这一次循环判断后面的内容,然后继续执行下一次循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#########################break&amp;continue#########################</span></div><div class="line">number = <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    guess = int(input(<span class="string">"请输入数字："</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">elif</span> guess &gt; number:</div><div class="line">        print(<span class="string">"The number is higher than the right one"</span>)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"The number is lower than the right one"</span>)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">print(<span class="string">"congratulation!"</span>)</div><div class="line">print(<span class="string">"done!"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">请输入数字：10                                                   </div><div class="line">The number is lower than the right one                          </div><div class="line">请输入数字：102                                                  </div><div class="line">The number is higher than the right one                         </div><div class="line">请输入数字：100                                                  </div><div class="line">congratulation!                                                 </div><div class="line">done!</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#continue和pass的区别</span></div><div class="line">number = <span class="number">100</span>;</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    guess = int(input(<span class="string">"请输入数字："</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">elif</span> guess &gt; number:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">        print(<span class="string">"The number is higher than the right one"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">        print(<span class="string">"The number is lower than the right one"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"congratulation!"</span>)</div><div class="line">print(<span class="string">"done!"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">请输入数字：16                                                   </div><div class="line">The number is lower than the right one                          </div><div class="line">请输入数字：120                                                  </div><div class="line">请输入数字：100                                                  </div><div class="line">congratulation!                                                 </div><div class="line">done!</div></pre></td></tr></table></figure>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入输入方式介绍（Output-Format）"><a href="#输入输入方式介绍（Output-Format）" class="headerlink" title="输入输入方式介绍（Output Format）"></a>输入输入方式介绍（Output Format）</h3><p>接受用户的输入： `input()``</p>
<p>输入格式：<code>str().format</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:UTF-8-*-</span></div><div class="line"></div><div class="line"><span class="comment">####################输入输入方式介绍#########################</span></div><div class="line"></div><div class="line">name = input(<span class="string">"请输入你的姓名:"</span>)<span class="comment">#此时如果输入字符串需要加上双引号，而且里面的冒号必须是英文格式下的。否则报错</span></div><div class="line">age = input(<span class="string">"请输入你的年龄:"</span>)</div><div class="line"></div><div class="line">print(<span class="string">"你叫："</span> + name + <span class="string">",你今年"</span> + str(age) + <span class="string">"岁。你今年犯桃花"</span>)</div><div class="line">print(<span class="string">"你叫:&#123;&#125;,你今年&#123;&#125;岁。你今年犯桃花"</span>).format(name,age)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">请输入你的姓名:&quot;Feyddy&quot;                                          </div><div class="line">请输入你的年龄:25                                                </div><div class="line">你叫：Feyddy,你今年25岁。你今年犯桃花                            </div><div class="line">你叫:Feyddy,你今年25岁。你今年犯桃花</div></pre></td></tr></table></figure>
<h3 id="文件写入读取方式介绍"><a href="#文件写入读取方式介绍" class="headerlink" title="文件写入读取方式介绍"></a>文件写入读取方式介绍</h3><p>读取文件：<code>open</code></p>
<p>写入文件:：<code>write</code></p>
<p>关闭文件：<code>close</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####################文件写入读出方式介绍#########################</span></div><div class="line"><span class="comment">#创建文件open然后写入(创建文件的路径以及文件名,文件当前的模式)</span></div><div class="line">f = open(<span class="string">"PythonText.txt"</span>,<span class="string">"w"</span>)<span class="comment">#创建了一个名为"PythonText.txt"的文本文件，并且可以写。</span></div><div class="line">f.write(<span class="string">"Feyddy's blogSite is www.Feyddy.com"</span>)<span class="comment">#此时你会发现文本中出现了你写的内容</span></div><div class="line">f.close()<span class="comment">#关闭文件，这个时候你就不能修改这个文件了。</span></div><div class="line"></div><div class="line"><span class="comment">#读出文件内容</span></div><div class="line">f = open(<span class="string">"PythonText.txt"</span>)<span class="comment">#默认为可读状态'r'</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()</div><div class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(line)</div><div class="line"></div><div class="line">f.close()</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdpyea72hvj30ag01fq2y.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Feyddy&apos;s blogSite is www.Feyddy.</div></pre></td></tr></table></figure>
<h2 id="错误与异常处理-Error-amp-Exceptions"><a href="#错误与异常处理-Error-amp-Exceptions" class="headerlink" title="错误与异常处理(Error &amp; Exceptions)"></a>错误与异常处理(Error &amp; Exceptions)</h2><h3 id="Python-有两种错误类型："><a href="#Python-有两种错误类型：" class="headerlink" title="Python 有两种错误类型："></a>Python 有两种错误类型：</h3><ul>
<li>语法错误(Syntax Error)</li>
<li>异常(Error)</li>
</ul>
<p>首先，try语句下的（try和except之间的代码）被执行；<br>如果没有出现异常，except语句将被忽略；<br>如果try语句之间出现了异常，try之下异常之后的代码将被忽略，直接跳跃到except语句；<br>如果异常出现，但并不属于except中定义的异常类型，程序将被执行外围一片的try语句；<br>如果异常没有被处理，将产生unhandled exception的错误。</p>
<h3 id="处理异常（Handling-Exceptions）"><a href="#处理异常（Handling-Exceptions）" class="headerlink" title="处理异常（Handling Exceptions）"></a>处理异常（Handling Exceptions）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####################处理异常###############</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        x = int(input(<span class="string">"请输入年龄:"</span>))</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        print(<span class="string">"您输入的不是数字，请重新输入！"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">请输入年龄:&quot;asd&quot;                                                 </div><div class="line">您输入的不是数字，请重新输入！                                   </div><div class="line">请输入年龄:25</div></pre></td></tr></table></figure>
<p>下面介绍一个小例子：</p>
<p>先创建一个文件：<code>PythonText.txt</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:UTF-8-*-</span></div><div class="line"><span class="comment">##################系统异常和值异常#############</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">"PythonText.txt"</span>)</div><div class="line">    s = f.readline()</div><div class="line">    i = int(s.strip())<span class="comment">#strip()为了让文字前面的空格移除</span></div><div class="line">    print(<span class="string">"数字为："</span> + str(i))</div><div class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> err:<span class="comment">#出现系统错误：比如文件不存在</span></div><div class="line">    print(<span class="string">"IO error:&#123;&#125;"</span>.format(err))</div><div class="line"><span class="keyword">except</span> ValueError:</div><div class="line">    print(<span class="string">"Could not convert data to integer!"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>首先我们先将文件名改成一个没有的,如：<code>PythonTex.txt</code>，这个时候就找不到这个文件，就会走系统异常<code>IOError</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IO error:[Errno 2] No such file or directory: &apos;PythonTex.txt&apos;</div></pre></td></tr></table></figure>
<ul>
<li>下面我们把文件名改正确，然后在里面写上：<code>Feyddy&#39;s blogSite is www.Feyddy.comwelcome to visit</code>。此时里面的字符串无法转变成整形。就会走<code>ValueError</code>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not convert data to integer!</div></pre></td></tr></table></figure>
<ul>
<li>然后我们将文件里的内容转化成<code>33</code>。这个时候就不会走异常处理了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">数字为：33</div></pre></td></tr></table></figure>
<h2 id="面向对象处理"><a href="#面向对象处理" class="headerlink" title="面向对象处理"></a>面向对象处理</h2><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>Python支持面向对象编程</p>
<p>类(class):现实世界中一些事物的封装<br>类：属性</p>
<p>类对象<br>实例对象</p>
<p>引用：通过引用对类的属性和方法进行操作<br>实例化：创建一个类的具体实例对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:UTF-8-*-</span></div><div class="line"></div><div class="line"><span class="comment">##创建一个学生类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></div><div class="line">    <span class="comment">#当我们实例化一个类的对象的时候，会自动调用__init__这个函数</span></div><div class="line">    <span class="comment">#self表示当前的这个类</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name,grade)</span>:</span><span class="comment">#定义两个属性name和grade</span></div><div class="line">        self.name = name</div><div class="line">        self.grade = grade</div><div class="line">    <span class="comment">#自定义的一个介绍自己的方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">introduce</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"My name is "</span> + self.name)</div><div class="line">        print(<span class="string">"My grade is "</span> + str(self.grade))</div><div class="line">    <span class="comment">#定义的一个改变成绩的方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">improve</span><span class="params">(self,amount)</span>:</span></div><div class="line">        self.grade += amount</div><div class="line"></div><div class="line"><span class="comment">#初始化创建一个Student对象</span></div><div class="line">feyddy = Student(<span class="string">"Feyddy"</span>,<span class="number">125</span>)</div><div class="line"><span class="comment">#调用介绍自己的方法</span></div><div class="line">feyddy.introduce()</div><div class="line"><span class="comment">#调用提高成绩的方法</span></div><div class="line">feyddy.improve(<span class="number">20</span>)</div><div class="line"><span class="comment">#调用介绍自己的方法</span></div><div class="line">feyddy.introduce()</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">My name is Feyddy                                    </div><div class="line">My grade is 125                                      </div><div class="line">My name is Feyddy                                    </div><div class="line">My grade is 145</div></pre></td></tr></table></figure>
<h3 id="装饰器（decorator）"><a href="#装饰器（decorator）" class="headerlink" title="装饰器（decorator）"></a>装饰器（decorator）</h3><ul>
<li>普通的函数嵌套<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*-coding:UTF-8-*-</span></div><div class="line"></div><div class="line"><span class="comment">###普通调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_candles</span><span class="params">(cake_func)</span>:</span><span class="comment">#参数是一个函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_candles</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> cake_func() + <span class="string">"candles"</span></div><div class="line">    <span class="keyword">return</span> insert_candles</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_cake</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"cake"</span></div><div class="line"></div><div class="line">gift_func = add_candles(make_cake)</div><div class="line">print(make_cake())</div><div class="line">print(gift_func())</div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cake                                               </div><div class="line">cakecandles</div></pre></td></tr></table></figure>
<ul>
<li>装饰器的使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_candles</span><span class="params">(cake_func)</span>:</span><span class="comment">#参数是一个函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_candles</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> cake_func() + <span class="string">" candles"</span></div><div class="line">    <span class="keyword">return</span> insert_candles</div><div class="line"><span class="comment">#`@`就是装饰器</span></div><div class="line"><span class="meta">@add_candles</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_cake</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"cake"</span></div><div class="line"></div><div class="line">print(make_cake())</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cake candles</div></pre></td></tr></table></figure>
<h2 id="图形界面-GUI-和猜数字游戏"><a href="#图形界面-GUI-和猜数字游戏" class="headerlink" title="图形界面(GUI)和猜数字游戏"></a>图形界面(GUI)和猜数字游戏</h2><h3 id="图形界面介绍GuiTkinter"><a href="#图形界面介绍GuiTkinter" class="headerlink" title="图形界面介绍GuiTkinter"></a>图形界面介绍GuiTkinter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月17日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">import</span> tkinter.simpledialog <span class="keyword">as</span> dl</div><div class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> mb</div><div class="line"><span class="keyword">from</span> cProfile <span class="keyword">import</span> label</div><div class="line"></div><div class="line"><span class="comment">#设置GUI</span></div><div class="line">root = Tk()</div><div class="line">w = Label(root, text = <span class="string">"Feyddy"</span>)</div><div class="line">w.pack()<span class="comment">#让文字自适应label大小</span></div><div class="line"></div><div class="line"><span class="comment">#欢迎消息</span></div><div class="line"><span class="comment">#给用户展示信息</span></div><div class="line">mb.showinfo(<span class="string">"welcom"</span>, <span class="string">"Message"</span>)</div><div class="line"><span class="comment">#提供用户输入的对话框</span></div><div class="line">guess = dl.askinteger(<span class="string">"Number"</span>, <span class="string">"Enter a number"</span>)</div><div class="line"></div><div class="line">output = <span class="string">"This is output message"</span></div><div class="line">mb.showinfo(<span class="string">"output:"</span>, output)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fdq82je54ij301m01aaa0.jpg" alt=""></p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdq82s29hhj30bv04ct8w.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdq82v6a7rj307903hq32.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdq82xu3yhj30bo04jaaf.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdq8314rs8j30bt04b74i.jpg" alt=""></p>
<h3 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h3><ol>
<li>GUI</li>
<li>逻辑层</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-  </span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2017年3月17日</div><div class="line"></div><div class="line">@author: Feyddy</div><div class="line">'''</div><div class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="keyword">import</span> tkinter.simpledialog <span class="keyword">as</span> dl</div><div class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> mb</div><div class="line"><span class="keyword">from</span> cProfile <span class="keyword">import</span> label</div><div class="line"></div><div class="line"><span class="comment">#设置GUI</span></div><div class="line">root = Tk()</div><div class="line">w = Label(root, text = <span class="string">"Guess Number Game!"</span>)</div><div class="line">w.pack()<span class="comment">#让文字自适应label大小</span></div><div class="line"></div><div class="line">number = <span class="number">59</span></div><div class="line"></div><div class="line"><span class="comment">#欢迎消息</span></div><div class="line"><span class="comment">#给用户展示信息</span></div><div class="line">mb.showinfo(<span class="string">"Welcome"</span>, <span class="string">"Welcome to Guess Number Game"</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment">#用户输入信息</span></div><div class="line">    guess = dl.askinteger(<span class="string">"Number"</span>,<span class="string">"What's your guess?"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        output = <span class="string">"Congratulation!"</span></div><div class="line">        mb.showinfo(<span class="string">"Hint"</span>,output)</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">elif</span> guess &lt; number:</div><div class="line">        output = <span class="string">"Sorry ,the number is higher than yours!"</span></div><div class="line">        mb.showinfo(<span class="string">"Hint"</span>,output)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        output = <span class="string">"Sorry ,the number is higher than yours!"</span></div><div class="line">        mb.showinfo(<span class="string">"Hint"</span>,output)</div><div class="line"></div><div class="line">print(<span class="string">"Done"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdq98aeal6j304501ct8q.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdq98pyjc5j30bo04ajrm.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdq98j9lx1j307503djrj.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdq98sqluej30bs049q36.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdq98z9tbxj307603aaa7.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdq99e1wzbj30bp0460sy.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdq99gsbuuj307703amxb.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdq99jgvx0j30bq0480sw.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python初识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript运动事件(基础篇)]]></title>
      <url>http://yoursite.com/2017/03/16/JavaScript%E8%BF%90%E5%8A%A8%E4%BA%8B%E4%BB%B6-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fdohk1o31oj30ox0osadz.jpg" alt=""></p>
<a id="more"></a>
<h1 id="运动基础-div移动"><a href="#运动基础-div移动" class="headerlink" title="运动基础-div移动"></a>运动基础-div移动</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>div移动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;<span class="comment">//创建一个定时器对象。方便后面对定时器的存在与否进行设置</span></div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startMove(<span class="number">7</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//封装一个移动函数</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iSpeed</span>) </span>&#123;<span class="comment">//iSpeed移动的速度也就是定时器中每次加多少像素</span></div><div class="line"></div><div class="line">                clearInterval(timer);<span class="comment">//防止多次点击按钮定时器相加，移动速度变快</span></div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                   <span class="keyword">if</span>(oDiv.offsetLeft &gt;= <span class="number">300</span>)<span class="comment">//一定要是大于等于，因为如果==300如果速度不能被整除就不会停了</span></div><div class="line">                   &#123;</div><div class="line">                       clearInterval(timer);<span class="comment">//在大于等于300像素的时候清除定时器</span></div><div class="line">                   &#125;<span class="keyword">else</span></div><div class="line">                   &#123;</div><div class="line">                       oDiv.style.left = oDiv.offsetLeft + iSpeed + <span class="string">"px"</span>;<span class="comment">//offsetLeft就是指当前的div的左边距</span></div><div class="line">                   &#125;</div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"开始运动"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdojpp1zljg30ou0g00sz.gif" alt=""></p>
<p>这里的<code>startMove</code>函数其实就是一个运动框架。</p>
<h1 id="运动框架的应用"><a href="#运动框架的应用" class="headerlink" title="运动框架的应用"></a>运动框架的应用</h1><h2 id="分享侧边栏实例"><a href="#分享侧边栏实例" class="headerlink" title="分享侧边栏实例"></a>分享侧边栏实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>分享到运动框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: -<span class="number">100px</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#div1</span> <span class="selector-tag">span</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">left</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">top</span>: <span class="number">70px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">            oDiv.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startMove(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">            oDiv.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startMove(<span class="number">-100</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line">                clearInterval(timer);</div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> iSpeed;</div><div class="line">                    <span class="keyword">if</span>(oDiv.offsetLeft &lt; iTarget)&#123;</div><div class="line">                        iSpeed = <span class="number">10</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        iSpeed = <span class="number">-10</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(oDiv.offsetLeft == iTarget)&#123;</div><div class="line">                        clearInterval(timer);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        oDiv.style.left = oDiv.offsetLeft + iSpeed + <span class="string">'px'</span>;</div><div class="line">                    &#125;</div><div class="line"><span class="number">1</span>                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>分享到<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：<br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdoli2scdyg30ou0g0jru.gif" alt=""></p>
<h2 id="淡入淡出的图片"><a href="#淡入淡出的图片" class="headerlink" title="淡入淡出的图片"></a>淡入淡出的图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>淡入淡出图片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#img1</span> &#123;</div><div class="line">            <span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity:30);<span class="comment">/*IE用的*/</span></div><div class="line">            <span class="attribute">opacity </span>: <span class="number">0.3</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">var</span> oImg = <span class="built_in">document</span>.getElementById(<span class="string">'img1'</span>);</div><div class="line"></div><div class="line"></div><div class="line">            oImg.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startChangeAlpha(<span class="number">1</span>,<span class="number">30</span>,<span class="number">100</span>);</div><div class="line">            &#125;</div><div class="line">            oImg.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startChangeAlpha(<span class="number">-1</span>,<span class="number">100</span>,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startChangeAlpha</span>(<span class="params">iSpeed,startAlpha,iTarget</span>) </span>&#123;<span class="comment">//参数解释：变化的速度，开始的alpha，目标alpha值</span></div><div class="line">                clearInterval(timer);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> oAlpha = startAlpha;<span class="comment">//因为没有offsetAlpha类似的方法获取他的透明度，所以需要通过一个值将它取出来。</span></div><div class="line"></div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(oAlpha == iTarget)&#123;</div><div class="line">                        clearInterval(timer);</div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        oAlpha += iSpeed;</div><div class="line">                        oImg.style.filter = <span class="string">"alpha(opacity:"</span>+oAlpha+<span class="string">")"</span>;</div><div class="line">                        oImg.style.opacity = oAlpha/<span class="number">100</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;,<span class="number">30</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Desert.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：<br><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdomppwlnig30ou0g01ky.gif" alt=""></p>
<h1 id="缓冲运动"><a href="#缓冲运动" class="headerlink" title="缓冲运动"></a>缓冲运动</h1><p>缓冲变慢：</p>
<p>越接近终点，速度越小；距离越大，速度越大；距离越小，速度越小。</p>
<h2 id="div缓冲运动"><a href="#div缓冲运动" class="headerlink" title="div缓冲运动"></a>div缓冲运动</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缓冲运动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line"></div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startMove(<span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line">                clearInterval(timer);</div><div class="line"></div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">var</span> iSpeed = (iTarget - oDiv.offsetLeft)/<span class="number">8</span>;<span class="comment">//动态改变速度就可以了。</span></div><div class="line">                    <span class="keyword">if</span>(oDiv.offsetLeft == iTarget)&#123;</div><div class="line">                        clearInterval(timer);</div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        oDiv.style.left = oDiv.offsetLeft + iSpeed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"开始运动"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fdoygdeep0g30n10esjre.gif" alt=""></p>
<p>看上去效果不错，但是里面有个小问题：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缓冲运动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line"></div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startMove(<span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line">                clearInterval(timer);</div><div class="line"></div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">var</span> iSpeed = (iTarget - oDiv.offsetLeft)/<span class="number">8</span>;<span class="comment">//动态改变速度就可以了。</span></div><div class="line">                    <span class="keyword">if</span>(oDiv.offsetLeft == iTarget)&#123;</div><div class="line">                        clearInterval(timer);</div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        oDiv.style.left = oDiv.offsetLeft + iSpeed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">document</span>.title = iSpeed + <span class="string">"距离"</span> + oDiv.offsetLeft;</div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"开始运动"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width: 1px;height: 300px;background-color:orange;position: absolute;left: 300px;top: 10px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fdoyomzo3og30n10esju4.gif" alt=""></p>
<p>我们可以看到：速度到了后面就是小数了,div距离左边到达297的位置之后就不运动了，而且移动的div并没有完全和那条线重合。这是因为，计算机不会识别小数。当我们运行到<code>297 + iSpeed</code>的时候因为<code>iSpeed</code>是小数，计算机就自动忽略了。所以不会加上去。</p>
<p>这个时候我们需要用到两个函数：<code>Math.ceil()</code>向上取整和<code>Math.floor()</code>向下取整。所以我们需要将上面代码中的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">oDiv.style.left = oDiv.offsetLeft + iSpeed  + <span class="string">"px"</span>;</div></pre></td></tr></table></figure>
<p>改成：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">oDiv.style.left = oDiv.offsetLeft + <span class="built_in">Math</span>.ceil(iSpeed)  + <span class="string">"px"</span>;<span class="comment">//速度向上取整</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fdoyunxa28g30n10esacu.gif" alt=""></p>
<p>看上去完美，但是如果我已开始就把div放在竖线的右边呢？比如，我把div的<code>left</code>属性改成<code>500px</code>。</p>
<p>结果就会如下：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fdoz36t158g30n10es77q.gif" alt=""></p>
<p>你会发现，这个时候，运动到307就停止了。此时我们就需要完善一下我们的代码；</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缓冲运动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: <span class="number">500px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line"></div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                startMove(<span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line">                clearInterval(timer);</div><div class="line"></div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">var</span> iSpeed = (iTarget - oDiv.offsetLeft)/<span class="number">8</span>;<span class="comment">//动态改变速度就可以了。</span></div><div class="line"></div><div class="line">                    iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line"><span class="comment">//                    if(iSpeed &gt; 0)&#123;</span></div><div class="line"><span class="comment">//                        iSpeed = Math.ceil(iSpeed);</span></div><div class="line"><span class="comment">//                    &#125;else</span></div><div class="line"><span class="comment">//                    &#123;</span></div><div class="line"><span class="comment">//                        iSpeed = Math.floor(iSpeed);</span></div><div class="line"><span class="comment">//                    &#125;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(oDiv.offsetLeft == iTarget)&#123;</div><div class="line">                        clearInterval(timer);</div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        oDiv.style.left = oDiv.offsetLeft + <span class="built_in">Math</span>.ceil(iSpeed)  + <span class="string">"px"</span>;<span class="comment">//速度向上取整</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">document</span>.title = iSpeed + <span class="string">"距离"</span> + oDiv.offsetLeft;<span class="comment">//速度计算机对小数无法识别</span></div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"开始运动"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width: 1px;height: 300px;background-color:orange;position: absolute;left: 300px;top: 10px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：<br>正向的和上面的一样的效果。反向的如下：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fdoz7ahvqcg30n10esq77.gif" alt=""></p>
<h2 id="缓冲菜单制作"><a href="#缓冲菜单制作" class="headerlink" title="缓冲菜单制作"></a>缓冲菜单制作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</div><div class="line"></div><div class="line"><span class="comment">//            oDiv.style.top = scrollTop + (document.documentElement.clientHeight - oDiv.offsetHeight)/2 + "px";</span></div><div class="line">            <span class="keyword">var</span> targets = scrollTop + (<span class="built_in">document</span>.documentElement.clientHeight - oDiv.offsetHeight)/<span class="number">2</span>;</div><div class="line">            startMove(<span class="built_in">parseInt</span>(targets));<span class="comment">//这里是为了防止出现除不尽，会导致div上下抖动半个像素</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line">            clearInterval(timer);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</div><div class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> iSpeed = (iTarget - oDiv.offsetTop) / <span class="number">7</span>;</div><div class="line">                iSpeed = iSpeed &gt; <span class="number">0</span>? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(oDiv.offsetTop == iTarget)&#123;</div><div class="line">                    clearInterval(timer);</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    oDiv.style.top = oDiv.offsetTop + iSpeed + <span class="string">"px"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;,<span class="number">30</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 2000px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fdp083eqr6g30n10es3yy.gif" alt=""></p>
<h1 id="匀速运动"><a href="#匀速运动" class="headerlink" title="匀速运动"></a>匀速运动</h1><p>我们需要用到一个绝对值函数:<code>Math.abs()</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>匀速运动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                startMove(<span class="number">300</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">iTarget</span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            clearInterval(timer);</div><div class="line"></div><div class="line">            timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> iSpeed = iTarget - oDiv.offsetLeft;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(iSpeed &gt; <span class="number">0</span>)&#123;</div><div class="line">                    iSpeed = <span class="number">7</span>;</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    iSpeed = <span class="number">-7</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(iTarget - oDiv.offsetLeft)&lt;<span class="number">7</span>)&#123;</div><div class="line">                    clearInterval(timer);</div><div class="line">                    oDiv.style.left = iTarget+ <span class="string">"px"</span>;</div><div class="line"></div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    oDiv.style.left = oDiv.offsetLeft + iSpeed + <span class="string">"px"</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;,<span class="number">30</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"开始运动"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width: 1px;height: 300px;background-color:orange;position: absolute;left: 300px;top: 10px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fdp0rnignmg30n10es3yj.gif" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fdp0rrbl1sg30n10esq30.gif" alt=""></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 定时器 </tag>
            
            <tag> offsetLeft </tag>
            
            <tag> filter </tag>
            
            <tag> opacity </tag>
            
            <tag> Math.ceil </tag>
            
            <tag> Math.floor </tag>
            
            <tag> 缓冲运动 </tag>
            
            <tag> 匀速运动 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础-AJAX]]></title>
      <url>http://yoursite.com/2017/03/15/JavaScript%E5%9F%BA%E7%A1%80-AJAX/</url>
      <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnc6cmn7mj30l60gqdib.jpg" alt=""></p>
<a id="more"></a>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnccqnlq8j30l30jc0vm.jpg" alt=""></p>
<h1 id="Ajax基础"><a href="#Ajax基础" class="headerlink" title="Ajax基础"></a>Ajax基础</h1><h2 id="什么是服务器？"><a href="#什么是服务器？" class="headerlink" title="什么是服务器？"></a>什么是服务器？</h2><p>传统的表单<code>form</code>，当我提交的时候整个页面都会刷新，这个时候用户体验就不好，而且也会给浏览器一些负担。<br><code>Ajax</code>是在不刷新页面的前提下提交页面数据或者从服务器上读取数据。但是他只能从服务器上读取数据。</p>
<p>下面介绍一下AMP的安装：(因为我的是MAC系统，所以安装MAMP)</p>
<p>首先在官方网站下载(MAMP):<a href="https://www.mamp.info/en/downloads/" target="_blank" rel="external">https://www.mamp.info/en/downloads/</a></p>
<p>然后点击安装，如果没有修改安装地址的话，默认会在</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fdnehlskf4j30m1097dig.jpg" alt=""></p>
<p>下面我们设置一下访问方式：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnejf8kzqj30ex0c9dh6.jpg" alt=""></p>
<p>点击<code>set web &amp; mysql ports to 80 &amp; 3306</code>。</p>
<p>然后就可以直接在浏览器中输入<code>http://localhost/FeyddyBlog.txt</code>,这个时候浏览器会访问你本地的服务器。</p>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnelkaf9wj30f404r0tf.jpg" alt=""></p>
<h2 id="举例使用Ajax库"><a href="#举例使用Ajax库" class="headerlink" title="举例使用Ajax库"></a>举例使用Ajax库</h2><p>简单介绍一下<code>Ajax.js</code>这个库，它是异步读取数据的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, fnSucc, fnFaild</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//1.创建Ajax对象</span></div><div class="line">	<span class="keyword">var</span> oAjax=<span class="literal">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">	&#123;</div><div class="line">		oAjax=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		oAjax=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//2.连接服务器</span></div><div class="line">	oAjax.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</div><div class="line"></div><div class="line">	<span class="comment">//3.发送请求</span></div><div class="line">	oAjax.send();</div><div class="line"></div><div class="line">	<span class="comment">//4.接收服务器的返回</span></div><div class="line">	oAjax.onreadystatechange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(oAjax.readyState==<span class="number">4</span>)	<span class="comment">//完成</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(oAjax.status==<span class="number">200</span>)	<span class="comment">//成功</span></div><div class="line">			&#123;</div><div class="line">				fnSucc(oAjax.responseText);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(fnFaild)</div><div class="line">					fnFaild(oAjax.status);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简介解析一下：</p>
<ul>
<li>function ajax(文件的地址, 函数, fnFaild)</li>
</ul>
<p>下面正式用一下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>读取文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//ajax能且仅能从服务器中读取数据</span></div><div class="line">                ajax(<span class="string">'FeyddyBlog.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                    alert(str);<span class="comment">//str为从服务器中获取的数据</span></div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">点击按钮获取服务器中的数据：注意这里的文件路径必须放在服务器路径里面,文件名不能为中文</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"读取文件"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnhdfg0yrj30br02djrf.jpg" alt=""></p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnhdl106pj30hs05bwet.jpg" alt=""></p>
<h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><p>下面我们对服务器下多个文档进行读取切换，但是这三个文档的文件编码格式不一样。让我们看一下运行结果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取多个文件内容字符编码问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span>&#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200ex</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> aBtns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; aBtns.length;i++)&#123;</div><div class="line">                aBtns[i].index = i;<span class="comment">//不能通过i来获取文件</span></div><div class="line">                aBtns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    ajax(<span class="string">'FeyddyBlog_'</span> + <span class="keyword">this</span>.index + <span class="string">'.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                        oDiv.innerHTML = str;</div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"按钮1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"按钮2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"按钮3"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnhn73x0yj30az08bweq.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fdnhnbevmaj30au08bwen.jpg" alt=""></p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnhnedwi4j309d082dg0.jpg" alt=""></p>
<p>按按钮2显示的乱码是因为这个文件里面的内容不是UT-8格式的。需要修改成统一的。</p>
<h3 id="缓存、阻止缓存"><a href="#缓存、阻止缓存" class="headerlink" title="缓存、阻止缓存"></a>缓存、阻止缓存</h3><p>所谓的缓存也就是说他只读一次，也就是第一次进入页面的时候从服务器获取数据，后面再进入的时候会直接从缓存本地读取，而服务器中的数据就不会重新获取了。<br>它可以加速网络的访问。但是却不能及时更新数据的显示。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缓存<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                ajax(<span class="string">'cache_test.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                    alert(str);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">点击按钮读取文件</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"读取文件"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnifj3c2bj30hk03t74h.jpg" alt=""></p>
<p>然后我们将文本内容改成<code>good good study,day day up!</code>。</p>
<p>显示的还是</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnifj3c2bj30hk03t74h.jpg" alt=""></p>
<p>这就是缓存的结果。</p>
<p>那么怎么解决这个问题呢？</p>
<p>首先我们了解一下缓存的机制：</p>
<p>缓存其实是根据地址来缓存东西的，也就是同样的地址这个东西只存储一次。所以只需要让地址不一样就行了。</p>
<p>我们可以给每个地址后面加上一个时间。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>缓存<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                alert(<span class="string">'cache_test.txt?t='</span> + <span class="keyword">new</span>  <span class="built_in">Date</span>().getTime());</div><div class="line">                ajax(<span class="string">'cache_test.txt?t='</span> + <span class="keyword">new</span>  <span class="built_in">Date</span>().getTime(), <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                    alert(str);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">点击按钮读取文件</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"读取文件"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>地址：<br><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fdniordyl9j30i103xjrn.jpg" alt=""><br>数据：<br><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnip630pgj30hw03tjrl.jpg" alt=""><br>文件修改后：</p>
<p>地址：<br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnipgp0kaj30ht03tq36.jpg" alt=""><br>内容：<br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnipnsj9cj30hu04caaa.jpg" alt=""></p>
<h2 id="动态数据请求"><a href="#动态数据请求" class="headerlink" title="动态数据请求"></a>动态数据请求</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>我们做个小例子：读取文件中的数组并使用。文件中的数组<code>[1,4,6,87,45,75]</code></p>
<p>Ajax请求后获取的数据都是文本字符型；我们要做的就是将返回的文本转换成数组的形式。</p>
<p>我们就可以使用<code>eval</code>:计算字符串里面的值。他的功能比较强大，可以识别字符串里面的是数组，还是方法，还是其他的具有特殊功能性的字符串。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>请求并使用文件中的数组<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                ajax(<span class="string">'data_array.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> array = <span class="built_in">eval</span>(str);</div><div class="line">                    alert(array[<span class="number">0</span>]);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">请求服务器中的一个文件，文件中是一个数组 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"读取数组文件"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnjiho92lj30hx03x3yp.jpg" alt=""></p>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>新建一个json文件：<code>[{job:&quot;iOS开发工程师&quot;,experience:3},{name:&quot;Feyddy&quot;,age:25}]</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>json<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                ajax(<span class="string">'data_json.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> jsonArray = <span class="built_in">eval</span>(str);</div><div class="line">                    alert(jsonArray[<span class="number">0</span>].job);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">请求服务器中的一个文件，文件中是一个json <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"读取json文件"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fdnlj6dcrsj30hr03uweq.jpg" alt=""></p>
<h3 id="实现换页的效果"><a href="#实现换页的效果" class="headerlink" title="实现换页的效果"></a>实现换页的效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            <span class="keyword">var</span> aAs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line">            <span class="keyword">var</span> i;</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;aAs.length;i++)&#123;</div><div class="line">                aAs[i].index = i;</div><div class="line">                aAs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    ajax(<span class="string">"page"</span>+(<span class="keyword">this</span>.index+<span class="number">1</span>) + <span class="string">".txt"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">                        <span class="keyword">var</span> aData = <span class="built_in">eval</span>(str);</div><div class="line">                        oUl.innerHTML = <span class="string">""</span>;<span class="comment">//清空所有的元素</span></div><div class="line">                        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; aData.length;i++)</div><div class="line">                        &#123;</div><div class="line">                            <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">                            oLi.innerHTML = <span class="string">'&lt;strong&gt;用户名：'</span>+aData[i].userName+<span class="string">'；&lt;/strong&gt;'</span> + <span class="string">"&lt;i&gt;密码："</span> + aData[i].passWorld + <span class="string">"。&lt;/i&gt;"</span>;</div><div class="line">                            oUl.appendChild(oLi);</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>点击<code>1</code></p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnmb9l09dj308t03z0sw.jpg" alt=""></p>
<p>点击<code>2</code></p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fdnmbmhiowj307g03d74c.jpg" alt=""></p>
<h1 id="Ajax原理"><a href="#Ajax原理" class="headerlink" title="Ajax原理"></a>Ajax原理</h1><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><h3 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h3><p>下面通过表单介绍一下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>http请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.feyddy.com"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span><span class="comment">&lt;!--name 属性是给后台使用的，就是字段--&gt;</span></div><div class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passWorld"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdnmnt7vkwj30cb013q2w.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnmny6qodj30js01vweq.jpg" alt=""></p>
<p>从上图可以看到，链接后面的一串<code>/?userName=Feyddy&amp;passWorld=LOVE</code>和我提交的内容一样。这就是GET方法，直接拼接上。</p>
<h3 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>http请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.feyddy.com"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span><span class="comment">&lt;!--name 属性是给后台使用的，就是字段--&gt;</span></div><div class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passWorld"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>提交后你会发现url里面<code>http://www.feyddy.com/</code>没有自己刚刚输入的内容。</p>
<h3 id="POST方法和GET方法的区别"><a href="#POST方法和GET方法的区别" class="headerlink" title="POST方法和GET方法的区别"></a>POST方法和GET方法的区别</h3><p>get:把数据放在URL（网址）里面来提交<br>post:把数据放在http content里面提交，在url里面不会显示</p>
<p>get：安全性很低，容易在历史记录里面看到自己的用户名等等、容量很低、便于分享<br>post：安全性一般、容量几乎无限</p>
<h1 id="写一个自己的Ajax库"><a href="#写一个自己的Ajax库" class="headerlink" title="写一个自己的Ajax库"></a>写一个自己的Ajax库</h1><p>Ajax请求的步骤：</p>
<ol>
<li>创建Ajax对象；</li>
<li>连接服务器；</li>
<li>发送请求；</li>
<li>接受返回值；</li>
</ol>
<blockquote>
<p>小知识点：全局变量和函数其实是window的一个属性，只不过window可以不写。当你用一个不存在的变量的时候，会出错；但是用一个不存在的属性的时候，只会显示未定义（undefined）；</p>
</blockquote>
<p>下面我们开始自己写Ajax库</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		  <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">		  oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		    <span class="comment">//1.创建ajax对象,但是XMLHttpRequest在IE6以下无法使用</span></div><div class="line">		    <span class="comment">// var oAjax = new XMLHttpRequest();</span></div><div class="line">		    <span class="comment">//IE6</span></div><div class="line">		    <span class="comment">// var oAjax = new ActiveXObject("Microsoft.XMLHTTP");//插件</span></div><div class="line">		    <span class="keyword">var</span> oAjax = <span class="literal">null</span>;</div><div class="line"></div><div class="line">		    <span class="comment">//这里如果用if (XMLHttpRequest)的话还是在IE6下报错，因为IE6下没有XMLHttpRequest函数。所以只能使用属性函数</span></div><div class="line">		    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">		      oAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">		    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		      oAjax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">		    &#125;</div><div class="line"></div><div class="line">		    <span class="comment">//2.连接服务器</span></div><div class="line">		    <span class="comment">//open(方法,url，是否异步)</span></div><div class="line">		    oAjax.open(<span class="string">'GET'</span>,<span class="string">'FeyddyBlog_0.txt'</span>,<span class="literal">true</span>);</div><div class="line"></div><div class="line">		    <span class="comment">//3.发送请求</span></div><div class="line">		    oAjax.send();</div><div class="line"></div><div class="line">		    <span class="comment">//4.接受返回信息</span></div><div class="line">		    <span class="comment">//onreadystatechange类似于window.onload，但是不一样。当Aajx和服务器之间有通讯发生的时候，有状态变化的时候会调用</span></div><div class="line">		    oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		      <span class="comment">//oAjax.readyState告诉我们ajax和服务器之间的通信完成到哪一步了。他总共有5种状态。详情看知识点。其实我们观察的只是状态4（完成），其他的都不重要。</span></div><div class="line">		      <span class="keyword">if</span> (oAjax.readyState == <span class="number">4</span>) &#123;<span class="comment">//只能代表请求完成，但是不一定是成功</span></div><div class="line">		        <span class="comment">//oAjax.status  这个代表请求的相关结果是否成功。200代表成功</span></div><div class="line">		        <span class="keyword">if</span> (oAjax.status == <span class="number">200</span>) &#123;</div><div class="line">		          <span class="comment">//oAjax.responseText请求得到的返回值</span></div><div class="line">		          alert(<span class="string">'请求成功：'</span> + oAjax.responseText);</div><div class="line">		        &#125;<span class="keyword">else</span> &#123;</div><div class="line">		          alert(<span class="string">'请求失败'</span>);</div><div class="line">		        &#125;</div><div class="line">		      &#125;</div><div class="line">		    &#125;</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"读取文件"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们对js代码进行提取封装：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url,fnSucc,fnFaild</span>) </span>&#123;</div><div class="line">  <span class="comment">//1.创建ajax对象,但是XMLHttpRequest在IE6以下无法使用</span></div><div class="line">  <span class="comment">// var oAjax = new XMLHttpRequest();</span></div><div class="line">  <span class="comment">//IE6</span></div><div class="line">  <span class="comment">// var oAjax = new ActiveXObject("Microsoft.XMLHTTP");//插件</span></div><div class="line">  <span class="keyword">var</span> oAjax = <span class="literal">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">//这里如果用if (XMLHttpRequest)的话还是在IE6下报错，因为IE6下没有XMLHttpRequest函数。所以只能使用属性函数</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">    oAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    oAjax = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//2.连接服务器</span></div><div class="line">  <span class="comment">//open(方法,url，是否异步)</span></div><div class="line">  oAjax.open(<span class="string">'GET'</span>,url,<span class="literal">true</span>);</div><div class="line"></div><div class="line">  <span class="comment">//3.发送请求</span></div><div class="line">  oAjax.send();</div><div class="line"></div><div class="line">  <span class="comment">//4.接受返回信息</span></div><div class="line">  <span class="comment">//onreadystatechange类似于window.onload，但是不一样。当Aajx和服务器之间有通讯发生的时候，有状态变化的时候会调用</span></div><div class="line">  oAjax.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//oAjax.readyState告诉我们ajax和服务器之间的通信完成到哪一步了。他总共有5种状态。详情看知识点。其实我们观察的只是状态4（完成），其他的都不重要。</span></div><div class="line">    <span class="keyword">if</span> (oAjax.readyState == <span class="number">4</span>) &#123;<span class="comment">//只能代表请求完成，但是不一定是成功</span></div><div class="line">      <span class="comment">//oAjax.status  这个代表请求的相关结果是否成功。200代表成功</span></div><div class="line">      <span class="keyword">if</span> (oAjax.status == <span class="number">200</span>) &#123;</div><div class="line">        <span class="comment">//oAjax.responseText请求得到的返回值</span></div><div class="line">        <span class="comment">// alert('请求成功：' + oAjax.responseText);</span></div><div class="line">        fnSucc(oAjax.responseText)</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// alert('请求失败');</span></div><div class="line">        <span class="keyword">if</span> (fnFaild) &#123;</div><div class="line">          fnFaild();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面用我们封装的Ajax库使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myAjax.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      ajax(<span class="string">'FeyddyBlog_0.txt'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">        alert(str);</div><div class="line">      &#125;,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'失败了'</span>);</div><div class="line">      &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fdnutds0lmj30ao06kwfa.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MAMP </tag>
            
            <tag> 缓存 </tag>
            
            <tag> eval </tag>
            
            <tag> json </tag>
            
            <tag> 自定义Ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript事件详解(进阶篇)]]></title>
      <url>http://yoursite.com/2017/03/14/JavaScript%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3-%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript基础-进阶篇"><a href="#JavaScript基础-进阶篇" class="headerlink" title="JavaScript基础(进阶篇)"></a>JavaScript基础(进阶篇)</h1><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>首先我们来进行知识点的预览：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdm6inqdvfj30uw0fwq4w.jpg" alt=""></p>
<a id="more"></a>
<h1 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h1><p>什么叫默认行为？<br>举个小例子。比如说，如果我们在浏览器中不写任何代码，直接右键，那么会出现一个弹出菜单框，这就是系统默认行为。</p>
<h2 id="oncontextmenu-环境菜单-上下文菜单"><a href="#oncontextmenu-环境菜单-上下文菜单" class="headerlink" title="oncontextmenu(环境菜单-上下文菜单)"></a>oncontextmenu(环境菜单-上下文菜单)</h2><p>它其实是系统的右键响应事件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>oncontextmenu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">'a'</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当我们右键的时候首先出现：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdm9oh53kqj30a30573yx.jpg" alt=""></p>
<p>然后点击确定又会弹出</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdm9ovluo7j30ac09kdgp.jpg" alt=""></p>
<p>这个就是系统的默认行为。</p>
<p>那么我们怎么阻止默认行为呢？<br>使用<code>return false</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>oncontextmenu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">'Feyddy'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdm9zkm7gvj30cd05rt99.jpg" alt=""></p>
<p>这样系统的弹出框就不会显示出来。</p>
<p>下面我们结合表单来了解一下<code>return false</code>。</p>
<h3 id="阻止表单提交"><a href="#阻止表单提交" class="headerlink" title="阻止表单提交"></a>阻止表单提交</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阻止表单提交<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oForm = <span class="built_in">document</span>.getElementById(<span class="string">'form1'</span>);</div><div class="line">            oForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.feyddy.com"</span> <span class="attr">id</span>=<span class="string">"form1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdmbbk7489j304301gglh.jpg" alt=""></p>
<p>此时点击按钮完全不会跳转界面。</p>
<p>这个方法一般用来验证表单的信息：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>验证表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            <span class="keyword">var</span> oForm = <span class="built_in">document</span>.getElementById(<span class="string">'form1'</span>);</div><div class="line">            oForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(oTxt.value != <span class="string">"Feyddy"</span>)&#123;</div><div class="line">                    alert(<span class="string">"请输入\"Feyddy\""</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www.feyddy.com"</span> <span class="attr">id</span>=<span class="string">"form1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，如果你不输入，或者说输入的字符串不是<code>Feyddy</code>的话，就会弹出提示框。如果输入正确就会直接跳转到我的博客。</p>
<h3 id="阻止onkeydown事件"><a href="#阻止onkeydown事件" class="headerlink" title="阻止onkeydown事件"></a>阻止onkeydown事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阻止onkeydown<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            oTxt.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个时候无论你怎么敲键盘上的字都不会显示。</p>
<h3 id="弹出自定义的右键菜单"><a href="#弹出自定义的右键菜单" class="headerlink" title="弹出自定义的右键菜单"></a>弹出自定义的右键菜单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义弹出框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">      <span class="selector-id">#ul1</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">display</span>: none;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">li</span> &#123;</div><div class="line">        <span class="attribute">list-style</span>: none;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oEvent = ev || event;</div><div class="line">        <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">        oUl.style.display = <span class="string">'block'</span>;</div><div class="line">        oUl.style.left = oEvent.clientX + <span class="string">"px"</span>;</div><div class="line">        oUl.style.top = oEvent.clientY + <span class="string">"px"</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">        oUl.style.display = <span class="string">'none'</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>回到首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>加入VIP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdmoazn9gyj30ad076glq.jpg" alt=""></p>
<h3 id="只能输入数字的输入框"><a href="#只能输入数字的输入框" class="headerlink" title="只能输入数字的输入框"></a>只能输入数字的输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>只能输入数字的文本框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">        oTxt.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> oEvent = ev || event;</div><div class="line">          <span class="keyword">if</span> (oEvent.keyCode!=<span class="number">8</span> &amp;&amp; (oEvent.keyCode&lt;<span class="number">48</span> || oEvent.keyCode&gt;<span class="number">57</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h1><h2 id="鼠标拖拽div移动"><a href="#鼠标拖拽div移动" class="headerlink" title="鼠标拖拽div移动"></a>鼠标拖拽div移动</h2><p>我们需要用到三个事件：</p>
<p>onmousedown:存储div与鼠标的距离<br>onmousemove:根据距离，计算div最新位置<br>onmouseup:将onmousemove停止</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拖拽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-id">#div1</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">background-color</span>: orange;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oDIV = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">        <span class="keyword">var</span> distanceX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> distanceY = <span class="number">0</span>;</div><div class="line">        oDIV.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">          distanceX = oEvent.clientX - oDIV.offsetLeft;</div><div class="line">          distanceY = oEvent.clientY - oDIV.offsetTop;</div><div class="line"></div><div class="line">          oDIV.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oEvent = ev || event;</div><div class="line">            oDIV.style.left = oEvent.clientX - distanceX + <span class="string">'px'</span>;</div><div class="line">            oDIV.style.top = oEvent.clientY - distanceY + <span class="string">'px'</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          oDIV.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            oDIV.onmousemove = <span class="literal">null</span>;</div><div class="line">            oDIV.onmouseup = <span class="literal">null</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行下来你会发现一个问题：如果鼠标移动过快，会移出div区域，但是我们的事件施加在div上面，所有此时的div将不会移动。<br>这个时候我们就可以用到document</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拖拽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-id">#div1</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">background-color</span>: orange;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oDIV = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">        <span class="keyword">var</span> distanceX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> distanceY = <span class="number">0</span>;</div><div class="line">        <span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">          distanceX = oEvent.clientX - oDIV.offsetLeft;</div><div class="line">          distanceY = oEvent.clientY - oDIV.offsetTop;</div><div class="line"></div><div class="line">          <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oEvent = ev || event;</div><div class="line">            oDIV.style.left = oEvent.clientX - distanceX + <span class="string">'px'</span>;</div><div class="line">            oDIV.style.top = oEvent.clientY - distanceY + <span class="string">'px'</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">            <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//为了解决都版本FF空的div无法拖拽的问题</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是此时又会有一个问题，那就是可以把div拖到页面的外面去。下面进行完善：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拖拽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-id">#div1</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        <span class="attribute">background-color</span>: orange;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oDIV = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">        <span class="keyword">var</span> distanceX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> distanceY = <span class="number">0</span>;</div><div class="line">        <span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">          distanceX = oEvent.clientX - oDIV.offsetLeft;</div><div class="line">          distanceY = oEvent.clientY - oDIV.offsetTop;</div><div class="line"></div><div class="line">          <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oEvent = ev || event;</div><div class="line">            <span class="keyword">var</span> leftV = oEvent.clientX - distanceX;</div><div class="line">            <span class="keyword">var</span> topV = oEvent.clientY - distanceY;</div><div class="line">            <span class="keyword">if</span> (leftV&lt;<span class="number">0</span>) &#123;</div><div class="line">              leftV = <span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (leftV &gt; <span class="built_in">document</span>.documentElement.clientWidth - oDIV.offsetWidth) &#123;</div><div class="line">              leftV = <span class="built_in">document</span>.documentElement.clientWidth - oDIV.offsetWidth;<span class="comment">//document.documentElement.clientWidth为可视区的宽度</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (topV&lt;<span class="number">0</span>) &#123;</div><div class="line">              topV = <span class="number">0</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (topV &gt; <span class="built_in">document</span>.documentElement.clientHeight - oDIV.offsetHeight) &#123;</div><div class="line">              topV = <span class="built_in">document</span>.documentElement.clientHeight - oDIV.offsetHeight;</div><div class="line">            &#125;</div><div class="line">            oDIV.style.left = leftV + <span class="string">"px"</span>;</div><div class="line">            oDIV.style.top = topV + <span class="string">"px"</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">            <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//为了解决都版本FF空的div无法拖拽的问题</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> keyCode </tag>
            
            <tag> oncontextmenu </tag>
            
            <tag> return false </tag>
            
            <tag> onkeydown </tag>
            
            <tag> 拖拽 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript事件详解(基础篇)]]></title>
      <url>http://yoursite.com/2017/03/13/JavaScript%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript事件详解-基础篇"><a href="#JavaScript事件详解-基础篇" class="headerlink" title="JavaScript事件详解-基础篇"></a>JavaScript事件详解-基础篇</h1><p>知识点介绍：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdlay7fklyj30ux0mv780.jpg" alt=""></p>
<a id="more"></a>
<blockquote>
<p>小知识点</p>
</blockquote>
<p>首先，我们做个小例子：点击页面中的任何一个位置，弹出提示框。我们第一个想到的就是给body增加一个点击事件。然后结果并没有用什么用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>点击页面任何地方弹出提示框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(<span class="string">'aaa'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color:red;"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们该怎么做呢？可以给document这个节点添加点击事件。</p>
<h4 id="document是什么？"><a href="#document是什么？" class="headerlink" title="document是什么？"></a>document是什么？</h4><p>他其实是最外层的父节点，平时是看不到的。如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">document</span>&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>document是什么<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        alert(<span class="built_in">document</span>.childNodes[<span class="number">0</span>]);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">document</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以我们可以通过它来找到它里面的所有的东西。</p>
<p>因此，我们不论点击页面的哪个位置，它都不会出document的范围，所以我们只要将点击事件加在document上面之后就可以点击页面的任何地方都能触发这个事件了。而且，还有就是document不需要再<code>window.onload</code>里面进行</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>document是什么<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">"我是document点击事件"</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdlbyn9pisj30e903w3yn.jpg" alt=""></p>
<h1 id="event对象和事件冒泡"><a href="#event对象和事件冒泡" class="headerlink" title="event对象和事件冒泡"></a>event对象和事件冒泡</h1><h2 id="event对象"><a href="#event对象" class="headerlink" title="event对象"></a>event对象</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event事件对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="comment">//IE下很正常</span></div><div class="line"><span class="comment">//            alert("鼠标点击的位置" + "横坐标："+ event.clientX + "纵坐标："+ event.clientY);//鼠标点击地方的横坐标和纵坐标</span></div><div class="line">            <span class="comment">//FF下不兼容,需要在点击方法加上参数，这个参数就是系统返还的点击的对象---但是IE下不兼容</span></div><div class="line"><span class="comment">//            alert("鼠标点击的位置" + "横坐标："+ ev.clientX + "纵坐标："+ ev.clientY);//鼠标点击地方的横坐标和纵坐标</span></div><div class="line"></div><div class="line">            <span class="comment">//处理兼容性方法</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(ev)&#123;</div><div class="line">                alert(<span class="string">"鼠标点击的位置"</span> + <span class="string">"横坐标："</span>+ ev.clientX + <span class="string">"纵坐标："</span>+ ev.clientY);<span class="comment">//鼠标点击地方的横坐标和纵坐标</span></div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                alert(<span class="string">"鼠标点击的位置"</span> + <span class="string">"横坐标："</span>+ event.clientX + <span class="string">"纵坐标："</span>+ event.clientY);<span class="comment">//鼠标点击地方的横坐标和纵坐标</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdlcgv5ccyj30bx068wf7.jpg" alt=""></p>
<p>下面对源代码进行完善，用<code>||</code>。他的基本使用如下:</p>
<p><code>a||b</code>：他会把<code>a</code>和<code>b</code>中真的那个返回出来；如果都为真，返回第一个；如果都为假也返回第二个。</p>
<p>这样我们就可以完善一下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event事件对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> Event = alert(<span class="string">"鼠标点击的位置"</span> + <span class="string">"横坐标："</span>+ ev.clientX + <span class="string">"纵坐标："</span>+ ev.clientY)  || alert(<span class="string">"鼠标点击的位置"</span> + <span class="string">"横坐标："</span>+ event.clientX + <span class="string">"纵坐标："</span>+ event.clientY);</div><div class="line">         alert(Event);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdlcllatijj309305awex.jpg" alt=""></p>
<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>它的意思就是当我们点击一个事件的时候，他完成事件之后并不是就消失了，而是继续向他的父级传递，让父级也相应父级的事件。这样一级一级的向上传递。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.tagName)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件冒泡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"alert(this.tagName)"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 300px;height: 300px;background-color:orange;"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.style.backgroundColor)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background-color:purple;"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.style.backgroundColor)"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color:#dddddd;"</span> <span class="attr">onclick</span>=<span class="string">"alert(this.style.backgroundColor)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一般情况下，这个功能只会给我困扰。下面我们举个小例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件冒泡困扰例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            oDiv.style.display = <span class="string">'block'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            oDiv.style.display = <span class="string">'none'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示菜单"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当我们点击按钮的时候，首先触发<code>window.onload</code>里面的<code>oBtn.onclick</code>，<code>div</code>就显示了，然后再执行<code>document.onclick</code>。这样<code>div</code>就又被隐藏了。</p>
<p>那么怎么让按钮的点击事件不冒泡呢？</p>
<p>那就是取消冒泡:<code>cancelBubble</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件冒泡困扰例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> oEvent = event||ev;</div><div class="line">                oDiv.style.display = <span class="string">'block'</span>;</div><div class="line">                oEvent.cancelBubble = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                oDiv.style.display = <span class="string">'none'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示菜单"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样，点击按钮显示，点击其他地方消失。</p>
<h1 id="用来获取事件的详细信息：鼠标位置、键盘按键"><a href="#用来获取事件的详细信息：鼠标位置、键盘按键" class="headerlink" title="用来获取事件的详细信息：鼠标位置、键盘按键"></a>用来获取事件的详细信息：鼠标位置、键盘按键</h1><p>##鼠标的位置</p>
<p>首先做个小例子：div随着鼠标移动</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跟随鼠标的div<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span>&#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">            oDiv.style.left = oEvent.clientX + <span class="string">'px'</span>;<span class="comment">//可视区坐标</span></div><div class="line">            oDiv.style.top = oEvent.clientY + <span class="string">'px'</span>;<span class="comment">//可视区坐标</span></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是这个有一个BUG，那就是如果页面可以滑动，那么鼠标和div之间就会出现一个间隙。<br>这个原因是因为clientX和clientY是可视区坐标(可视区坐标是鼠标相对于可视区的顶部)，所以像上面这么写就会有一个差。所以正确的应该是：鼠标相对于可视区顶部的距离+可视区顶部相对于整个界面的顶部的距离（scrollTop）。</p>
<p>下面简单举个小例子来介绍一下如何获取scrollTop。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>scrollTop<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//非Chrome及safari</span></div><div class="line"><span class="comment">//            alert(document.documentElement.scrollTop);</span></div><div class="line"></div><div class="line">            <span class="comment">//chrome及safari</span></div><div class="line"><span class="comment">//            alert(document.body.scrollTop);</span></div><div class="line"></div><div class="line">            <span class="keyword">var</span> oScrollTop = <span class="built_in">document</span>.documentElement.scrollTop|| <span class="built_in">document</span>.body.scrollTop;</div><div class="line">            alert(oScrollTop);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 2000px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过这个，我们可以进一步完善我们的div跟随鼠标移动的demo</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跟随鼠标的div<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span>&#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">            <span class="keyword">var</span> oScrollTop = <span class="built_in">document</span>.documentElement.scrollTop|| <span class="built_in">document</span>.body.scrollTop;</div><div class="line">            <span class="keyword">var</span> oScrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft|| <span class="built_in">document</span>.body.scrollLeft;</div><div class="line">            oDiv.style.left = oEvent.clientX + oScrollLeft + <span class="string">'px'</span> ;<span class="comment">//可视区坐标</span></div><div class="line">            oDiv.style.top = oEvent.clientY + oScrollTop  + <span class="string">'px'</span>;<span class="comment">//可视区坐标</span></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 2000px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们在举个小例子：一串儿跟随鼠标的div：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>一串儿跟随鼠标的div<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> oEvent = ev || event;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i = oDiv.length - <span class="number">1</span>;i&gt;<span class="number">0</span>;i--) &#123;</div><div class="line">                    oDiv[i].style.left = oDiv[i<span class="number">-1</span>].style.left;</div><div class="line">                    oDiv[i].style.top = oDiv[i<span class="number">-1</span>].style.top;</div><div class="line">                &#125;</div><div class="line">                oDiv[<span class="number">0</span>].style.left = oEvent.clientX + <span class="string">"px"</span>;</div><div class="line">                oDiv[<span class="number">0</span>].style.top = oEvent.clientY + <span class="string">"px"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="keyCode（键值-amp-键码"><a href="#keyCode（键值-amp-键码" class="headerlink" title="keyCode（键值&amp;键码)"></a>keyCode（键值&amp;键码)</h3><p>onpress = onkeydown+onkeyup这一整个完整的键盘操作；</p>
<p>onkeydown:键盘按下去；</p>
<p>onkeyup:键盘抬起来；</p>
<p>键盘上的每一个键都会对应一个数值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>keyCode<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">            alert(oEvent.keyCode);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来你每按一个键就会弹出该键对应的竖直。</p>
<h3 id="下面我们做一个用键盘控制div移动方向的例子"><a href="#下面我们做一个用键盘控制div移动方向的例子" class="headerlink" title="下面我们做一个用键盘控制div移动方向的例子"></a>下面我们做一个用键盘控制div移动方向的例子</h3><blockquote>
<p>知识补充</p>
</blockquote>
<ul>
<li>offsetWidth系列<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: <span class="number">120px</span>;</div><div class="line">            <span class="attribute">top</span>: <span class="number">120px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            alert(<span class="string">"offsetWidth"</span> + oDiv.offsetWidth);<span class="comment">//包含width+border+padding</span></div><div class="line">            alert(<span class="string">"offsetLeft"</span> + oDiv.offsetLeft);<span class="comment">//包含左边的margin + left</span></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fdljd0vy6uj30by0713zc.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdljd78ud5j30aa086dgu.jpg" alt=""></p>
<p>下面我们可以做例子了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>键盘控制div<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">            <span class="comment">//⬅️  37</span></div><div class="line">            <span class="comment">//⤴️  38</span></div><div class="line">            <span class="comment">//➡️   39</span></div><div class="line">            <span class="comment">//⬇️   40</span></div><div class="line"><span class="comment">//            alert(oEvent.keyCode);</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(oEvent.keyCode == <span class="number">37</span>)&#123;</div><div class="line">                oDiv.style.left = oDiv.offsetLeft - <span class="number">10</span> + <span class="string">"px"</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(oEvent.keyCode == <span class="number">39</span>)</div><div class="line">            &#123;</div><div class="line">                oDiv.style.left = oDiv.offsetLeft + <span class="number">10</span> + <span class="string">"px"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(oEvent.keyCode == <span class="number">38</span>)</div><div class="line">            &#123;</div><div class="line">                oDiv.style.top = oDiv.offsetTop - <span class="number">10</span> + <span class="string">"px"</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(oEvent.keyCode == <span class="number">40</span>)</div><div class="line">            &#123;</div><div class="line">                oDiv.style.top = oDiv.offsetTop + <span class="number">10</span> + <span class="string">"px"</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来，div就可以通过键盘来上下左右移动了。</p>
<h2 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h2><ul>
<li>ctrlKey</li>
<li>shiftKey</li>
<li>altKey:有特殊用途，建议不要用。一般是呼叫系统菜单的，是个系统键。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ctrl+return提交留言<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oTxt1 = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            <span class="keyword">var</span> oTxt2 = <span class="built_in">document</span>.getElementById(<span class="string">'txt2'</span>);</div><div class="line"></div><div class="line">            <span class="comment">//点击按钮发送</span></div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                oTxt1.value += oTxt2.value + <span class="string">'\n'</span>;</div><div class="line">                oTxt2.value = <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//按下return键发送</span></div><div class="line">            oTxt2.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> oEvent = ev||event;</div><div class="line">                <span class="keyword">if</span>(oEvent.keyCode == <span class="number">13</span>&amp;&amp; oEvent.ctrlKey) &#123; <span class="comment">//Ctrl+return提交留言</span></div><div class="line">                    oTxt1.value += oTxt2.value + <span class="string">"\n"</span>;</div><div class="line">                    oTxt2.value = <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"留言框"</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt2"</span> <span class="attr">value</span>=<span class="string">"留言输入框"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这就是模拟留言板的方法。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> document </tag>
            
            <tag> event </tag>
            
            <tag> （||） </tag>
            
            <tag> 冒泡事件 </tag>
            
            <tag> cancelBubble </tag>
            
            <tag> clientX </tag>
            
            <tag> scrollTop </tag>
            
            <tag> keyCode </tag>
            
            <tag> offsetWidth </tag>
            
            <tag> ctrlKey </tag>
            
            <tag> shiftKey </tag>
            
            <tag> altKey </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BOM基础学习]]></title>
      <url>http://yoursite.com/2017/03/09/BOM%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="BOM基础知识点"><a href="#BOM基础知识点" class="headerlink" title="BOM基础知识点"></a>BOM基础知识点</h1><p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdgdr026e8j31030l841f.jpg" alt=""></p>
<a id="more"></a>
<p>知识点源代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>BOM基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        div &#123;</div><div class="line">            border: 1px solid purple;</div><div class="line">        &#125;</div><div class="line">        dl &#123;</div><div class="line">            border: 1px solid purple;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>BOM基础</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>打开、关闭窗口</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>open<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 蓝色理想运行代码功能<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>close<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 关闭时提示问题<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>常用属性</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>window.navigator.userAgent<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>window.location<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>尺寸及坐标</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>窗口尺寸、工作区尺寸</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>可视区尺寸<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- document.documentElement.clientWidth<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- document.documentElement.clientHeight<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>滚动距离<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- document.body.scrollTop<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- document.documentElement.scrollTop<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>常用方法和事件</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>系统对话框</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>警告框：alert(“内容”)，没有返回值<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>选择框：confirm(“提问的内容”)，返回boolean<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>输入框：prompt()，返回字符串或null<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>window对象常用事件</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>onload<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>onscroll<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>onresize<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>例子：回到顶部按钮、侧边栏广告<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>- 闪烁问题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="打开窗口"><a href="#打开窗口" class="headerlink" title="打开窗口"></a>打开窗口</h1><p><code>window.open(&quot;链接&quot;,&quot;窗口的打开形式target&quot;)</code>:打开窗口。</p>
<p>窗口的打开形式：</p>
<p><code>_self</code>:在本窗口中打开<br><code>_blank</code>:在新窗口打开（默认）<br><code>_parent</code>:在父框架集中打开被链接文档<br><code>_top</code>:在整个窗口中打开被链接文档（默认）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>open<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.onload = function() &#123;</div><div class="line">            var oBtn = document.getElementById('btn1');</div><div class="line">            oBtn.onclick = function() &#123;</div><div class="line">                window.open("http://www.baidu.com");</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"打开窗口"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdgewpfcgsj30f003yjrz.jpg" alt=""></p>
<p>下面用它做个小应用：<br>首先学点小知识：</p>
<h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write"></a>document.write</h3><p>它的作用是清空当前界面并输出东西</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.onload = function() &#123;</div><div class="line">            var obtn = document.getElementById('btn1');</div><div class="line">            obtn.onclick = function() &#123;</div><div class="line">                document.write("Feyddy");</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"write"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdgfc5dah3j30ag02n3yd.jpg" alt=""></p>
<p>点击按钮后</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdgfd387ztj305101o0sl.jpg" alt=""></p>
<p>好了，学会了这个我们继续来实现我们想要的应用。</p>
<p>需求：</p>
<p>我们创建一个文本输入框，然后再创建一个按钮。当我们点击按钮的时候将文本中的文字执行到新的窗口中。</p>
<p>先进行一些小的知识点的补充：</p>
<ul>
<li><code>document.getElementById(&#39;btn1&#39;);</code>与<code>window.document.getElementById(&#39;btn1&#39;);</code>是一样的，只不过<code>window</code>一般都省略了。</li>
<li><code>window.open()</code>是有返回值的,如果使用<code>var newWindow =  window.open(&quot;about:blank&quot;);</code>返回的就是新创建的一个窗口。</li>
<li>通过<code>newWindow.document.write(&quot;显示的文字&quot;);</code>就可以在新的窗口中显示文字。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>运行代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.onload = function() &#123;</div><div class="line">            var oTxt = window.document.getElementById('txt1');</div><div class="line">            var oBtn = window.document.getElementById('btn1');</div><div class="line"></div><div class="line">            oBtn.onclick = function() &#123;</div><div class="line">                //about:blank</div><div class="line">               var newWindow =  window.open("about:blank");</div><div class="line">                newWindow.document.write(oTxt.value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"运行代码"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdghjf4c8xj30dw07ggmq.jpg" alt=""></p>
<p>点击运行代码按钮：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdghjyuerkj30f403ujrw.jpg" alt=""></p>
<h1 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h1><p><code>close</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>close<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.onload = function() &#123;</div><div class="line">            var oBtn = document.getElementById('btn1');</div><div class="line">            oBtn.onclick = function() &#123;</div><div class="line">                window.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"关闭窗口"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>关于这个关闭，不同的浏览器有不同的处理方式：</p>
<ul>
<li>IE:会弹出一个提示框，询问是否关闭；</li>
<li>Chrome:直接关闭；</li>
<li>FF:不会操作，因为他是我们直接打开的，不是通过js脚本另外打开的，所以需要我们先open，才能close；</li>
</ul>
<p>如果我们不需要提示，想让所有的浏览器都直接关掉：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>open-close<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.onload = function() &#123;</div><div class="line">            var oBtn = document.getElementById('btn1');</div><div class="line">            oBtn.onclick = function() &#123;</div><div class="line">                window.open("close.html","_blank");</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"打开窗口"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdghvjgzufj30aa04jmxk.jpg" alt=""></p>
<p>然后点击打开</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdghvr1meuj30fu04mgm6.jpg" alt=""></p>
<p>再关闭就和刚运行的结果一样了。</p>
<h1 id="window上的常用属性"><a href="#window上的常用属性" class="headerlink" title="window上的常用属性"></a>window上的常用属性</h1><h2 id="window-navigator-userAgent"><a href="#window-navigator-userAgent" class="headerlink" title="window.navigator.userAgent"></a>window.navigator.userAgent</h2><p>告诉我们当前浏览器用的版本是什么。（配合正则使用）</p>
<h2 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h2><p>告诉我们当前页面的地址。</p>
<p>不仅可以读取地址，也可以赋值给它；这样他就直接加载赋值给他的地址。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>window.navigator.userAgent和window.location<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        window.location = "http://www.feyddy.com";//我的博客</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdgi4aq2zsj30rb0co75n.jpg" alt=""></p>
<h1 id="窗口尺寸"><a href="#窗口尺寸" class="headerlink" title="窗口尺寸"></a>窗口尺寸</h1><h2 id="可视区尺寸"><a href="#可视区尺寸" class="headerlink" title="可视区尺寸"></a>可视区尺寸</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">document</span>.documentElement.clientHeight);<span class="comment">//可视窗口 的高度</span></div><div class="line">alert(<span class="built_in">document</span>.body.clientHeight);<span class="comment">//body标签的高度</span></div><div class="line">alert(<span class="built_in">document</span>.documentElement.clientWidth);<span class="comment">//可视窗口 的宽度</span></div><div class="line">alert(<span class="built_in">document</span>.body.clientWidth);<span class="comment">//body标签的宽度</span></div></pre></td></tr></table></figure>
<h2 id="滚动距离"><a href="#滚动距离" class="headerlink" title="滚动距离"></a>滚动距离</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">document</span>.documentElement.scrollTop);<span class="comment">//FF下可视区距离顶部的距离</span></div><div class="line">alert( <span class="built_in">document</span>.body.scrollTop);<span class="comment">//IE下可视区距离顶部的距离</span></div></pre></td></tr></table></figure>
<h1 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h1><h2 id="警告框-alert-内容-，没有返回值"><a href="#警告框-alert-内容-，没有返回值" class="headerlink" title="警告框 :alert(内容)，没有返回值"></a>警告框 :alert(内容)，没有返回值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>alert<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        alert(<span class="string">'我是警告框。我没有返回值'</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdgk183mhyj30dy03waa7.jpg" alt=""></p>
<h2 id="选择框-confirm-内容-，有返回值，可以根据返回值来执行不同的操作"><a href="#选择框-confirm-内容-，有返回值，可以根据返回值来执行不同的操作" class="headerlink" title="选择框 :confirm(内容)，有返回值，可以根据返回值来执行不同的操作"></a>选择框 :confirm(内容)，有返回值，可以根据返回值来执行不同的操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>confirm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> b = confirm(<span class="string">'今天下雨吗？'</span>);<span class="comment">//如果点击的确定，就是true,反之就是false</span></div><div class="line">        alert(b);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdgk3o14uuj30e103zaa6.jpg" alt=""></p>
<p>点击确定</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdgk3x4fmjj30dy03uwei.jpg" alt=""></p>
<p>点击取消</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdgk43mnrhj30e303xmx7.jpg" alt=""></p>
<h2 id="输入框-prompt"><a href="#输入框-prompt" class="headerlink" title="输入框 : prompt"></a>输入框 : prompt</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>prompt<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> yourName = prompt(<span class="string">'请输入你的姓名'</span>,<span class="string">'Feyddy'</span>);<span class="comment">//后一个参数为默认值.如果点击确定，那么返回值就是你写的东西，如果没有写那就是空字符串。如果点击取消返回的就是null</span></div><div class="line">        alert(yourName);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdgk6sf8svj30e1052weo.jpg" alt=""></p>
<p>点击取消</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdgk7oc9bjj30dx03uq2y.jpg" alt=""></p>
<p>点击确定</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdgk83e6z6j30e103wq2z.jpg" alt=""></p>
<p>如果输入框里面没有写任何东西，然后点击确定：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdgk83e6z6j30e103wq2z.jpg" alt=""></p>
<h1 id="window对象常用事件"><a href="#window对象常用事件" class="headerlink" title="window对象常用事件"></a>window对象常用事件</h1><h2 id="onload-页面刚加载的时候"><a href="#onload-页面刚加载的时候" class="headerlink" title="onload: 页面刚加载的时候"></a>onload: 页面刚加载的时候</h2><h2 id="onscroll-页面滚动的时候"><a href="#onscroll-页面滚动的时候" class="headerlink" title="onscroll: 页面滚动的时候"></a>onscroll: 页面滚动的时候</h2><h2 id="onresize-页面缩放的时候"><a href="#onresize-页面缩放的时候" class="headerlink" title="onresize: 页面缩放的时候"></a>onresize: 页面缩放的时候</h2><h2 id="例子：回到顶部按钮、侧边栏广告"><a href="#例子：回到顶部按钮、侧边栏广告" class="headerlink" title="例子：回到顶部按钮、侧边栏广告"></a>例子：回到顶部按钮、侧边栏广告</h2><ul>
<li>侧边栏广告：页面怎么滚都不动，都显示在可见区域的固定位置。</li>
</ul>
<p>下面我们先画张图：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdgkgfl79fj30bo099dg2.jpg" alt=""></p>
<p>这下就好办了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #div1 &#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: red;</div><div class="line">            position: absolute;</div><div class="line">            right: 0;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="built_in">window</span>.onresize = <span class="built_in">window</span>.onload =  <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            <span class="comment">//可视区顶部到顶部的高度</span></div><div class="line">            <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop;</div><div class="line">            <span class="comment">//div到可视区顶部的高度=(可视区的高度-div本身的高)/2</span></div><div class="line">            <span class="keyword">var</span> t = (<span class="built_in">document</span>.documentElement.clientHeight - oDiv.offsetHeight)/<span class="number">2</span>;</div><div class="line">            oDiv.style.top = scrollTop + t + <span class="string">"px"</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 2000px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>闪烁问题</strong></p>
<ul>
<li><p>法一：完全通过布局的方式定位。<code>position: fixed;</code>（但是在IE6下不支持）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">      #div1 &#123;</div><div class="line">          width: 100px;</div><div class="line">          height: 100px;</div><div class="line">          background-color: red;</div><div class="line">          position: fixed;</div><div class="line">          right: 0;</div><div class="line">          top: 50%;</div><div class="line">          margin-top: -50px;</div><div class="line">      &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 2000px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>法二：运动解决</p>
<p>这个是运动的一个框架：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(obj.currentStyle)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[attr];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, json, fn</span>)</span></div><div class="line">&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	obj.timer=setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> bStop=<span class="literal">true</span>;		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">//1.</span></div><div class="line">			<span class="keyword">var</span> iCur=<span class="number">0</span>;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)</div><div class="line">			&#123;</div><div class="line">				iCur=<span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(obj, attr))*<span class="number">100</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				iCur=<span class="built_in">parseInt</span>(getStyle(obj, attr));</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">//2.</span></div><div class="line">			<span class="keyword">var</span> iSpeed=(json[attr]-iCur)/<span class="number">8</span>;</div><div class="line">			iSpeed=iSpeed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);</div><div class="line">			</div><div class="line">			<span class="comment">//3.</span></div><div class="line">			<span class="keyword">if</span>(iCur!=json[attr])</div><div class="line">			&#123;</div><div class="line">				bStop=<span class="literal">false</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)</div><div class="line">			&#123;</div><div class="line">				obj.style.filter=<span class="string">'alpha(opacity:'</span>+(iCur+iSpeed)+<span class="string">')'</span>;</div><div class="line">				obj.style.opacity=(iCur+iSpeed)/<span class="number">100</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				obj.style[attr]=iCur+iSpeed+<span class="string">'px'</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span>(bStop)</div><div class="line">		&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(fn)</div><div class="line">			&#123;</div><div class="line">				fn();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;, <span class="number">30</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  将它引入到我们的代码中：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"move.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #div1 &#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            background-color: red;</div><div class="line">            position: absolute;</div><div class="line">            right: 0;</div><div class="line">            top: 0;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">        <span class="built_in">window</span>.onresize = <span class="built_in">window</span>.onload =  <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line"></div><div class="line">            <span class="comment">//可视区顶部到顶部的高度</span></div><div class="line">            <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop;</div><div class="line"></div><div class="line">            <span class="comment">//div到可视区顶部的高度=(可视区的高度-div本身的高)/2</span></div><div class="line">            <span class="keyword">var</span> t = (<span class="built_in">document</span>.documentElement.clientHeight - oDiv.offsetHeight)/<span class="number">2</span>;</div><div class="line"></div><div class="line">            startMove(oDiv, &#123;<span class="attr">top</span>: scrollTop+t&#125;);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 2000px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>回到顶部按钮</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #btn1 &#123;</div><div class="line">            position: fixed;</div><div class="line">            bottom: 0;</div><div class="line">            right: 0;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> Obtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> bSys = <span class="literal">true</span>;<span class="comment">//检测是不是系统也就是定时器代码让他滚动的。</span></div><div class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">            <span class="comment">//如何检测用户拖动滚动条,但是他没办法区分是用户自己滚动的，还是定时器代码设置滚动的。</span></div><div class="line">            <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(!bSys)&#123;</div><div class="line">                    clearInterval(timer);</div><div class="line">                &#125;</div><div class="line">                bSys = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            Obtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//创建一个定时器</span></div><div class="line">                timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop||<span class="built_in">document</span>.body.scrollTop;</div><div class="line"></div><div class="line">                    <span class="comment">///速度</span></div><div class="line">                    <span class="keyword">var</span> iSpeed = <span class="built_in">Math</span>.floor(-scrollTop/<span class="number">8</span>);<span class="comment">//向下取整</span></div><div class="line"></div><div class="line">                    <span class="comment">//如果置顶，消除定时器</span></div><div class="line">                    <span class="keyword">if</span>(scrollTop == <span class="number">0</span>) &#123;</div><div class="line">                        clearInterval(timer);</div><div class="line">                    &#125;</div><div class="line">                    bSys=<span class="literal">false</span>;</div><div class="line"></div><div class="line">                    <span class="comment">//赋值:为了兼容两者都写</span></div><div class="line">                    <span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.documentElement.scrollTop = scrollTop+iSpeed;</div><div class="line">                &#125;,<span class="number">30</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"回到顶部"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li14<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li15<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li16<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li17<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li19<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li20<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li21<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li23<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li24<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li25<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li26<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li27<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li28<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li29<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li30<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li31<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li32<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li33<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li34<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li35<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li36<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li37<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li38<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li39<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li40<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li41<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li42<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li43<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li44<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li45<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li46<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li47<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li48<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li49<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li50<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> window.open </tag>
            
            <tag> document.write </tag>
            
            <tag> close </tag>
            
            <tag> window.navigator.userAgent </tag>
            
            <tag> window.location </tag>
            
            <tag> confirm </tag>
            
            <tag> prompt </tag>
            
            <tag> onload </tag>
            
            <tag> onscroll </tag>
            
            <tag> onresize </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM基础学习]]></title>
      <url>http://yoursite.com/2017/03/08/DOM%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="DOM基础"><a href="#DOM基础" class="headerlink" title="DOM基础"></a>DOM基础</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdf7xhesv2j30ri0pe783.jpg" alt=""></p>
<a id="more"></a>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdf7xzg4bvj30wg0ctwgf.jpg" alt=""></p>
<p>知识点源码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-tag">dl</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>DOM基础</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>DOM基础</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>什么是DOM<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>浏览器支持情况<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>DOM节点</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>childNodes  nodeType<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 获取子节点<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- children<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>parentNode<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 例子：点击链接，隐藏整个li<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>offsetParent<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 例子：获取元素在页面上的实际位置<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>首尾子节点<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 有兼容性问题<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- firstChild、firstElementChild<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- lastChild 、lastElementChild<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>兄弟节点<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 有兼容性问题<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- nextSibling、nextElementSibling<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- previousSibling、previousElementSibling<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>操纵元素属性</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>元素属性操作</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第一种：oDiv.style.display=“block”;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第二种：oDiv.style[“display”]=“block”;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第三种：Dom方式<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>DOM方式操作元素属性</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>获取：getAttribute(名称)<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>设置：setAttribute(名称, 值)<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>删除：removeAttribute(名称)<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>DOM元素灵活查找</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>用className选择元素</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>如何用className选择元素<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 选出所有元素<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 通过className条件筛选<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>封装成函数<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>创建、插入和删除元素</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>创建DOM元素</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>createElement(标签名)		创建一个节点<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>appendChild(节点)			追加一个节点<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 例子：为ul插入li<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>插入元素</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>insertBefore(节点, 原有节点)	在已有元素前插入<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 例子：倒序插入li<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>删除DOM元素</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>removeChild(节点)			删除一个节点<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 例子：删除li<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>文档碎片</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>文档碎片</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>文档碎片可以提高DOM操作性能(理论上)<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>文档碎片原理<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>document.createDocumentFragment()<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>DOM的作用是可以帮助JS操作浏览器页面里的那些元素，各种各样的操作都是通过DOM来完成的，例如：改变背景颜色，字体大小等。<br>DOM不仅仅是JS的一个组件，它还是一套标准。它有两个标准:DOM1和DOM2。而火狐基本上完全实现了两个标准。而IE是最不标准的，DOM1实现了一点，DOM2完全没实现。其他的类似于Chrome和Safari,DOM1实现了大班，DOM2实现了一点。</p>
<h2 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h2><p>HTML标签也叫做节点。下面我们举个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>222<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>333<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>根据上面的例子，我们进行讲解;</p>
<p>父节点：一个标签的父节点永远只会有一个；例如：<code>li</code>的父节点就是<code>ul</code>；<br>子节点：一个标签的子节点只有一层；例如：<code>ul</code>的子节点就是<code>li</code>，<code>a</code>不是<code>ul</code>的子节点；</p>
<h3 id="获取节点的方法"><a href="#获取节点的方法" class="headerlink" title="获取节点的方法"></a>获取节点的方法</h3><h4 id="childNodes子节点"><a href="#childNodes子节点" class="headerlink" title="childNodes子节点"></a>childNodes子节点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">            alert(oUl.childNodes.length);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>222<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>333<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果在IE浏览器中打开，就睡显示3。但是在chrome<br>下打开却是：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdf8mzvh15j30e303w0sr.jpg" alt=""></p>
<p>但是如果你把代码改成这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">            alert(oUl.childNodes.length);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>222<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>333<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果就会是正常的：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdf8op8sejj30e103xaa3.jpg" alt=""></p>
<p>这是为什么呢？</p>
<p>原因是因为有一个文本节点。像<ul>这种节点属于元素节点，文本节点就是只是一个文字显示。在火狐和Chrome中会自动把文本节点也算是一个节点，但是在IE中就不算。</ul></p>
<p>这样就出现兼容性问题了。 <code>nodeType</code>可以解决这个问题。</p>
<p><code>nodeType</code>类型解释：</p>
<ul>
<li><code>3</code>:代表文本节点</li>
<li><code>1</code>:代表元素节点（标签）</li>
</ul>
<p>这样解决方法就出来了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">            <span class="keyword">var</span> i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; oUl.childNodes.length;i++)&#123;</div><div class="line">            <span class="comment">//在IE下改变了，但是在Chrome下却没有出现，而且报错。因为不能给文本添加样式。</span></div><div class="line"><span class="comment">//             oUl.childNodes[i].style.backgroundColor='red';</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span>(oUl.childNodes[i].nodeType == <span class="number">1</span>)&#123;</div><div class="line">                 oUl.childNodes[i].style.backgroundColor=<span class="string">'red'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>222<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>333<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdf98e7to4j30ol02b747.jpg" alt=""></p>
<p>还有一种方法就是使用<code>children</code>。大家可以认为他是兼容版的<code>childNodes</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>children<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">            <span class="keyword">var</span> i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; oUl.children.length;i++)&#123;</div><div class="line">                oUl.children[i].style.background = <span class="string">"orange"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>111<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>222<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>333<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdf981nuccj30ln02vjrb.jpg" alt=""></p>
<h4 id="parentNode父节点"><a href="#parentNode父节点" class="headerlink" title="parentNode父节点"></a>parentNode父节点</h4><p>它获取的是结构上的父节点。</p>
<p>我们下面来通过一个小例子来理解这个parentNode。</p>
<p>需求：点击链接隐藏当前行。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> aA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</div><div class="line">            <span class="keyword">var</span> i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; aA.length;i++)&#123;</div><div class="line">                aA[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">//这里的this是a，a的父节点就是我们需要隐藏的li</span></div><div class="line">                    <span class="keyword">this</span>.parentNode.style.display = <span class="string">"none"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">点击链接隐藏当前行（li）</div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>third<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdf9h3shshj306n03jq32.jpg" alt=""></p>
<p>点击隐藏后：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdf9h6xiljj305q02sdfw.jpg" alt=""></p>
<h4 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h4><p>它获取的是物体相对于某个的定位。</p>
<p>下面通过举例说明：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>offsetParent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>:red;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#div2</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>:orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdf9nb1yc3j306l05v745.jpg" alt=""></p>
<p>此时如果我们为<code>div1</code>添加一个<code>margin: 50px;</code>的样式后，橙色的<code>div2</code>完全没有移动。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdf9pm26a4j3084065wec.jpg" alt=""></p>
<p>但是如果为<code>div1</code>添加一个<code>position: relative;</code>之后，橙色的<code>div2</code>就会随着<code>div1</code>移动而移动。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdf9u4v14pj3088075a9x.jpg" alt=""></p>
<p><strong>为什么呢？</strong></p>
<p>这是因为，一开始<code>div2</code>不是相对于<code>div1</code>在定位的，而绝对定位是相对于有定位的父级来定位的，所以给<code>div1</code>加上了相对定位：<code>position: relative;</code>之后，<code>div1</code>就可以跟着<code>div1</code>移动了。换句话说，用来定位的那个父级不一定是结构上的父级。</p>
<p>下面我们弹出<code>div2</code>的<code>offsetParent.id</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>offsetParent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>:red;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">position</span>: relative;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#div2</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>:orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv2= <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</div><div class="line">            oDiv2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                alert(<span class="keyword">this</span>.offsetParent.id);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdfaqgzq4kj30p4078dg0.jpg" alt=""></p>
<p>可以知道<code>div2</code>的<code>offsetParent</code>是<code>div1</code>。</p>
<p>但是如果我们去除<code>div1</code>的定位的话,他就会不断地向上找。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>offsetParent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>:red;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">50px</span>;</div><div class="line">            <span class="comment">/*position: relative;*/</span></div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#div2</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>:orange;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">left</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oDiv2= <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</div><div class="line">            oDiv2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                alert(<span class="keyword">this</span>.offsetParent.id);</div><div class="line">                alert(<span class="keyword">this</span>.offsetParent.tagName);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdfdbsc6kqj30oz069wem.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdfdbnpl0fj30q3068weo.jpg" alt=""></p>
<p>可以看出来，此时的<code>div2</code>的<code>offsetParent</code>是<code>body</code>标签。</p>
<p>所以<code>offsetParent</code>是找出有定位的父级。</p>
<h4 id="首尾子节点"><a href="#首尾子节点" class="headerlink" title="首尾子节点"></a>首尾子节点</h4><h5 id="firstChild和firstElementChild"><a href="#firstChild和firstElementChild" class="headerlink" title="firstChild和firstElementChild"></a>firstChild和firstElementChild</h5><p>获取第一个子元素。</p>
<p><code>firstChild</code>一样也是存在兼容性问题，只有在IE下可以用。<br>在火狐下可以使用<code>firstElementChild</code>。</p>
<p>举个小例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>firstChild<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl= <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">            <span class="comment">//IE</span></div><div class="line"><span class="comment">//            oUl.firstChild.style.backgroundColor = "red";</span></div><div class="line">            <span class="comment">//FF</span></div><div class="line">            oUl.firstElementChild.style.backgroundColor = <span class="string">"orange"</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdfdt6i9pzj30jw03adfq.jpg" alt=""></p>
<p>那怎么处理这个兼容性问题呢？？</p>
<p>可以通过一个中间变量。具体操作如下;</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>firstChild<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl= <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">            <span class="keyword">var</span> oFirst=oUl.firstElementChild||oUl.firstChild;</div><div class="line">            oFirst.style.backgroundColor = <span class="string">"orange"</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样就没问题了。</p>
<p><strong>注意</strong>这里有一个小细节问题，<code>oUl.firstElementChild||oUl.firstChild</code>必须将<code>firstElementChild</code>写在前面，否则会出错。</p>
<h5 id="lastChild和lastElementChild"><a href="#lastChild和lastElementChild" class="headerlink" title="lastChild和lastElementChild"></a>lastChild和lastElementChild</h5><p>方法和注意点同上。</p>
<h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><h5 id="previousSibling和previousElementSibling"><a href="#previousSibling和previousElementSibling" class="headerlink" title="previousSibling和previousElementSibling"></a>previousSibling和previousElementSibling</h5><p>上一个兄弟节点。</p>
<p><code>previousSibling</code>只能IE使用<br><code>previousElementSibling</code>只能FF使用</p>
<p>方法和注意点和上面的差不多。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sibling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oli= <span class="built_in">document</span>.getElementById(<span class="string">"li2"</span>);</div><div class="line">            <span class="comment">//IE</span></div><div class="line"><span class="comment">//            oli.previousSibling.style.backgroundColor = "red";</span></div><div class="line">            <span class="comment">//FF</span></div><div class="line">            oli.previousElementSibling.style.backgroundColor = <span class="string">"orange"</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdfeci4nuuj30lh03jmx2.jpg" alt=""></p>
<p>解决方法也和上面一样</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sibling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oli= <span class="built_in">document</span>.getElementById(<span class="string">"li2"</span>);</div><div class="line">            <span class="keyword">var</span> oPrevious = oli.previousElementSibling||oli.previousSibling;</div><div class="line">            oPrevious.style.backgroundColor = <span class="string">"orange"</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"li2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>var oPrevious = oli.previousElementSibling||oli.previousSibling;</code>中的<code>previousElementSibling</code>一定要写在前面，否则不管用。</p>
<h5 id="nextSibling和nextElementSibling"><a href="#nextSibling和nextElementSibling" class="headerlink" title="nextSibling和nextElementSibling"></a>nextSibling和nextElementSibling</h5><p>方法与注意点同上。</p>
<h2 id="操纵元素属性"><a href="#操纵元素属性" class="headerlink" title="操纵元素属性"></a>操纵元素属性</h2><h3 id="元素属性操作"><a href="#元素属性操作" class="headerlink" title="元素属性操作"></a>元素属性操作</h3><p>有三种方式可以操作元素的属性：</p>
<ul>
<li>采用<code>.</code>语法；</li>
<li>采用<code>[]</code>语法。他和<code>.</code>语法一样，但是唯一区别就是，<code>[]</code>里面的属性可以变的。相当于传一个参数;</li>
<li>采用<code>DOM</code>方式；用<code>setAttribute(&#39;属性&#39;,&#39;值&#39;)</code>（设置属性值）和<code>getAttribute(&#39;属性&#39;)</code>（获取属性值）以及<code>removeAttribute(&#39;属性&#39;)</code>（删除属性值）。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM方式操作元素属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line"><span class="comment">//            //1.采用.语法</span></div><div class="line"><span class="comment">//            oTxt.value = '123';</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            //2.采用[]方式,他和.语法一样，但是唯一区别就是，[]里面的属性可以变的。相当于传一个参数</span></div><div class="line"><span class="comment">//            oTxt['value']='123';</span></div><div class="line"></div><div class="line">            <span class="comment">//3.DOM方式</span></div><div class="line">            oTxt.setAttribute(<span class="string">'value'</span>,<span class="string">'123'</span>);</div><div class="line">            alert(oTxt.getAttribute(<span class="string">'value'</span>));</div><div class="line">            oTxt.removeAttribute(<span class="string">'value'</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="DOM元素灵活查找"><a href="#DOM元素灵活查找" class="headerlink" title="DOM元素灵活查找"></a>DOM元素灵活查找</h2><h3 id="className选择元素"><a href="#className选择元素" class="headerlink" title="className选择元素"></a>className选择元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用Class选元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">            <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;aLi.length;i++)&#123;</div><div class="line">                <span class="keyword">if</span>(aLi[i].className==<span class="string">'box'</span>)&#123;</div><div class="line">                    aLi[i].style.backgroundColor=<span class="string">"red"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdffc41o77j30vq06ggll.jpg" alt=""></p>
<p>这个方法完全可以使用了，但是这样实在太麻烦了。下面我们将这个方法封装成一个函数。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用Class选元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">oParent,sClass</span>)</span>&#123;<span class="comment">//(父级，子级的class)</span></div><div class="line">            <span class="keyword">var</span> aEle = oParent.getElementsByName(<span class="string">'*'</span>);<span class="comment">//‘*’代表所有的标签元素</span></div><div class="line">            <span class="keyword">var</span> aResult=[];<span class="comment">//存放sClass的所有元素。</span></div><div class="line">            <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;aEle.length;i++)&#123;</div><div class="line">                <span class="keyword">if</span>(aEle[i].className==sClass)&#123;</div><div class="line">                    aResult.push(aEle[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            <span class="keyword">var</span> aLi = getByClass(oUl,<span class="string">'box'</span>);</div><div class="line">            <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;aLi.length;i++)&#123;</div><div class="line">                aLi[i].style.backgroundColor = <span class="string">"red"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建一个DOM元素"><a href="#创建一个DOM元素" class="headerlink" title="创建一个DOM元素"></a>创建一个DOM元素</h2><p><code>createElement(元素名)</code>创建一个元素。<br><code>appendChild(子节点)</code>将创建的子节点添加到调用这个方法的父节点里面。<br><code>innerHTML</code>元素的内容</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>创建DOM元素li<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> newlI = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);<span class="comment">//创建一个li标签</span></div><div class="line">                newlI.innerHTML = oTxt.value;<span class="comment">//innerHTML是向li里面添加内容</span></div><div class="line">                <span class="comment">//父.appendChild(子节点)</span></div><div class="line">                oUl.appendChild(newlI);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"创建li"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdfgfbt4o0j305y03jdfs.jpg" alt=""></p>
<p>上述代码中，<code>newlI.innerHTML = oTxt.value;</code>和<code>oUl.appendChild(newlI);</code>添加的先后顺序，有一丁点区别。如果先赋值，再添加新标签，那么页面只会渲染一遍；如果先添加新标签，再赋值就会渲染两遍。</p>
<h2 id="插入一个子节点"><a href="#插入一个子节点" class="headerlink" title="插入一个子节点"></a>插入一个子节点</h2><p><code>父节点.inserBefore(子节点，谁之前)</code>。<br><strong>注意：使用insertBefore的时候一定要先判断是否一开始就有一个标签</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>insertBefore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            <span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> newlI = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);<span class="comment">//创建一个li标签</span></div><div class="line">                newlI.innerHTML = oTxt.value;<span class="comment">//innerHTML是向li里面添加内容</span></div><div class="line">                <span class="comment">//判断是否一开始就有一个li</span></div><div class="line">                <span class="keyword">if</span>(aLi.length == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    oUl.appendChild(newlI);</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    oUl.insertBefore(newlI,aLi[<span class="number">0</span>]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"创建li"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdfgs5hglej306402pgli.jpg" alt=""></p>
<h2 id="删除DOM元素"><a href="#删除DOM元素" class="headerlink" title="删除DOM元素"></a>删除DOM元素</h2><p><code>父节点.removeChild(子节点)</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>removeChild<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line">            <span class="keyword">var</span> oUL = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; oA.length;i++)&#123;</div><div class="line">                oA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    oUL.removeChild(<span class="keyword">this</span>.parentNode);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>feyddy<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>xuzhonglin<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdfh1loxw2j305i01yaa0.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fdfh1oo678j303z014jr9.jpg" alt=""></p>
<h2 id="文档碎片"><a href="#文档碎片" class="headerlink" title="文档碎片"></a>文档碎片</h2><p><code>createDocumentFragment()</code></p>
<p>就拿创建<code>li</code>来解释：如果我们需要创建10000个<code>li</code>的话，普通的循环创建是创建一个添加一个，页面就渲染一个，这样就需要10000次。但是文档碎片就是将创建的1000个<code>li</code>先保存在文档碎片里面，然后最后一次性添加和渲染，只需要一遍。（当然这只是理论上的，实际应用怎么样？也许不尽如人意。）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档碎片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oBtn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</div><div class="line">            <span class="keyword">var</span> oUL = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            oBtn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();<span class="comment">//时间戳</span></div><div class="line">                <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">                    <span class="keyword">var</span> oli = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">                    oUL.appendChild(oli);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> finishTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">                <span class="keyword">var</span> differ = finishTime - startTime;</div><div class="line">                alert(<span class="string">"普通创建li"</span>+<span class="string">'时间差'</span>+differ+<span class="string">'毫秒'</span>);</div><div class="line">            &#125;</div><div class="line">            oBtn2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();<span class="comment">//时间戳</span></div><div class="line">                <span class="keyword">var</span> oFrag = <span class="built_in">document</span>.createDocumentFragment();<span class="comment">//创建文档碎片对象</span></div><div class="line">                <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">                    <span class="keyword">var</span> oli = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">                    oFrag.appendChild(oli);<span class="comment">//添加到文档碎片</span></div><div class="line">                &#125;</div><div class="line">                oUL.appendChild(oFrag);<span class="comment">//将文档碎片添加到oUL中</span></div><div class="line"></div><div class="line">                <span class="keyword">var</span> finishTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">                <span class="keyword">var</span> differ = finishTime - startTime;</div><div class="line">                alert(<span class="string">"碎片创建li"</span>+<span class="string">'时间差'</span>+differ+<span class="string">'毫秒'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通创建li"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"碎片创建li"</span> <span class="attr">id</span>=<span class="string">"btn2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdfhstvdzoj30p503uaad.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdfhstvdzoj30p503uaad.jpg" alt=""></p>
<p>从图中可以看出来用了碎片反而变慢了。。。。。。。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
            <tag> childNodes </tag>
            
            <tag> nodeType </tag>
            
            <tag> children </tag>
            
            <tag> parentNode </tag>
            
            <tag> offsetParent </tag>
            
            <tag> firstChild </tag>
            
            <tag> firstElementChild </tag>
            
            <tag> lastChild </tag>
            
            <tag> lastElementChild </tag>
            
            <tag> previousSibling </tag>
            
            <tag> previousElementSibling </tag>
            
            <tag> nextSibling </tag>
            
            <tag> nextElementSibling </tag>
            
            <tag> setAttribute </tag>
            
            <tag> getAttribute </tag>
            
            <tag> removeAttribute </tag>
            
            <tag> className </tag>
            
            <tag> createElement </tag>
            
            <tag> appendChild </tag>
            
            <tag> innerHTML </tag>
            
            <tag> inserBefore </tag>
            
            <tag> removeChild </tag>
            
            <tag> createDocumentFragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础学习（二）]]></title>
      <url>http://yoursite.com/2017/03/07/JavaScript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript基础知识点（二）"><a href="#JavaScript基础知识点（二）" class="headerlink" title="JavaScript基础知识点（二）"></a>JavaScript基础知识点（二）</h1><p>本文主要学习函数和数组两个。知识点见下图：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fde9kt7wpnj30w00dgac2.jpg" alt=""></p>
<a id="more"></a>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde9kxvq1bj30w00q9jvc.jpg" alt=""></p>
<p>源码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js-基础3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>函数返回值</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>1、函数返回值</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>什么是函数返回值<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 函数的执行结果<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 可以没有return<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>一个函数应该只返回一种类型的值<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>函数传参</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>1、可变参（不定参）：arguments</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>参数的个数可变，参数数组<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>2、例子1：求和</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>求所有参数的和<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>3、例子2：CSS函数</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>判断arguments.length<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>给参数取名，增强可读性<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>取非行间样式（不能用来设置）：<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- objc.currentStyle[attr]<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- getComputedStyle(obj,false)[attr]<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数组基础</div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>1、数组的使用</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- var arr = [12,23];<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- var arr = new Array(12,23,45);<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 没有任何差别，[]的性能略高，因为代码短<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>2、数组的属性</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>length<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 既可以获取，又可以设置<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 例子：快速清空数组<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>3、数组使用原则：数组中应该只存放一种类型的变量</div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>4、数组的方法</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- push（元素），从尾部添加<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- unshift（元素），从头部添加<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- pop（），从尾部删除<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- shift（），从头部删除<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>5、数组的排序</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>sort（[比较函数]），排序一个数组 <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 排序一个字符串数组<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 排序一个数字数组<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>6、转换类</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>concat（数组2） <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 连接两个数组<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>join（分隔符）<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- 用分隔符，组合数组元素，生成字符串<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>字符串split<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>7、插入、删除</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>splice <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>splice（开始，长度，元素...）<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>先删除，后插入<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>splice（开始，长度）<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>插入<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>splice（开始，0，元素...）<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>替换<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>#函数</p>
<h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>函数返回值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> a+b;</div><div class="line">            &#125;</div><div class="line">            alert(sum(<span class="number">6</span>,<span class="number">12</span>));</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde9o5vk7nj30e403tgln.jpg" alt=""></p>
<p>函数返回值就是通过<code>return</code>将一个函数里面的东西传至外面。上面例子中如果没有返回值或者说返回一个空<code>return ;</code>，这样就会<code>undefined</code>。</p>
<h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><p>它其实就是函数里面的参数数组。下面举个小例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>arguments<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                alert(<span class="built_in">arguments</span>.length);</div><div class="line">                alert(<span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">                alert(<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">            show(<span class="number">12</span>,<span class="number">5</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果;</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdea0s6667j30e303v3yj.jpg" alt=""><br><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdea0vp0zxj30dy03vt8q.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdea0ytbazj30e303w74b.jpg" alt=""></p>
<p>这样我们就很清楚的明白arguments的意思了。</p>
<p><strong>举个arguments的小应用:求和函数。</strong><br>arguments,也叫可变参（不定参），意思就是他可以随着传入参数个数的变化而变化。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>求和函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">                    sum += <span class="built_in">arguments</span>[i];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> sum;</div><div class="line">            &#125;</div><div class="line">            alert(sum(<span class="number">12</span>,<span class="number">5</span>,<span class="number">23</span>));</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdea93090lj30e103xaa3.jpg" alt=""></p>
<h3 id="CSS函数例子"><a href="#CSS函数例子" class="headerlink" title="CSS函数例子"></a>CSS函数例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                css(oDiv,<span class="string">'backgroundColor'</span>,<span class="string">'green'</span>);</div><div class="line">                alert(css(oDiv,<span class="string">'width'</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;<span class="comment">//获取</span></div><div class="line">                    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>].style[<span class="built_in">arguments</span>[<span class="number">1</span>]];</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">3</span>) &#123;<span class="comment">//设置</span></div><div class="line">                    <span class="built_in">arguments</span>[<span class="number">0</span>].style[<span class="built_in">arguments</span>[<span class="number">1</span>]] = <span class="built_in">arguments</span>[<span class="number">2</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"样式"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdebkgh4qjj306t026a9x.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdebllixbxj30ne02u74d.jpg" alt=""></p>
<p>从上面的第二附图中可以看出，并没有获取到div的宽度属性。这就是style的问题，因为这个style只能获取到行间样式，不能获取到在style标签里面设置的样式。</p>
<p><strong>如何取非行间的样式</strong>–<code>currentStyle</code>（获取计算后的样式），如果对于同一个标签有多个样式设置，他会显示优先级最高的那个样式。但是兼容性有问题，只能在IE下使用。</p>
<p>在火狐下可以使用<code>getComputedStyle(oDiv,false).width</code>;但是在IE又不可以使用。</p>
<p><strong>那么怎么解决这两个兼容性问题呢？</strong></p>
<p>我们可以发现在IE下的oDiv.currentStyle是个对象，但是在火狐下是个undefined。于是解决兼容性方法就出现了。利用if判断</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                css(oDiv,<span class="string">'backgroundColor'</span>,<span class="string">'green'</span>);</div><div class="line">                alert(css(oDiv,<span class="string">'width'</span>));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;<span class="comment">//获取</span></div><div class="line">                    <span class="keyword">if</span>(oDiv.currentStyle)&#123;</div><div class="line">                        <span class="comment">//IE</span></div><div class="line">                        <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>].currentStyle[<span class="built_in">arguments</span>[<span class="number">1</span>]];</div><div class="line">                    &#125;<span class="keyword">else</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="comment">//火狐</span></div><div class="line">                        <span class="keyword">return</span> getComputedStyle(<span class="built_in">arguments</span>[<span class="number">0</span>])[<span class="built_in">arguments</span>[<span class="number">1</span>]];</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">3</span>) &#123;<span class="comment">//设置</span></div><div class="line">                    <span class="built_in">arguments</span>[<span class="number">0</span>].style[<span class="built_in">arguments</span>[<span class="number">1</span>]] = <span class="built_in">arguments</span>[<span class="number">2</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"样式"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdebrx012lj30nd03v74f.jpg" alt=""></p>
<p>通过判断<code>oDiv.currentStyle</code>是否为真，然后分类操作。</p>
<p>但是这样感觉太乱了，我们可以对判断进行一下封装，这样可以到处使用。<br>于是我们先要明白两点：</p>
<ul>
<li>哪个元素</li>
<li>哪个样式</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                css(oDiv,<span class="string">'backgroundColor'</span>,<span class="string">'green'</span>);</div><div class="line">                alert(css(oDiv,<span class="string">'width'</span>));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(obj.currentStyle)&#123;</div><div class="line">                    <span class="comment">//IE</span></div><div class="line">                    <span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//火狐</span></div><div class="line">                    <span class="keyword">return</span> getComputedStyle(obj)[attr];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;<span class="comment">//获取</span></div><div class="line">                    <span class="keyword">return</span> getStyle(<span class="built_in">arguments</span>[<span class="number">0</span>],<span class="built_in">arguments</span>[<span class="number">1</span>]);</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">3</span>) &#123;<span class="comment">//设置</span></div><div class="line">                    <span class="built_in">arguments</span>[<span class="number">0</span>].style[<span class="built_in">arguments</span>[<span class="number">1</span>]] = <span class="built_in">arguments</span>[<span class="number">2</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"样式"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样封装的<code>getStyle(obj, attr)</code>函数就可以直接放在任何地方使用了。</p>
<p><code>currentStyle</code>优缺点：<br>优点：</p>
<ul>
<li>可以取一些默认值</li>
</ul>
<p>缺点：</p>
<ul>
<li>复合样式：例如background，它有backgroundColor，backgroundImage等等，所以无法获取background，但是可以获取它有backgroundColor</li>
<li>基本样式：如width，就可以直接获取</li>
</ul>
<p><strong>但是你知道<code>arguments[0]</code>是什么吗？</strong></p>
<p>所以我们还需要继续优化：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#div1</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                css(oDiv,<span class="string">'backgroundColor'</span>,<span class="string">'green'</span>);</div><div class="line">                alert(css(oDiv,<span class="string">'width'</span>));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, attr</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(obj.currentStyle)&#123;</div><div class="line">                    <span class="comment">//IE</span></div><div class="line">                    <span class="keyword">return</span> obj.currentStyle[attr];</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="comment">//火狐</span></div><div class="line">                    <span class="keyword">return</span> getComputedStyle(obj)[attr];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">obj,attr,value</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;<span class="comment">//获取</span></div><div class="line">                    <span class="keyword">return</span> getStyle(obj,attr);</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">3</span>) &#123;<span class="comment">//设置</span></div><div class="line">                    obj.style[attr] = value;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"样式"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>因为<code>css(obj,attr,value)</code>中的三个参数分别对应<code>arguments[0],arguments[1],arguments[2]</code>。它们是等价的。但是这样我就知道参数的用意了。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//性能高一点点,因为代码少</span></div><div class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"> alert(arr[<span class="number">0</span>]);</div><div class="line"><span class="comment">//很少用</span></div><div class="line"> <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</div><div class="line"> alert(arr1);</div></pre></td></tr></table></figure>
<h2 id="数组的个数length"><a href="#数组的个数length" class="headerlink" title="数组的个数length"></a>数组的个数length</h2><p>这个length没什么特别的，但是有一点比较好玩，那就是它可以赋值，然后影响数组的个数。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的定义<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">            alert(arr);</div><div class="line">            arr.length = <span class="number">4</span>;</div><div class="line">            alert(arr);</div><div class="line">            arr.length = <span class="number">10</span>;</div><div class="line">            alert(arr);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdecm5ip28j30ho03vjrh.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdecm9ckv1j30hc03y0st.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdecnfxdjlj30gu03oglo.jpg" alt=""></p>
<p>上面的很多空的那就是undefined。<br>如果想快速清空数组们只需要让length=0就行了。</p>
<h2 id="数组使用原则–数组中只存一种类型的变量。"><a href="#数组使用原则–数组中只存一种类型的变量。" class="headerlink" title="数组使用原则–数组中只存一种类型的变量。"></a>数组使用原则–数组中只存一种类型的变量。</h2><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="push（数组尾部添加）"><a href="#push（数组尾部添加）" class="headerlink" title="push（数组尾部添加）"></a>push（数组尾部添加）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">            arr.push(<span class="number">4</span>);</div><div class="line">            alert(arr);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdectkk7vvj30e103x74c.jpg" alt=""></p>
<h4 id="unshift（数组头部添加）"><a href="#unshift（数组头部添加）" class="headerlink" title="unshift（数组头部添加）"></a>unshift（数组头部添加）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">            arr.unshift(<span class="number">100</span>);</div><div class="line">            alert(arr);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fded0azcmjj30dy03waa4.jpg" alt=""></p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="pop（数组尾部删除）"><a href="#pop（数组尾部删除）" class="headerlink" title="pop（数组尾部删除）"></a>pop（数组尾部删除）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">            arr.pop();</div><div class="line">            alert(arr);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdecvo4zwij30e703u0ss.jpg" alt=""></p>
<h4 id="shift（数组头部删除）"><a href="#shift（数组头部删除）" class="headerlink" title="shift（数组头部删除）"></a>shift（数组头部删除）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组的方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">            arr.shift();</div><div class="line">            alert(arr);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdecyij041j30e103w3yk.jpg" alt=""></p>
<h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><p>sort():这个函数只能对字符串进行排序。如果遇到数字就会出现问题。<br>如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//按照首字母排序</span></div><div class="line">            <span class="keyword">var</span> arr = [<span class="string">"feyddy"</span>,<span class="string">"crise"</span>,<span class="string">"blue"</span>,<span class="string">"haohao"</span>];</div><div class="line">            arr.sort();</div><div class="line">            alert(arr);</div><div class="line"></div><div class="line">            <span class="comment">//数字</span></div><div class="line">            <span class="keyword">var</span> arr2 = [<span class="number">12</span>,<span class="number">345</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">24</span>];</div><div class="line">            arr2.sort();</div><div class="line">            alert(arr2);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fded7rd827j30dy03udfx.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fded7uwf46j30dw03udfw.jpg" alt=""></p>
<p>这样我们可以看出：</p>
<p>对于字母来说，完全是按照首字母的顺序进行排列的；<br>但是对于数字，也是按照第一个数字的大小进行排序的，这就出问题了。</p>
<p><strong>那怎么解决呢？</strong></p>
<p>给sort一个比较函数作为参数。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数组排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//数字</span></div><div class="line">            <span class="keyword">var</span> arr2 = [<span class="number">12</span>,<span class="number">345</span>,<span class="number">1</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">24</span>];</div><div class="line">            arr2.sort(<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> num1 - num2;</div><div class="line">            &#125;);</div><div class="line">            alert(arr2);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdedddqvehj30dy03wjrg.jpg" alt=""></p>
<h2 id="数组的转换类"><a href="#数组的转换类" class="headerlink" title="数组的转换类"></a>数组的转换类</h2><h3 id="concat-数组2-连接两个数组"><a href="#concat-数组2-连接两个数组" class="headerlink" title="concat(数组2)连接两个数组"></a>concat(数组2)连接两个数组</h3><p>将数组2里的元素全部添加到前面的数组中，但是两个数组本身不会改变，生成的是一个新的数组。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> arr1 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>];</div><div class="line">        <span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];</div><div class="line">        alert(arr1.concat(arr2));</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdedz02wewj30dx03t74c.jpg" alt=""></p>
<h3 id="join（把数组变成字符串）"><a href="#join（把数组变成字符串）" class="headerlink" title="join（把数组变成字符串）"></a>join（把数组变成字符串）</h3><p>将数组的元素拼接成一个大的字符串。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>join<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</div><div class="line">        alert(arr.join(<span class="string">'-'</span>));</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdee2oam5pj30e103vdfv.jpg" alt=""></p>
<h3 id="split（把字符串改成数组）"><a href="#split（把字符串改成数组）" class="headerlink" title="split（把字符串改成数组）"></a>split（把字符串改成数组）</h3><p>split与join相反。但是取出来每一个的值的类型也是字符型。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>split<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> str = <span class="string">"1-2-3-4-5-6-7"</span>;</div><div class="line">        <span class="keyword">var</span> arr = str.split(<span class="string">"-"</span>);</div><div class="line">        alert(arr);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdee5wbas7j30dx03gt8r.jpg" alt=""></p>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><ul>
<li>中间删除</li>
</ul>
<p>splice(开始位置，删除的长度)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>splice<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">        arr.splice(<span class="number">3</span>,<span class="number">2</span>);</div><div class="line">        alert(arr);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdee9ncldrj30dv03t74b.jpg" alt=""></p>
<ul>
<li>中间插入</li>
</ul>
<p>splice(开始位置，删除的长度(为0个)，添加的元素(多个))</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>splice<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">        arr.splice(<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);</div><div class="line">        alert(arr);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdeed7ffp5j30dz03wmx8.jpg" alt=""></p>
<ul>
<li>替换元素</li>
</ul>
<p>splice(开始位置，删除的长度，添加的元素(删除的长度个))</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>splice<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">        arr.splice(<span class="number">3</span>,<span class="number">2</span>,<span class="string">"a"</span>,<span class="string">"b"</span>);</div><div class="line">        alert(arr);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdeegccmmej30dr03uq2z.jpg" alt=""></p>
<p>总结：<br>其实splice方法说到底就是一种：先删除，后插入。只不过有个个数正好相同，所以巧妙的实现了不同的效果。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript基础学习（一）]]></title>
      <url>http://yoursite.com/2017/03/07/JavaScript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>丛今天开始我将会接触JavaScript，当然我还是会继续我的学习笔记的分享。所有的笔记我都会通过代码的形式以网页版显示出来。</p>
<h1 id="JavaScript基础知识点（一）"><a href="#JavaScript基础知识点（一）" class="headerlink" title="JavaScript基础知识点（一）"></a>JavaScript基础知识点（一）</h1><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fddxv25ab7j30ts0g875c.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fddxvsd54fj30tp0d0aa9.jpg" alt=""></p>
<a id="more"></a>
<p>下面是笔记的源码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.base</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.varType</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-tag">dl</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>JavaScript组成<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>ECMAScript：解释器、翻译。几乎没有兼容性问题。能力很少，一般也就是加减乘除，创建变量等<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>DOM:Document Object Model。他给了JS能够操作界面的能力。有一些兼容性问题<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>BOM:Browser Object Model。它给了JS操作浏览器的能力，也就是对window的操作。它没有兼容性问题，几乎不兼容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>各组成部分的兼容性，兼容性问题的由来。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"varType"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>变量类型（1）</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>类型：typeof运算符<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>用法、返回值<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>常见类型：number、string、boolean、undefined、object、function<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>一个变量应该只存放一种类型的数据<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>变量类型（2）</div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>数据类型转换<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>例子：计算两个文本框的和<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>显式类型转换（强制类型转换）--- parseInt()、parseFloat()---NaN的意义和检测<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>隐式类型转换 --- ==、===、减法<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>变量作用域和闭包</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>变量作用域（作用范围）<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>局部变量、全局变量<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>什么是闭包<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>子函数可以使用父函数中的局部变量<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>之前一直在使用闭包<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>网上对于闭包的定义<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>命名规范（1）</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>命名规范及必要性<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>可读性---能看懂<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>规范性---符合规则<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>匈牙利命名法<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>类型前缀<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>首字母大写<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>运算符<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>程序流程控制</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>判断：if、switch、？<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>循环：while、for<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>跳出：break、continue<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>什么是真、什么是假<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span>Json</div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>什么是Json<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Json和数组<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Json和for in<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><p>通过下面的代码，你可以很详细的知道JS里面的几种类型：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line">        alert(<span class="keyword">typeof</span> (a));<span class="comment">//number</span></div><div class="line"></div><div class="line">        a = <span class="string">'abc'</span></div><div class="line">        alert(<span class="keyword">typeof</span> (a));<span class="comment">//string</span></div><div class="line"></div><div class="line">        a = <span class="literal">true</span>;</div><div class="line">        alert(<span class="keyword">typeof</span> (a));<span class="comment">//boolean</span></div><div class="line"></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            a = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">            alert(<span class="keyword">typeof</span> (a));<span class="comment">//object</span></div><div class="line"></div><div class="line">            a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                print(<span class="string">'adddd'</span>);</div><div class="line">            &#125;</div><div class="line">            alert(<span class="keyword">typeof</span> (a));<span class="comment">//function</span></div><div class="line"></div><div class="line">            alert(<span class="keyword">typeof</span> (b));<span class="comment">//undefined</span></div><div class="line"></div><div class="line">            <span class="keyword">var</span> b;</div><div class="line">            alert(<span class="keyword">typeof</span> (b));<span class="comment">//undefined</span></div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line">             * undefined出现的情况</div><div class="line">             * 1.真的没定义</div><div class="line">             * 2.虽然定义了，但是没给值</div><div class="line">             */</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>asdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>有的时候数据类型转换是必须的。下面我们举一个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>变量类型（2）-数据类型转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> txt1 = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            <span class="keyword">var</span> txt2 = <span class="built_in">document</span>.getElementById(<span class="string">'txt2'</span>);</div><div class="line">            <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(txt1.value + txt2.value);<span class="comment">//这个时候里面的是string类型，所以简单的+只是拼接。</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"txt2"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"求和"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的代码运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde0gczuh8j30n404h0td.jpg" alt=""></p>
<p>从运行结果我们看出并不是我们需要的结果：35</p>
<p><strong>为什么呢？</strong><br>因为这个时候里面的是两个字符串，也就是’12’+’23’，这样的话电脑只会进行字符串的拼接而已。这里我们就要强制转换一下数据类型了。</p>
<h1 id="显式类型转换–-字符转数字parseInt-和parseFloat"><a href="#显式类型转换–-字符转数字parseInt-和parseFloat" class="headerlink" title="显式类型转换–[字符转数字parseInt()和parseFloat()]"></a>显式类型转换–[字符转数字parseInt()和parseFloat()]</h1><h2 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h2><p>与其说他是字符串转数字，还不如说是从字符串中提取数字。</p>
<p>就拿上面的例子来说：</p>
<ul>
<li>如果我们将<code>alert(txt1.value + txt2.value);</code>这段代码改成<code>alert(parseInt(txt1.value)+ parseInt(txt2.value));</code>之后，运行结果就会是我们想要的35。</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fde0pjypkoj30ne04kgm9.jpg" alt=""></p>
<ul>
<li>如果我在其中的一个输入框中先输入数字后面紧跟字母的话，会出现什么情况呢？</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fde0rdnj9uj30na04kmxt.jpg" alt=""></p>
<p>  从运行结果可以看出：<code>parseInt()</code>是从一串字符串中提取数字出来，不是数字的就自动忽略。</p>
<ul>
<li>如果我们在字母后面再加上数字，他会不会也提取呢？</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fde0tg3ishj30nc04k0te.jpg" alt=""></p>
<p>  从运行结果可以看出：答案是不会，也就是说，他是从第一位开始搜索，遇到数字后提取数字，只要一遇见字母就不往后判断了。</p>
<ul>
<li>如果我们个输入数字，一个输入字母，会怎么办？</li>
</ul>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fde0vdc3lij30nd04daap.jpg" alt=""></p>
<p>  从运行结果可以看出：NaN(Not a Number)不是一个数字。也就是无法提取出一个合理的数字。</p>
<h2 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h2><p>他的用法和<code>parseInt()</code>用法一样，只不过是提取小数。</p>
<h1 id="检测NaN"><a href="#检测NaN" class="headerlink" title="检测NaN"></a>检测NaN</h1><p>首先列举一个好玩儿又奇怪的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>检测NaN<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> a=<span class="built_in">parseInt</span>(<span class="string">'abc'</span>);</div><div class="line">        alert(a==<span class="literal">NaN</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>按照上面的写法，我们预测的结果应该是<code>true</code>。但是实际上的结果却是：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde1a3ssjzj30gb03ymx8.jpg" alt=""></p>
<p>由此，我们可以总结出一个规律：不要拿任何类型和NaN比较，因为他们永远不会相等的。</p>
<p>此时，我们需要使用到一个函数’isNaN(值)’。<br>我们将上面代码里的<code>alert(a==NaN);</code>替换成<code>alert(isNaN(a));</code><br>运行结果如下;</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde1f4gvchj30gy03xglo.jpg" alt=""></p>
<p>学到这里，我觉得有必要完善一下一开始的代码：最起码提醒下用户输入的那个有错误：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据类型转换完善<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> txt1 = <span class="built_in">document</span>.getElementById(<span class="string">'txt1'</span>);</div><div class="line">            <span class="keyword">var</span> txt2 = <span class="built_in">document</span>.getElementById(<span class="string">'txt2'</span>);</div><div class="line">            <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line">            btn1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> firstValue = <span class="built_in">parseFloat</span>(txt1.value);</div><div class="line">                <span class="keyword">var</span> secondValue = <span class="built_in">parseFloat</span>(txt2.value);</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">isNaN</span>(firstValue))</div><div class="line">                &#123;</div><div class="line">                    alert(<span class="string">"第一个输入有误"</span>);</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isNaN</span>(secondValue))</div><div class="line">                &#123;</div><div class="line">                    alert(<span class="string">"第二个输入有误"</span>);</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    alert(firstValue+secondValue);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"txt2"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"求和"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fde1nhuklfj30ni04dwf6.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fde1nlu9ijj30nh04hjs3.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fde1npgk5ej30nb04eq3m.jpg" alt=""></p>
<h1 id="隐式类型转换–-‘-’和’-’以及减、乘、除"><a href="#隐式类型转换–-‘-’和’-’以及减、乘、除" class="headerlink" title="隐式类型转换–[‘==’和’===’以及减、乘、除]"></a>隐式类型转换–[‘==’和’===’以及减、乘、除]</h1><h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p><code>==</code>：先把两边的东西转成一样的类型，然后比较</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>隐式类型转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> a = <span class="string">'12'</span>;</div><div class="line">        <span class="keyword">var</span> b = <span class="number">12</span>;</div><div class="line">        alert(a==b);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fde1v5ktcnj30n703zaa5.jpg" alt=""></p>
<h2 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h2><p><code>===</code>：不转换，直接比较</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>隐式类型转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> a = <span class="string">'12'</span>;</div><div class="line">        <span class="keyword">var</span> b = <span class="number">12</span>;</div><div class="line">        alert(a===b);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fde1vdu7l4j30nd040mx9.jpg" alt=""></p>
<h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><p>我们知道如果两个字符串相加，那结果肯定是字符串的拼接，但是如果是两个字符串相减呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>隐式类型转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> a = <span class="string">'12'</span>;</div><div class="line">        <span class="keyword">var</span> b = <span class="number">12</span>;</div><div class="line">        alert(a-b);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fde1z4usltj30ek03vq2z.jpg" alt=""></p>
<p>乘法和除法也一样。</p>
<p><strong>那为什么加法就不行呢？</strong></p>
<p>原因是因为<code>+</code>有两层含义：</p>
<ul>
<li>字符串连接（如果遇到有字符串的话，计算机优先会选择字符串拼接）</li>
<li>数字相加</li>
</ul>
<h1 id="变量作用域（作用范围）"><a href="#变量作用域（作用范围）" class="headerlink" title="变量作用域（作用范围）"></a>变量作用域（作用范围）</h1><p>局部变量：定义在一个函数里，只能在这个函数里用。<br>全部变量：不定义在任何一个函数里，可以在任何地方使用。</p>
<p>下面的例子中<code>a</code>为局部变量，<code>b</code>为全局变量。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>变量作用域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> b;<span class="comment">//全部变量：不定义在任何一个函数里，可以在任何地方使用。</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> a = <span class="number">12</span>;<span class="comment">//局部变量：定义在一个函数里，只能在这个函数里用</span></div><div class="line">                b=<span class="number">20</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//                alert(a);</span></div><div class="line">                alert(b);</div><div class="line">            &#125;</div><div class="line">            aaa();</div><div class="line">            bbb();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外还有一个作用域例子就是闭包：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>变量作用域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        </div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;<span class="comment">//父函数</span></div><div class="line">                <span class="keyword">var</span> a = <span class="number">12</span>;</div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>)</span>&#123;<span class="comment">//子函数</span></div><div class="line">                    alert(a);<span class="comment">//子函数可以使用父函数的局部变量</span></div><div class="line">                &#125;</div><div class="line">                bbb();</div><div class="line">            &#125;</div><div class="line">            aaa();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>匈牙利命名法：</p>
<ul>
<li><p>命名前缀：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde6m2qqx5j30kl0b6aj1.jpg" alt=""></p>
</li>
<li><p>驼峰命名法</p>
</li>
</ul>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="加、-减、-乘、-除、-取模（取余）"><a href="#加、-减、-乘、-除、-取模（取余）" class="headerlink" title="+加、-减、*乘、/除、%取模（取余）"></a>+加、-减、*乘、/除、%取模（取余）</h2><p>重点讲解下取模。下面我们通过一个小例子来解释下取模的应用：隔行变色。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>隔行变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">            <span class="keyword">var</span> oLis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;oLis.length;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    oLis[i].style.backgroundColor = <span class="string">"purple"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde6zqjaxlj30wd04sq2v.jpg" alt=""></p>
<p>再举一个时间转换的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>秒转时间<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> a = <span class="number">67</span>;</div><div class="line">            alert(<span class="built_in">parseInt</span>(a/<span class="number">60</span>)+<span class="string">"分"</span>+a%<span class="number">60</span>+<span class="string">"秒"</span>);<span class="comment">//parseInt有取整的意思。</span></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fde74jvinhj30ej0420st.jpg" alt=""></p>
<p>其他的一些运算符就不多说了，基本上和其他语言都是差不多的。</p>
<h1 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h1><p>break：终止整个循环<br>continue：终止本次循环</p>
<h1 id="Json和for-in的结合"><a href="#Json和for-in的结合" class="headerlink" title="Json和for in的结合"></a>Json和for in的结合</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Json和for in<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> objc = &#123;<span class="attr">a</span>: <span class="number">5</span>,<span class="attr">b</span>: <span class="number">12</span>,<span class="attr">c</span>:<span class="string">"我是c"</span>&#125;;<span class="comment">//一个json对象</span></div><div class="line">            <span class="keyword">var</span> attr=<span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span>(attr <span class="keyword">in</span> objc) &#123;</div><div class="line">                alert(attr);<span class="comment">//显示所有的a,b,c</span></div><div class="line">                alert(attr + <span class="string">'='</span> + objc[attr]);<span class="comment">//显示a,b,c和对应的值5,12,"我是c"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 知识点 </tag>
            
            <tag> typeof </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DIV+CSS页面布局学习笔记（二）]]></title>
      <url>http://yoursite.com/2017/03/05/DIV-CSS%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="DIV-CSS页面布局（二）"><a href="#DIV-CSS页面布局（二）" class="headerlink" title="DIV+CSS页面布局（二）"></a>DIV+CSS页面布局（二）</h1><h2 id="登录注册界面的简单实现"><a href="#登录注册界面的简单实现" class="headerlink" title="登录注册界面的简单实现"></a>登录注册界面的简单实现</h2><p>首先我们要解决的问题就是，无论怎么缩放浏览器，登录注册界面始终都要显示在窗口的中间。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        .login &#123;</div><div class="line">            position: absolute;</div><div class="line">            left: 50%;</div><div class="line">            top: 50%;</div><div class="line">            width: 300px;</div><div class="line">            height: 200px;</div><div class="line">            margin-top: -100px;</div><div class="line">            margin-left: -150px;</div><div class="line">            background-color: purple;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdcade4h1fj30r40eojtp.jpg" alt=""></p>
<p>但是我们往往看到的注册界面都比较大气，基本都是整个页面的布局。但是如果我们一味的缩小界面，而让注册界面整个都适配界面大小，那样的话，如果达到太小的时候就很难看了。所以一般设置页面加上一个最小的宽度或者高度。那么怎么实现呢？</p>
<p>其实很简单，那就是在一个div1里面加上一个div2来设置这个div2的宽度就可以了。</p>
<h2 id="区块居中设计"><a href="#区块居中设计" class="headerlink" title="区块居中设计"></a>区块居中设计</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        body &#123;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line">        .container &#123;</div><div class="line">            width: 960px;</div><div class="line">            height: 800px;</div><div class="line">            background-color: #cccccc;</div><div class="line">            margin: 0 auto;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"font-size: 50px;"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdcbmzwvpcj30wx0ipdiq.jpg" alt=""></p>
<p>标准的浏览器只需要设置margin为自动就行，但是IE浏览器不兼容，就需要设置body的<code>text-align: center</code>。但是这样的话body里面所有的文本都默认是设置的center。</p>
<h2 id="设置两列浮动的布局"><a href="#设置两列浮动的布局" class="headerlink" title="设置两列浮动的布局"></a>设置两列浮动的布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        body &#123;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line">        .container &#123;</div><div class="line">            width: 960px;</div><div class="line">            height: 800px;</div><div class="line">            background-color: #cccccc;</div><div class="line">            margin: 0 auto;</div><div class="line">        &#125;</div><div class="line">        .leftside &#123;</div><div class="line">            float: left;</div><div class="line">            background-color: orange;</div><div class="line">            width: 600px;</div><div class="line">            height: 400px;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        .rightside &#123;</div><div class="line">            float: right;</div><div class="line">            background-color: purple;</div><div class="line">            width: 300px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"font-size: 50px;"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rightside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdcc7601xrj30uu0hqdg5.jpg" alt=""></p>
<h2 id="设置三列浮动的布局"><a href="#设置三列浮动的布局" class="headerlink" title="设置三列浮动的布局"></a>设置三列浮动的布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        body &#123;</div><div class="line">            text-align: center;</div><div class="line">        &#125;</div><div class="line">        .container &#123;</div><div class="line">            width: 960px;</div><div class="line">            height: 800px;</div><div class="line">            background-color: #cccccc;</div><div class="line">            margin: 0 auto;</div><div class="line">        &#125;</div><div class="line">        .leftside &#123;</div><div class="line">            float: left;</div><div class="line">            background-color: orange;</div><div class="line">            width: 200px;</div><div class="line">            height: 400px;</div><div class="line">            margin-right: 10px;</div><div class="line">        &#125;</div><div class="line">        .main &#123;</div><div class="line">            float: left;</div><div class="line">            background-color: yellow;</div><div class="line">            width: 530px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">        .rightside &#123;</div><div class="line">            float: right;</div><div class="line">            background-color: purple;</div><div class="line">            width: 200px;</div><div class="line">            height: 400px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"font-size: 50px;"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rightside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdcc6w1vosj30uu0dxt8x.jpg" alt=""></p>
<h2 id="设置多列浮动的布局"><a href="#设置多列浮动的布局" class="headerlink" title="设置多列浮动的布局"></a>设置多列浮动的布局</h2><p>与上面的类似。我们可以通过一个类名，设置所有的div，<code>float:left+margin-left</code>。</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> float </tag>
            
            <tag> auto </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DIV+CSS页面布局学习笔记（一）]]></title>
      <url>http://yoursite.com/2017/03/05/DIV-CSS%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="DIV-CSS页面布局（一）"><a href="#DIV-CSS页面布局（一）" class="headerlink" title="DIV+CSS页面布局（一）"></a>DIV+CSS页面布局（一）</h1><h2 id="采用DIV-CSS模式的网站具有以下优势"><a href="#采用DIV-CSS模式的网站具有以下优势" class="headerlink" title="采用DIV+CSS模式的网站具有以下优势"></a>采用DIV+CSS模式的网站具有以下优势</h2><ul>
<li>表现和内容相分离</li>
<li>代码简洁，提高页面浏览速度</li>
<li>易于维护和改版</li>
<li>提高搜索引擎对网页的索引效率</li>
</ul>
<a id="more"></a>
<h2 id="“无意义”的HTML元素div和span"><a href="#“无意义”的HTML元素div和span" class="headerlink" title="“无意义”的HTML元素div和span"></a>“无意义”的HTML元素div和span</h2><ul>
<li>HTML只是赋予内容的手段，大部分HTML标签都有其意义（例如，标签p创建段落，h1标签创建标题等等）的，然而div和span标签似乎没有任何内容上的意义，听起来就像一个泡沫做成的锥子一样无用。但实际上，与CSS结合起来后，它们被用的十分广泛。你所需要记住的就是span和div是“无意义”的标签。它们的存在纯粹是应用样式，所以当样式表失效时，它就没有任何作用。</li>
<li>它们被用来组合成一大块的HTML代码并赋予一定的信息，大部分用类属性class和标识属性id与元素联系起来。span和div的不同之处在于span是内联的，用在一小块的内联HTML中。而div元素是块级的（简单地说，它等同于前后有断行），用于组合一大块的代码，为HTML文档内大块的内容提供结构和背景的方法，可以包含段落，标题，表格，甚至其他部分，这使div便于建立不同集成的类。</li>
<li>div的其实标签和结束标签之间的所有内容都是用来构建这个块的，其中所包含元素的特性由div标签的属性来控制，或者是通过使用样式表格化这个块来进行控制。</li>
</ul>
<p>下面举个例子来简单的解释下什么叫无意义</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"font-size: 50px;"</span>&gt;</span></div><div class="line"></div><div class="line">This is a line of words <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">This is a line of words <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a line of words<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdb2y7nsgtj30cu06zq3f.jpg" alt=""></p>
<p>由运行结果，我们可以看出：</p>
<ul>
<li>div里面的内容和不加任何标签显示的效果是一样的。但是有些标签内的文字本身具有不同的样式，这样的话，我们就可以用div标签来自己定义样式，不用其他的标签的样式。</li>
<li>span标签不带换行功能，是内联用；div带有换行功能，是大的区块用。</li>
</ul>
<h2 id="页面布局的W3C盒子模型"><a href="#页面布局的W3C盒子模型" class="headerlink" title="页面布局的W3C盒子模型"></a>页面布局的W3C盒子模型</h2><ul>
<li><p>每个HTML元素都可以看作一个装了东西盒子，盒子具有宽度（width）和高度（height），盒子里面的内容到盒子的边框之间的距离即填充（padding），盒子本身有边框（border），而盒子边框外和其他盒子之间，还有边界（margin）。</p>
<p>  <img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdb49d226kj30ia05sgop.jpg" alt=""></p>
</li>
<li><p>一般的浏览器是符合W3C标准的，也就是<br>  设置的宽高是内容的宽高，然后在外面加上padding,border,margin。最后整个盒子完全比设置的宽高要大。</p>
</li>
<li>IE浏览器不符合W3C标准，即设置的宽高是除margin之外的宽高，也就是，先是最外面有一个margin，然后里面是设置的宽高，宽高里面是border以及padding。最后盒子里面显示的内容比设置的要小很多。</li>
</ul>
<p>那么怎么解决IE与非IE浏览器div大小兼容问题？</p>
<p>我们可以使用一个<code>!important</code>。<br>它在IE浏览器里面不会被识别，但是在非IE浏览器中会被识别。<br>所以我们可以对一个div属性设置两个值。如：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">250px</span> <span class="meta">!important</span>;</div><div class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话，在IE浏览器中就不会识别<code>!important</code>，于是就会采用后设置的属性值；但是在非IE浏览器中就会识别，从而优先使用<code>!important</code>的属性值。</p>
<h4 id="那么什么时候该考虑到兼容性的问题呢？"><a href="#那么什么时候该考虑到兼容性的问题呢？" class="headerlink" title="那么什么时候该考虑到兼容性的问题呢？"></a>那么什么时候该考虑到兼容性的问题呢？</h4><p>在设置了宽度和高度之后且使用了border或者padding之后。</p>
<p><code>&lt;!DOCTYPE html&gt;</code>这个貌似可以强制IE符合标准。</p>
<h1 id="和页面布局有关的CSS属性"><a href="#和页面布局有关的CSS属性" class="headerlink" title="和页面布局有关的CSS属性"></a>和页面布局有关的CSS属性</h1><h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>这个属性一般会和<code>top</code>和<code>left</code>两个属性一起使用，</p>
<h4 id="static-默认为静态的"><a href="#static-默认为静态的" class="headerlink" title="static(默认为静态的)"></a>static(默认为静态的)</h4><h4 id="absolute-一般用的不多"><a href="#absolute-一般用的不多" class="headerlink" title="absolute(一般用的不多)"></a>absolute(一般用的不多)</h4><p><code>absolute</code>是为了让盒子以网页的顶部（top）和左边（left）为起始点进行固定布局。如果内容较多，上下左右滑动网页内容，盒子也会跟随着滑动。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">left</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span>这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span>这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是第一个内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>这是第二个内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fdb5qyz4c7j30mb0hsdip.jpg" alt=""></p>
<p>当我向下滑动网页到最底部的时候：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdb5s07d5kj30mb0hudit.jpg" alt=""></p>
<h4 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h4><p>相对于自己默认的位置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">150px</span>;</div><div class="line">            <span class="attribute">left</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.three</span> &#123;</div><div class="line">            <span class="comment">/*position: relative;*/</span></div><div class="line">            <span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">left</span>:<span class="number">0px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是第一个内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>这是第二个内容</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></div><div class="line">        three的原始位置</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdb6cxw8r1j30fi0c90t2.jpg" alt=""></p>
<p>下面设置相对于上面的原始位置向上偏移10像素，向左偏移20像素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">150px</span>;</div><div class="line">            <span class="attribute">left</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.three</span> &#123;</div><div class="line">            <span class="attribute">position</span>: relative;</div><div class="line">            <span class="attribute">top</span>: -<span class="number">10px</span>;</div><div class="line">            <span class="attribute">left</span>:-<span class="number">20px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是第一个内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>这是第二个内容</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></div><div class="line">        相对位置的DIV</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdb6gbkkraj30ik0ab74j.jpg" alt=""></p>
<p>我们可以看出，<code>.three</code>的div的原始位置是<code>.two</code>的，但是为什么原始位置没有和<code>.two</code>的重叠起来，那是因为里面还有个文字盒子，所以<code>.three</code>按照文档流就被挤到文字下面。</p>
<h4 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h4><p>固定在当前窗口的某个界面，这个和absolute的效果相反，他不会随着页面的上下左右滑动而滑动。一直会让你看到他的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">position</span>: fixed;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span>这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span>这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是fixedDiv<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdb6p585qgj30me0hrju0.jpg" alt=""></p>
<p>从图中的滑动条可以看到，无论怎么滑动页面，fixedDiv一直在窗口显示着。而且位置也在同一个地方。</p>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>决定层的先后顺序和覆盖关系，值高的元素会覆盖值低的元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">top</span>: <span class="number">150px</span>;</div><div class="line">            <span class="attribute">left</span>:<span class="number">160px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span>这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span>这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">这是一些文字内容 <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是第一个内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>这是第二个内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdb5v6bwj7j30m80hlgnz.jpg" alt=""></p>
<p>由图我们可以知道，两个盒子重合了。这个时候我们可以用<code>z-index</code>指定重叠顺序。</p>
<p>如果我们将上面的<code>.one</code>添加<code>z-index: 1;</code>,<code>.two</code>添加<code>z-index: 0;</code>,就会出现下面的结果</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fdb60zd17pj30mf0hotbj.jpg" alt=""></p>
<h2 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h2><p>文本对齐方式:靠左对齐（left）、居中对齐（center）、靠右对齐（right）</p>
<p>那么怎么才能使文本在垂直方向居中对齐呢？下面介绍两种方法：</p>
<ul>
<li><p>利用padding。不设置盒子的高度，用padding使得内容距离上下相同的距离。此时的盒子高度会随着内容的高度自动变化。</p>
   <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">10px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是居中文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>运行效果：
![](https://ww1.sinaimg.cn/large/006tKfTcgy1fdbmd5t4grj30mv06g0st.jpg)

但是这个会随着内容的变化高度变化，所以必须限定死文字的内容和大小。不推荐使用。
</code></pre><ul>
<li><p>利用行高（line-height）</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	</div><div class="line">	    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	        <span class="selector-class">.one</span> &#123;</div><div class="line">	            <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">	            <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">	            <span class="attribute">background-color</span>: yellow;</div><div class="line">	            <span class="attribute">text-align</span>: center;</div><div class="line">	            <span class="comment">/*font-size: 1cm;*/</span></div><div class="line">	        &#125;</div><div class="line">	</div><div class="line">	    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是居中文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>运行效果（font-size增加之前和之后的高度都没有改变）：

![](https://ww2.sinaimg.cn/large/006tKfTcgy1fdbmjbqa3sj30ny07z41y.jpg)

 ![](https://ww3.sinaimg.cn/large/006tKfTcgy1fdbmjmed00j30nz08a427.jpg)
</code></pre><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>它是一个显示属性，设定block值是以块状显示，在元素后面添加换行符，即其他元素不能在其后面并列显示，如果设定inline值则内联显示，在元素后面删除换行符，多个元素可以在一行内并列显示。使用值none将关闭指定元素及其子元素的显示。</p>
<ul>
<li>将块级元素转成内联的</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">1cm</span>;</div><div class="line">            <span class="attribute">display</span>: inline;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fdbnfahq7cj30fd07kwgu.jpg" alt=""></p>
<ul>
<li>将内联元素转成块级</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">1cm</span>;</div><div class="line">            <span class="attribute">display</span>: block;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdbngza2n1j30el0e9di5.jpg" alt=""></p>
<ul>
<li>隐藏盒子并且盒子的位置也没了</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">1cm</span>;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"two"</span> <span class="attr">style</span>=<span class="string">"background-color:orange;"</span>&gt;</span>这是文本二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fdbnkanl2aj30cg05wmym.jpg" alt=""></p>
<p>但是这个效果就类似于页面没有创建这个盒子的样子，隐藏的同时，位置也没了。<br>但是我们想隐藏，但是位置还保留的话，就需要用到下面的属性了。</p>
<h2 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h2><p>这个属性是针对嵌套层的设置，如果存在嵌套的层（子层）和被嵌套的层（父层）时，可以使用inherit值设置子层继承父层的可见性，如果父层可见，子层也可见。当使用vivible值时，无论父层是否可见，子层都可见。而值hidden时，无论父层是否可见，子层都隐藏。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">1cm</span>;</div><div class="line">            <span class="attribute">visibility</span>: hidden;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本一<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"two"</span> <span class="attr">style</span>=<span class="string">"background-color:orange;"</span>&gt;</span>这是文本二<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fdbnt4l81yj30ev066wgl.jpg" alt=""></p>
<p>可以看出来，上面的位置还是存在的，没有影响页面的布局。</p>
<h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>用于设置层内的内容超出层所能容的范围处理方式，为该属性设置visible值时，无论层的大小，内容都会显示出来。当设置hidden值时，会隐藏超出层大小的内容。当设置值为scroll时，不管内容是否超出层的范围，选中此项都会为层添加滚动条。而值使用auto值时，只在内容超出层的范围时才显示滚动条。</p>
<p><strong>注意：</strong>他是设置超出部分内容隐藏，所以必须设置宽度和高度。</p>
<ul>
<li>hidden（设置超出部分隐藏）</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="comment">/*line-height: 200px;*/</span></div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">overflow</span>: hidden;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdbnyk670aj306f05jq3z.jpg" alt=""></p>
<ul>
<li>scroll（设置超出部分通过滚动条可见）</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="comment">/*line-height: 200px;*/</span></div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">overflow</span>: scroll;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一这是文本一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行效果</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdbo2fqkzvj305o05a75a.jpg" alt=""></p>
<ul>
<li>auto（设置自动判断是否有内容超出，如果有，显示滚动条，如果没有不显示滚动条）</li>
</ul>
<h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>设置区块漂浮属性，允许网页制作者将文本环绕在一个元素的周围，可以使用左漂浮left值，右漂浮right值。</p>
<p>下面我们创建三个盒子并且把中间的盒子漂浮着，但是你会看到只有两个盒子，第三个盒子消失了。那是因为第三个盒子在第二个漂浮的盒子下面。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">210px</span>;</div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.three</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">220px</span>;</div><div class="line">            <span class="attribute">background-color</span>: green;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fdc95u290oj30860dx753.jpg" alt=""></p>
<p>但是有时候我们看见IE下面的就不好使，直接第三个盒子在第二个盒子的后面显示。要解决这个兼容性问题只能将所有的盒子都漂浮。</p>
<p>使用漂浮的好处就是，如果一行的漂浮的盒子不够空间，盒子会自动换行。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">210px</span>;</div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.three</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: green;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdc90x63osj30ji0dddio.jpg" alt=""></p>
<p>当我们将界面宽度缩小的时候，就会自动换行。<strong>注意：只要前面的盒子有一点高度漏出来，换行的盒子就会以他为标准的，不会在第一个盒子下面</strong></p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdc92vxkfqj30dc0efac3.jpg" alt=""></p>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p>清除属性指定一个元素是否允许有元素漂浮在它的旁边。值left移动元素到在其左边的漂浮的元素的下面；同样的值right移动到其右边的漂浮的元素下面。其他的还有缺省的none值，和移动元素到其两边的漂浮的元素的下面的both的值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.one</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">210px</span>;</div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.two</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.three</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">220px</span>;</div><div class="line">            <span class="attribute">background-color</span>: green;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">            <span class="attribute">clear</span>: left;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fdc9dsf1xhj30d30exabu.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> float </tag>
            
            <tag> position </tag>
            
            <tag> z-index </tag>
            
            <tag> text-align </tag>
            
            <tag> display </tag>
            
            <tag> visibility </tag>
            
            <tag> overflow </tag>
            
            <tag> clear </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Core Data的基本使用]]></title>
      <url>http://yoursite.com/2017/03/01/Core-Data/</url>
      <content type="html"><![CDATA[<h2 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h2><h3 id="什么是Core-Data"><a href="#什么是Core-Data" class="headerlink" title="什么是Core Data"></a>什么是Core Data</h3><p>Core Data是一个框架，他提供了对象-关系映射的功能，即能够将OC对象转化成数据，保存在SQLite数据库文件中，也能够将保存的数据库中的数据还原成OC对象。在此数据操作期间，我们不需要编写任何SQL语句，这个有点类似于著名的Hibernate持久化框架，不过功能肯定是没有Hibernate强大的。</p>
<p>用来保存数据</p>
<ul>
<li>用户偏好设置</li>
<li>规档</li>
<li>sqlite</li>
<li>CoreData 是基于sqlite的封装 ，数据保存到一个数据库文件<br>数据库文件：表结构<a id="more"></a>   
</li>
</ul>
<h3 id="CoreData的使用步骤"><a href="#CoreData的使用步骤" class="headerlink" title="CoreData的使用步骤"></a>CoreData的使用步骤</h3><ol>
<li>创建模型文件 相当于数据库</li>
<li>添加实体 相当表</li>
<li>创建实体类 相于模型类</li>
<li>生成上下文 关联模型文件生成数据库</li>
<li>保存对象到数据库</li>
<li>从数据库获取对象</li>
<li>更新数据</li>
<li>删除数据</li>
</ol>
<p>下面我们使用一个简单的demo来演示一下怎么使用.</p>
<p>需求：</p>
<ol>
<li>创建一个数据库company.sqlite</li>
<li>数据库要一张员工表（name,age,height）</li>
<li>往数据库添加员工信息</li>
</ol>
<p>下面按照步骤来进行：</p>
<ul>
<li><p>首先创建一个模型文件：</p>
<p>  <img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fd332xb047j30kh0eemyi.jpg" alt=""></p>
<p>  创建完成后会出现一个Company.xcdatamodeld文件。</p>
</li>
<li><p>已添加实体</p>
<p>  <img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fd335y7glbj30go0aujrq.jpg" alt=""><br>  点击左下角的Add Entity来创建一个表Employee<br>  <img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fd337rav97j30mg0hedgp.jpg" alt=""><br>  然后按照需求在表里面添加信息字段：<br>  <img src="https://ww3.sinaimg.cn/large/006tKfTcgy1fd33b0t8ufj30mg0d3t9o.jpg" alt=""></p>
</li>
<li><p>创建实体类</p>
<p>  下面介绍的是xcode8以上的版本的创建方法<br>  <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fd33osjtjbj30it0chjvl.jpg" alt=""><br>  <img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fd33p757qdj30j90dmdgc.jpg" alt=""><br>  <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fd33pe5lrgj30k00e2dgb.jpg" alt=""></p>
<p>  创建完成后你将会发现项目中多了四个文件</p>
<p>  <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fd33ux4vh5j305q028glv.jpg" alt=""></p>
</li>
<li><p>生成上下文，关联模型文件生成数据库</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 1.上下文 关联Company.xcdatamodeld 模型文件</div><div class="line">   NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init];</div><div class="line">   </div><div class="line">   // 关联模型文件</div><div class="line">   </div><div class="line">   // 创建一个模型对象</div><div class="line">   // 传一个nil 会把 bundle下的所有模型文件 关联起来</div><div class="line">   NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil];</div><div class="line">   </div><div class="line">   // 持久化存储调度器</div><div class="line">   NSPersistentStoreCoordinator *store = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];</div><div class="line">   </div><div class="line">   // 存储数据库的名字</div><div class="line">   NSError *error = nil;</div><div class="line">   </div><div class="line">   // 获取docment目录</div><div class="line">   NSString *doc = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</div><div class="line">   </div><div class="line">   // 数据库保存的路径</div><div class="line">   NSString *sqlitePath = [doc stringByAppendingPathComponent:@&quot;company.sqlite&quot;];</div><div class="line">   </div><div class="line">   [store addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:[NSURL fileURLWithPath:sqlitePath] options:nil error:&amp;error];</div><div class="line">   </div><div class="line">   context.persistentStoreCoordinator = store;</div><div class="line">   self.context = context;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>添加员工信息</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 创建员工</div><div class="line">   Employee *emp1 = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Employee&quot; inManagedObjectContext:self.context];</div><div class="line">   </div><div class="line">   // 设置员工属性</div><div class="line">   emp1.name = @&quot;lisi&quot;;</div><div class="line">   emp1.age = @28;</div><div class="line">   emp1.height = @2.10;</div><div class="line">   </div><div class="line">   //保存 - 通过上下文操作</div><div class="line">   NSError *error = nil;</div><div class="line">   [self.context save:&amp;error];</div><div class="line">   if (!error) &#123;</div><div class="line">       NSLog(@&quot;success&quot;);</div><div class="line">   &#125;else&#123;</div><div class="line">       NSLog(@&quot;%@&quot;,error);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>读取员工信息</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">	//创建一个请求对象 （填入要查询的表名-实体类）</div><div class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;Employee&quot;];</div><div class="line">    </div><div class="line">    // 过滤查询</div><div class="line">    // 查找张三 并且身高大于1.8</div><div class="line">//    NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name=%@ AND height &gt; %@&quot;,@&quot;zhangsan&quot;,@(1.8)];</div><div class="line">//    request.predicate = pre;</div><div class="line">    </div><div class="line">    //排序 以身高进行升序</div><div class="line">//    NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@&quot;height&quot; ascending:NO];</div><div class="line">//    request.sortDescriptors = @[sort];</div><div class="line">    </div><div class="line">    // 分页查询 总共13条数据 每页显示5条数据</div><div class="line">    //第一页的数据</div><div class="line">    request.fetchLimit = 5;</div><div class="line">    //设置起始数据是第几个</div><div class="line">    request.fetchOffset = 10;//这是第3页数据</div><div class="line">    </div><div class="line">    </div><div class="line">    //读取信息</div><div class="line">    NSError *error = nil;</div><div class="line">    NSArray *emps = [self.context executeFetchRequest:request error:&amp;error];</div><div class="line">    if (!error) &#123;</div><div class="line">        NSLog(@&quot;emps: %@&quot;,emps);</div><div class="line">        for (Employee *emp in emps) &#123;</div><div class="line">            NSLog(@&quot;%@ %@ %@&quot;,emp.name,emp.age,emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        NSLog(@&quot;%@&quot;,error);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删除员工信息</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">	// 删除zhangsan</div><div class="line">    // 1.查找到zhangsan</div><div class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;Employee&quot;];</div><div class="line">    </div><div class="line">    NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name=%@&quot;,name];</div><div class="line">    request.predicate = pre;</div><div class="line">    </div><div class="line">    // 2.删除zhangsan</div><div class="line">    NSArray *emps = [self.context executeFetchRequest:request error:nil];</div><div class="line">    </div><div class="line">    for (Employee *emp in emps) &#123;</div><div class="line">        NSLog(@&quot;删除员工的人 %@&quot;,emp.name);</div><div class="line">        [self.context deleteObject:emp];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 3.用context同步下数据库</div><div class="line">    //所有的操作暂时都是在内存里，调用save 同步数据库</div><div class="line">    [self.context save:nil];</div><div class="line">	```	</div><div class="line">- 查找员工信息</div><div class="line"> </div><div class="line">	```objective-c</div><div class="line">	- (NSArray *)findEmployeeWithName:(NSString *)name&#123;</div><div class="line">    // 1.查找员工</div><div class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;Employee&quot;];</div><div class="line">    </div><div class="line">    NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name=%@&quot;,name];</div><div class="line">    request.predicate = pre;</div><div class="line">    </div><div class="line">    return [self.context executeFetchRequest:request error:nil]; </div><div class="line">&#125;	</div><div class="line">```	</div><div class="line">	</div><div class="line">	</div><div class="line">- 修改员工信息</div><div class="line"> </div><div class="line">	```objective-c</div><div class="line">	// 把wangwu的身高更改成 1.7</div><div class="line">    // 1.查找wangwu</div><div class="line">    NSArray *emps = [self findEmployeeWithName:@&quot;wangwu&quot;];</div><div class="line">    </div><div class="line">    // 2.更新身高</div><div class="line">    if (emps.count == 1) &#123;</div><div class="line">        Employee *emp = emps[0];</div><div class="line">        emp.height = @1.7;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 3.同步（保存）到数据</div><div class="line">    [self.context save:nil];</div><div class="line">	```	</div><div class="line">	</div><div class="line">- 模糊查询员工信息</div><div class="line"> </div><div class="line">	```objective-c</div><div class="line">	// 查询</div><div class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;Employee&quot;];</div><div class="line">    </div><div class="line">    // 过滤</div><div class="line">    // 1.查询以wang开头员工</div><div class="line">    //NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name BEGINSWITH %@&quot;,@&quot;wang&quot;];</div><div class="line">    </div><div class="line">    // 2.以si 结尾</div><div class="line">    //NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name ENDSWITH %@&quot;,@&quot;si&quot;];</div><div class="line">    </div><div class="line">    // 3.名字包含 g</div><div class="line">    //NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name CONTAINS %@&quot;,@&quot;g&quot;];</div><div class="line">    </div><div class="line">    // 4.like 以si结尾</div><div class="line">    NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;name like %@&quot;,@&quot;li*&quot;];</div><div class="line">    request.predicate = pre;</div><div class="line">    </div><div class="line">    //读取信息</div><div class="line">    NSError *error = nil;</div><div class="line">    NSArray *emps = [self.context executeFetchRequest:request error:&amp;error];</div><div class="line">    if (!error) &#123;</div><div class="line">        NSLog(@&quot;emps: %@&quot;,emps);</div><div class="line">        for (Employee *emp in emps) &#123;</div><div class="line">            NSLog(@&quot;%@ %@ %@&quot;,emp.name,emp.age,emp.height);</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        NSLog(@&quot;%@&quot;,error);</div><div class="line">    &#125;</div><div class="line">	```	</div><div class="line">### 表关联</div><div class="line"></div><div class="line">在项目里面我们新建一个表 Department：</div><div class="line"></div><div class="line">![](https://ww4.sinaimg.cn/large/006tNbRwgy1fd8sn5fg44j30tf0jndge.jpg)</div><div class="line"></div><div class="line">- 创建实体类</div><div class="line"></div><div class="line">![](https://ww3.sinaimg.cn/large/006tKfTcgy1fd8stosthwj30tf0jndge.jpg)</div><div class="line"></div><div class="line">![](https://ww4.sinaimg.cn/large/006tKfTcgy1fd8stv7y4sj30gb0cwq3m.jpg)</div><div class="line"></div><div class="line">![](https://ww3.sinaimg.cn/large/006tKfTcgy1fd8stypoxzj30ka0e8wee.jpg)</div><div class="line"></div><div class="line">![](https://ww1.sinaimg.cn/large/006tKfTcgy1fd8su8n0vmj30kc0efwee.jpg)</div><div class="line"></div><div class="line">![](https://ww2.sinaimg.cn/large/006tKfTcgy1fd8sutz3zej306602ba9x.jpg)</div><div class="line"></div><div class="line">- 员工应该属于哪一个部门？</div><div class="line"></div><div class="line">我们在员工的表里面建立一个与部门表的关联</div><div class="line"></div><div class="line">![](https://ww3.sinaimg.cn/large/006tKfTcgy1fd8syvds7gj30so09ujs1.jpg)</div><div class="line"></div><div class="line">下面我们需要把之前由员工表创建的实体类删除，然后重新创建一个员工实体类。这是因为我们刚刚给员工表添加了一个关联，需要重新生成最新的。</div><div class="line">具体的步骤参考上面：只是最后生成的属性里面会多出刚刚关联的部门属性。</div><div class="line"></div><div class="line">- 添加员工信息</div><div class="line"></div><div class="line">```objective-c</div><div class="line">// 创建员工</div><div class="line">// 1.添加zhangsan 属于ios部门</div><div class="line">Employee *emp1 = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Employee&quot; inManagedObjectContext:self.context];</div><div class="line">emp1.name = @&quot;zhangsan&quot;;</div><div class="line">emp1.height = @1.7;</div><div class="line">emp1.age = @27;</div><div class="line">    </div><div class="line">// 创建ios部门</div><div class="line">Department *dep1 = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Department&quot; inManagedObjectContext:self.context];</div><div class="line">dep1.name = @&quot;ios&quot;;</div><div class="line">dep1.createDate = [NSDate date];</div><div class="line">dep1.departNo = @&quot;D001&quot;;</div><div class="line">    </div><div class="line">emp1.depart = dep1;</div><div class="line">    </div><div class="line">// 2.添加lisi 属于android 部门</div><div class="line">Employee *emp2 = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Employee&quot; inManagedObjectContext:self.context];</div><div class="line">emp2.name = @&quot;lisi&quot;;</div><div class="line">emp2.height = @1.7;</div><div class="line">emp2.age = @27;</div><div class="line">    </div><div class="line">// 创建android部门</div><div class="line">Department *dep2 = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Department&quot; inManagedObjectContext:self.context];</div><div class="line">dep2.name = @&quot;android&quot;;</div><div class="line">dep2.createDate = [NSDate date];</div><div class="line">dep2.departNo = @&quot;D002&quot;;</div><div class="line">    </div><div class="line">emp2.depart = dep2;</div><div class="line">    </div><div class="line">//一次保存</div><div class="line">[self.context save:nil];</div></pre></td></tr></table></figure>
</li>
<li><p>查找iOS部门的员工</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//查找ios部门的员工</div><div class="line">NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;Employee&quot;];</div><div class="line">    </div><div class="line">// 过滤查询</div><div class="line">NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;depart.name = %@&quot;,@&quot;ios&quot;];</div><div class="line">request.predicate = pre;</div><div class="line"></div><div class="line">//读取信息</div><div class="line">NSError *error = nil;</div><div class="line">NSArray *emps = [self.context executeFetchRequest:request error:&amp;error];</div><div class="line">if (!error) &#123;</div><div class="line">    NSLog(@&quot;emps: %@&quot;,emps);</div><div class="line">    for (Employee *emp in emps) &#123;</div><div class="line">        NSLog(@&quot;name:%@ departName:%@ &quot;,emp.name,emp.depart.name);</div><div class="line">    &#125;</div><div class="line">&#125;else&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,error);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多个数据库"><a href="#多个数据库" class="headerlink" title="多个数据库"></a>多个数据库</h3><p>一个模型文件对应一个数据库。</p>
<p>我们在创建一个数据库模型，步骤参考上面。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fd8ti31050j30m60h90sr.jpg" alt=""></p>
<p><strong>注意点：</strong></p>
<ol>
<li>一个数据库文件对应一个上下文。</li>
</ol>
<p>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;CoreData/CoreData.h&gt;</div><div class="line">#import &quot;Employee.h&quot;</div><div class="line">#import &quot;Department.h&quot;</div><div class="line">#import &quot;Status.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">@property(strong,nonatomic)NSManagedObjectContext *companyContext;</div><div class="line">@property(strong,nonatomic)NSManagedObjectContext *weiboContext;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark 添加员工和微博信息信息</div><div class="line">- (IBAction)addEmployee:(id)sender &#123;</div><div class="line">    //创建员工</div><div class="line">    Employee *emp = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Employee&quot; inManagedObjectContext:self.companyContext];</div><div class="line">    emp.name = @&quot;zhangsan&quot;;</div><div class="line">    emp.height = @1.8;</div><div class="line">    emp.age = @25;</div><div class="line">    </div><div class="line">    [self.companyContext save:nil];</div><div class="line">    </div><div class="line">    //创建微博</div><div class="line">    Status *sts = [NSEntityDescription insertNewObjectForEntityForName:@&quot;Status&quot; inManagedObjectContext:self.weiboContext];</div><div class="line">    </div><div class="line">    sts.text = @&quot;祝愿大家找到好工作&quot;;</div><div class="line">    sts.author = @&quot;gzios 1期&quot;;</div><div class="line">    sts.createDate = [NSDate date];</div><div class="line">    [self.weiboContext save:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    [self setupContext];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> *  创建两个上下文</div><div class="line"> */</div><div class="line">- (void)setupContext &#123;</div><div class="line">    //创建company上下文</div><div class="line">    self.companyContext = [self setupContextWithModelName:@&quot;Company&quot;];</div><div class="line">    </div><div class="line">    </div><div class="line">    //创建weibo上下文</div><div class="line">    self.weiboContext = [self setupContextWithModelName:@&quot;Weibo&quot;];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  根据模型文件名 返回上下文</div><div class="line"> */</div><div class="line">-(NSManagedObjectContext *)setupContextWithModelName:(NSString *)modelName&#123;</div><div class="line">    </div><div class="line">    // 1.上下文 关联Company.xcdatamodeld 模型文件</div><div class="line">    NSManagedObjectContext *context = [[NSManagedObjectContext alloc] init];</div><div class="line">    </div><div class="line">    // 关联模型文件</div><div class="line">    </div><div class="line">    // 创建一个模型对象</div><div class="line">    // 传一个nil 会把 bundle下的所有模型文件 关联起来</div><div class="line">    // 查找model文件的URL</div><div class="line">    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:modelName withExtension:@&quot;momd&quot;];</div><div class="line">    NSManagedObjectModel *model = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];</div><div class="line">    </div><div class="line">    // 持久化存储调度器</div><div class="line">    NSPersistentStoreCoordinator *store = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];</div><div class="line">    </div><div class="line">    // 存储数据库的名字</div><div class="line">    NSError *error = nil;</div><div class="line">    </div><div class="line">    // 获取docment目录</div><div class="line">    NSString *doc = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</div><div class="line">    </div><div class="line">    // 数据库保存的路径</div><div class="line">    NSString *sqlitePath = [doc stringByAppendingFormat:@&quot;/%@.slqite&quot;,modelName];</div><div class="line">    </div><div class="line">    [store addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:[NSURL fileURLWithPath:sqlitePath] options:nil error:&amp;error];</div><div class="line">    </div><div class="line">    context.persistentStoreCoordinator = store;</div><div class="line">    </div><div class="line">    return context;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>之前也说过Core Data是基于SQLITE的封装，我们也可以看到SQL语句，只需要进行下面的设置，就可以在控制台看到SQL的语句。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fd8u46oce7j30fq0azwf4.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fd8u58stj7j30oq0dz74i.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fd8u5g66amj30lz05yq35.jpg" alt=""></p>
<h3 id="sqlite-和-CoreData-对比"><a href="#sqlite-和-CoreData-对比" class="headerlink" title="sqlite 和 CoreData 对比"></a>sqlite 和 CoreData 对比</h3><ul>
<li>sqlite 是纯c语言存储数据方式</li>
<li>coredata 也是对sqlite的封装 ，它数据的保存直接使用对象，不用再写sql语句</li>
<li>sqlite 性能优于 coredata</li>
</ul>
<h3 id="什么时候使用sqlite-什么时候使用CoreData"><a href="#什么时候使用sqlite-什么时候使用CoreData" class="headerlink" title="什么时候使用sqlite 什么时候使用CoreData"></a>什么时候使用sqlite 什么时候使用CoreData</h3><ul>
<li>Coredata功能不是很强大</li>
<li>如果你的数据库表关联大复杂 三四张表都关联 -sqlite</li>
<li>如果数据表结构比较简单 就只有两三张，这些表没有关联关系 coreData</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> core data </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LLDB的使用（一）]]></title>
      <url>http://yoursite.com/2017/02/28/LLDB%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="LLDB简介"><a href="#LLDB简介" class="headerlink" title="LLDB简介"></a>LLDB简介</h1><p>LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。LLDB是Xcode默认的调试器，它与LLVM编译器一起，带给我们更丰富的流程控制和数据检测的调试功能。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。平时用Xcode运行程序，实际走的都是LLDB。熟练使用LLDB，可以让你debug事半功倍。</p>
<a id="more"></a>
<h3 id="LLDB控制台"><a href="#LLDB控制台" class="headerlink" title="LLDB控制台"></a>LLDB控制台</h3><p>LLDB控制台平时会输出一些log信息。如果我们想输入命令调试，必须让程序进入暂停状态。让程序进入暂停状态的方式主要有2种：</p>
<ol>
<li>断点或者watchpoint: 在代码中设置一个断点（watchpoint），当程序运行到断点位置的时候，会进入stop状态</li>
<li>直接暂停，控制台上方有一个暂停按钮，上图红框已标出，点击即可暂停程序</li>
</ol>
<p><strong>注：下面所有的实现都必须遵从一个原则：程序暂停！！！！</strong></p>
<h3 id="LLDB语法"><a href="#LLDB语法" class="headerlink" title="LLDB语法"></a>LLDB语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;command&gt; [&lt;subcommand&gt; [&lt;subcommand&gt;...]] &lt;action&gt; [-options [option-value]] [argument [argument...]]</div></pre></td></tr></table></figure>
<p>下面对上面出现的语法点进行解释一下：</p>
<ol>
<li><code>&lt;command&gt;</code>(命令)和<code>&lt;subcommand&gt;</code>(子命令)：LLDB调试命令的名称。命令和子命令按层级结构来排列：一个命令对象为跟随其的子命令对象创建一个上下文，子命令又为其子命令创建一个上下文，依此类推。</li>
<li><code>&lt;action&gt;</code>：执行命令的操作</li>
<li><code>&lt;options&gt;</code>：命令选项</li>
<li><code>&lt;arguement&gt;</code>：命令的参数</li>
<li><code>[]</code>：表示命令是可选的，可以有也可以没有</li>
</ol>
<p>下面来举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -n search</div><div class="line">Breakpoint 1: 43 locations.</div></pre></td></tr></table></figure>
<p>运行效果就是在search这个方法那边设置一个断点：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fd69qpcjt1j30i6038wf5.jpg" alt=""></p>
<p> 这个命令对应到上面的语法就是：</p>
<ol>
<li><code>command</code>: <code>breakpoint</code> 表示断点命令</li>
<li><code>action</code>: <code>set</code> 表示设置断点</li>
<li><code>option</code>: <code>-n</code> 表示根据方法name设置断点</li>
<li><code>arguement</code>: <code>search</code> 表示方法名为<code>search</code></li>
</ol>
<h3 id="原始-raw-命令"><a href="#原始-raw-命令" class="headerlink" title="原始(raw)命令"></a>原始(raw)命令</h3><p>LLDB支持不带命令选项(options)的原始(raw)命令，原始命令会将命令后面的所有东西当做参数(arguement)传递。不过很多原始命令也可以带命令选项，当你使用命令选项的时候，需要在命令选项后面加–区分命令选项和参数。</p>
<p><strong>常用的expression就是raw命令，一般情况下我们使用expression打印一个东西是这样的：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) expression selectedPage</div><div class="line">(NSInteger) $1 = 1</div></pre></td></tr></table></figure>
<p>当我们想打印一个对象的时候需要加上-0命令选项，而且需要用–将命令选项和参数区分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) expression -0 --self</div><div class="line">&lt;ViewController:0x7f9000f17660&gt;</div></pre></td></tr></table></figure>
<h3 id="唯一匹配原则"><a href="#唯一匹配原则" class="headerlink" title="唯一匹配原则"></a>唯一匹配原则</h3><p>LLDB的命令遵循唯一匹配原则：假如根据前n个字母已经能唯一匹配到某个命令，则只写前n个字母等效于写下完整的命令。</p>
<p>例如： 前面提到我设置断点的命令，我们可以使用唯一匹配原则简写，下面2条命令等效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -n search</div><div class="line">Breakpoint 4: 43 locations.</div><div class="line">(lldb) br s -n search</div><div class="line">Breakpoint 5: 43 locations.</div></pre></td></tr></table></figure>
<h3 id="lldbinit"><a href="#lldbinit" class="headerlink" title="~/.lldbinit"></a>~/.lldbinit</h3><p>LLDB有了一个启动时加载的文件~/.lldbinit，每次启动都会加载。所以一些初始化的事儿，我们可以写入~/.lldbinit中，比如给命令定义别名等。但是由于这时候程序还没有真正运行，也有部分操作无法在里面玩，比如设置断点。</p>
<h1 id="LLDB命令"><a href="#LLDB命令" class="headerlink" title="LLDB命令"></a>LLDB命令</h1><h3 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h3><p>expression命令的作用是执行一个表达式，并将表达式返回的结果输出。expression的完整语法是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expression &lt;cmd-options&gt; -- &lt;expr&gt;</div></pre></td></tr></table></figure>
<ol>
<li><code>&lt;cmd-options&gt;</code>：命令选项，一般情况下使用默认的即可，不需要特别标明。</li>
<li><code>--</code>: 命令选项结束符，表示所有的命令选项已经设置完毕，如果没有命令选项，<code>--</code>可以省略</li>
<li><code>&lt;expr&gt;</code>: 要执行的表达式</li>
</ol>
<p>说expression是LLDB里面最重要的命令都不为过。因为他能实现2个功能。</p>
<ul>
<li>执行某个表达式。我们在代码运行过程中，可以通过执行某个表达式来动态改变程序运行的轨迹。假如我们在运行过程中，突然想把self.view颜色改成红色，看看效果。我们不必写下代码，重新run，只需暂停程序，用expression改变颜色，再刷新一下界面，就能看到效果:</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fd6akv19mrj30j600wt8y.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) expression -- self.VIPAllOrderTableView.backgroundColor = [UIColor redColor]</div><div class="line">(UICachedDeviceRGBColor *) $1 = 0x0000608000465880</div></pre></td></tr></table></figure>
<p>效果就是：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fd6ama48pcj30a70fo3yj.jpg" alt=""></p>
<ul>
<li>将返回值输出。 也就是说我们可以通过expression来打印东西。 假如我们想打印self.view：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) expression -- self.view</div><div class="line">(UIView *) $2 = 0x00007fed0e606f60</div></pre></td></tr></table></figure>
<p>当然e的更主要的用法是通过执行表达式，动态修改当前线程堆栈变量的值，从而达到调试的目的（其实查询也很主要，只是会用另一种方式查询）。<br>比如，我们可以在某个<code>if..else..</code>的语句前打上断点，直接修改条件表达式的值，使程序覆盖了不同分支，而不用苦心积虑地停止程序、hard code变量值来进行调试，节省了一大坨修改与编译时间。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fd6c8krltlj30ds080dgk.jpg" alt=""></p>
<p>在上面这份测试代码，在进入条件判断语句前打了断点，那我们可以通过e命令，来自由控制程序走向任何一个分支。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fd6c99j6n4j30fy03eweq.jpg" alt=""></p>
<h3 id="p-amp-print-amp-call"><a href="#p-amp-print-amp-call" class="headerlink" title="p &amp; print &amp; call"></a>p &amp; print &amp; call</h3><p>一般情况下，我们直接用expression还是用得比较少的，更多时候我们用的是p、print、call。这三个命令其实都是expression –的别名（–表示不再接受命令选项，详情见前面原始(raw）命令这一节）</p>
<ol>
<li><code>print</code>: 打印某个东西，可以是变量和表达式</li>
<li><code>p</code>: 可以看做是print的简写</li>
<li><code>call</code>: 调用某个方法。</li>
</ol>
<p>表面上看起来他们可能有不一样的地方，实际都是执行某个表达式（变量也当做表达式），将执行的结果输出到控制台上。所以你可以用p调用某个方法，也可以用call打印东西 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(lldb) expression -- self.view</div><div class="line">(UIView *) $3 = 0x00007fed0e606f60</div><div class="line">(lldb) p self.view</div><div class="line">(UIView *) $4 = 0x00007fed0e606f60</div><div class="line">(lldb) print self.view</div><div class="line">(UIView *) $5 = 0x00007fed0e606f60</div><div class="line">(lldb) call self.view</div><div class="line">(UIView *) $6 = 0x00007fed0e606f60</div><div class="line">(lldb) e self.view</div><div class="line">(UIView *) $7 = 0x00007fed0e606f60</div></pre></td></tr></table></figure>
<p>根据唯一匹配原则，如果你没有自己添加特殊的命令别名。e也可以表示expression的意思。原始命令默认没有命令选项，所以e也能带给你同样的效果</p>
<p>与<code>po</code>不同，它不会打出对象的详细信息，只会打印出一个$符号，数字，再加上一段地址信息。由于po命令下，对象的<code>description</code> 有可能被随便乱改，没有输出地址消息。</p>
<h3 id="po"><a href="#po" class="headerlink" title="po"></a>po</h3><p>我们知道，OC里所有的对象都是用指针表示的，所以一般打印的时候，打印出来的是对象的指针，而不是对象本身。如果我们想打印对象。我们需要使用命令选项:<code>-O</code>。为了更方便的使用，LLDB为<code>expression -O --</code>定义了一个别名：<code>po</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(lldb) expression -o -- self._VIPAllOrderTableView</div><div class="line">&lt;UITableView: 0x7fed0f850400; frame = (0 0; 0 0); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x60800025b7e0&gt;; layer = &lt;CALayer: 0x608000235e80&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;0, 0&#125;&gt;</div><div class="line"></div><div class="line">  Fix-it applied, fixed expression was: </div><div class="line">    self-&gt;_VIPAllOrderTableView</div><div class="line">    </div><div class="line">(lldb) po self.VIPAllOrderTableView</div><div class="line">&lt;UITableView: 0x7fed0f850400; frame = (0 0; 0 0); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x60800025b7e0&gt;; layer = &lt;CALayer: 0x608000235e80&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;0, 0&#125;&gt;</div></pre></td></tr></table></figure>
<p>还有其他很多命令选项，不过我们一般用得比较少，所以我就不具体的一一介绍了，如果想了解，在LLDB控制台上输入：<code>help expression</code>即可查到expression所有的信息</p>
<h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><h4 id="thread-backtrace-amp-bt"><a href="#thread-backtrace-amp-bt" class="headerlink" title="thread backtrace &amp; bt"></a>thread backtrace &amp; bt</h4><p>有时候我们想要了解线程堆栈信息，可以使<code>用thread backtrace</code>, <code>thread backtrace</code>作用是将线程的堆栈打印出来。我们来看看他的语法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">thread backtrace [-c &lt;count&gt;] [-s &lt;frame-index&gt;] [-e &lt;boolean&gt;]</div></pre></td></tr></table></figure>
<p><code>thread backtrace</code>后面跟的都是命令选项：</p>
<ul>
<li><code>-c</code>：设置打印堆栈的帧数(frame)</li>
<li><code>-s</code>：设置从哪个帧(frame)开始打印</li>
<li><code>-e</code>：是否显示额外的回溯</li>
</ul>
<p>实际上这些命令选项我们一般不需要使用。</p>
<p>e.g: 当发生crash的时候，我们可以使用<code>thread backtrace</code>查看堆栈调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(lldb) thread backtrace</div><div class="line">* thread #1: tid = 0x3551a, 0x0000000100b78933 the-master`-[HSTeamUnderwayOrderViewController setUpUI](self=0x00007fed0e66fed0, _cmd=&quot;setUpUI&quot;) + 1139 at HSTeamUnderwayOrderViewController.m:316, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 9.1</div><div class="line">  * frame #0: 0x0000000100b78933 the-master`-[HSTeamUnderwayOrderViewController setUpUI](self=0x00007fed0e66fed0, _cmd=&quot;setUpUI&quot;) + 1139 at HSTeamUnderwayOrderViewController.m:316</div><div class="line">    frame #1: 0x0000000100b75941 the-master`-[HSTeamUnderwayOrderViewController viewDidLoad](self=0x00007fed0e66fed0, _cmd=&quot;viewDidLoad&quot;) + 785 at HSTeamUnderwayOrderViewController.m:89</div><div class="line">    frame #2: 0x0000000105a0ca3d UIKit`-[UIViewController loadViewIfRequired] + 1258</div><div class="line">    frame #3: 0x0000000105a13062 UIKit`-[UIViewController __viewWillAppear:] + 118</div><div class="line">    frame #4: 0x0000000105a3e1d3 UIKit`-[UINavigationController _startCustomTransition:] + 1290</div><div class="line">    frame #5: 0x0000000105a4ee48 UIKit`-[UINavigationController _startDeferredTransitionIfNeeded:] + 697</div><div class="line">    frame #6: 0x0000000105a4ffdb UIKit`-[UINavigationController __viewWillLayoutSubviews] + 58</div><div class="line">    frame #7: 0x0000000105c46dd7 UIKit`-[UILayoutContainerView layoutSubviews] + 223</div><div class="line">    frame #8: 0x000000010592fab8 UIKit`-[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 1237</div><div class="line">    frame #9: 0x000000010555cbf8 QuartzCore`-[CALayer layoutSublayers] + 146</div><div class="line">    frame #10: 0x0000000105550440 QuartzCore`CA::Layer::layout_if_needed(CA::Transaction*) + 366</div><div class="line">    frame #11: 0x00000001055502be QuartzCore`CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 24</div><div class="line">    frame #12: 0x00000001054de318 QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 280</div><div class="line">    frame #13: 0x000000010550b3ff QuartzCore`CA::Transaction::commit() + 475</div><div class="line">    frame #14: 0x000000010550bd6f QuartzCore`CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 113</div><div class="line">    frame #15: 0x0000000107373267 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23</div><div class="line">    frame #16: 0x00000001073731d7 CoreFoundation`__CFRunLoopDoObservers + 391</div><div class="line">    frame #17: 0x0000000107357f8e CoreFoundation`__CFRunLoopRun + 1198</div><div class="line">    frame #18: 0x0000000107357884 CoreFoundation`CFRunLoopRunSpecific + 420</div><div class="line">    frame #19: 0x000000010cce9a6f GraphicsServices`GSEventRunModal + 161</div><div class="line">    frame #20: 0x000000010586ac68 UIKit`UIApplicationMain + 159</div><div class="line">    frame #21: 0x0000000100c020bf the-master`main(argc=1, argv=0x00007fff5f45a690) + 111 at main.m:15</div><div class="line">    frame #22: 0x000000010ab9868d libdyld.dylib`start + 1</div></pre></td></tr></table></figure>
<p>LLDB还为backtrace专门定义了一个别名：bt，他的效果与thread backtrace相同，如果你不想写那么长一串字母，直接写下bt即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(lldb) bt</div><div class="line">* thread #1: tid = 0x3551a, 0x0000000100b78933 the-master`-[HSTeamUnderwayOrderViewController setUpUI](self=0x00007fed0e66fed0, _cmd=&quot;setUpUI&quot;) + 1139 at HSTeamUnderwayOrderViewController.m:316, queue = &apos;com.apple.main-thread&apos;, stop reason = breakpoint 9.1</div><div class="line">  * frame #0: 0x0000000100b78933 the-master`-[HSTeamUnderwayOrderViewController setUpUI](self=0x00007fed0e66fed0, _cmd=&quot;setUpUI&quot;) + 1139 at HSTeamUnderwayOrderViewController.m:316</div><div class="line">    frame #1: 0x0000000100b75941 the-master`-[HSTeamUnderwayOrderViewController viewDidLoad](self=0x00007fed0e66fed0, _cmd=&quot;viewDidLoad&quot;) + 785 at HSTeamUnderwayOrderViewController.m:89</div><div class="line">    frame #2: 0x0000000105a0ca3d UIKit`-[UIViewController loadViewIfRequired] + 1258</div><div class="line">    frame #3: 0x0000000105a13062 UIKit`-[UIViewController __viewWillAppear:] + 118</div><div class="line">    frame #4: 0x0000000105a3e1d3 UIKit`-[UINavigationController _startCustomTransition:] + 1290</div><div class="line">    frame #5: 0x0000000105a4ee48 UIKit`-[UINavigationController _startDeferredTransitionIfNeeded:] + 697</div><div class="line">    frame #6: 0x0000000105a4ffdb UIKit`-[UINavigationController __viewWillLayoutSubviews] + 58</div><div class="line">    frame #7: 0x0000000105c46dd7 UIKit`-[UILayoutContainerView layoutSubviews] + 223</div><div class="line">    frame #8: 0x000000010592fab8 UIKit`-[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 1237</div><div class="line">    frame #9: 0x000000010555cbf8 QuartzCore`-[CALayer layoutSublayers] + 146</div><div class="line">    frame #10: 0x0000000105550440 QuartzCore`CA::Layer::layout_if_needed(CA::Transaction*) + 366</div><div class="line">    frame #11: 0x00000001055502be QuartzCore`CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 24</div><div class="line">    frame #12: 0x00000001054de318 QuartzCore`CA::Context::commit_transaction(CA::Transaction*) + 280</div><div class="line">    frame #13: 0x000000010550b3ff QuartzCore`CA::Transaction::commit() + 475</div><div class="line">    frame #14: 0x000000010550bd6f QuartzCore`CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 113</div><div class="line">    frame #15: 0x0000000107373267 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23</div><div class="line">    frame #16: 0x00000001073731d7 CoreFoundation`__CFRunLoopDoObservers + 391</div><div class="line">    frame #17: 0x0000000107357f8e CoreFoundation`__CFRunLoopRun + 1198</div><div class="line">    frame #18: 0x0000000107357884 CoreFoundation`CFRunLoopRunSpecific + 420</div><div class="line">    frame #19: 0x000000010cce9a6f GraphicsServices`GSEventRunModal + 161</div><div class="line">    frame #20: 0x000000010586ac68 UIKit`UIApplicationMain + 159</div><div class="line">    frame #21: 0x0000000100c020bf the-master`main(argc=1, argv=0x00007fff5f45a690) + 111 at main.m:15</div><div class="line">    frame #22: 0x000000010ab9868d libdyld.dylib`start + 1</div></pre></td></tr></table></figure>
<h4 id="thread-return"><a href="#thread-return" class="headerlink" title="thread return"></a>thread return</h4><p>Debug的时候，也许会因为各种原因，我们不想让代码执行某个方法，或者要直接返回一个想要的值。这时候就该<code>thread return</code>上场了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">thread return [-x] -- [&lt;expr&gt;]</div><div class="line">thread return [&lt;expr&gt;]</div></pre></td></tr></table></figure>
<p><code>thread return</code>可以接受一个表达式，调用命令之后直接从当前的frame返回表达式的值。</p>
<p>举例：<br>我们有一个someMethod方法，默认情况下是返回YES。我们想要让他返回NO。我们只需在方法的开始位置加一个断点，当程序中断的时候，输入命令即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(lldb) thread return NO</div></pre></td></tr></table></figure>
<p>效果相当于在断点位置直接调用return NO;，不会执行断点后面的代码</p>
<h4 id="c-amp-n-amp-s-amp-finish"><a href="#c-amp-n-amp-s-amp-finish" class="headerlink" title="c &amp; n &amp; s &amp; finish"></a>c &amp; n &amp; s &amp; finish</h4><p>一般在调试程序的时候，我们经常用到下面这4个按钮：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fd6bano65uj303q00sjr7.jpg" alt=""></p>
<p>用触摸板的孩子们可能会觉得点击这4个按钮比较费劲。其实LLDB命令也可以完成上面的操作，而且如果不输入命令，直接按Enter键，LLDB会自动执行上次的命令。按一下Enter就能达到我们想要的效果，有木有顿时感觉逼格满满的！！！ 我们来看看对应这4个按钮的LLDB命令：</p>
<ul>
<li><code>c/ continue/ thread continue</code>: 这三个命令效果都等同于上图中第一个按钮的。表示程序继续运行</li>
<li><code>n/ next/ thread step-over</code>: 这三个命令效果等同于上图第二个按钮。表示单步运行</li>
<li><code>s/ step/ thread step-in</code>: 这三个命令效果等同于上图第三个按钮。表示进入某个方法</li>
<li><code>finish/ step-out</code>: 这两个命令效果等同于第四个按钮。表示直接走完当前方法，返回到上层frame</li>
</ul>
<h4 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h4><p>前面我们提到过很多次frame（帧）。可能有的朋友对frame这个概念还不太了解。随便打个断点.</p>
<p>我们在控制台上输入命令bt，可以打印出来所有的frame。如果仔细观察，这些frame和左边红框里的堆栈是一致的。平时我们看到的左边的堆栈就是frame。</p>
<h5 id="frame-variable"><a href="#frame-variable" class="headerlink" title="frame variable"></a>frame variable</h5><p>平时Debug的时候我们经常做的事就是查看变量的值，通过frame variable命令，可以打印出当前frame的所有变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) frame variable</div><div class="line">(HSTeamUnderwayOrderViewController *) self = 0x00007fed0e65a7a0</div><div class="line">(SEL) _cmd = &quot;setUpUI&quot;</div><div class="line">(NSInteger) selectedPage = 1</div></pre></td></tr></table></figure>
<p>将self,_cmd,selectedPage 等本地变量都打印了出来</p>
<p>如果我们要需要打印指定变量，也可以给frame variable传入参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) frame variable selectedPage</div><div class="line">(NSInteger) selectedPage = 1</div></pre></td></tr></table></figure>
<p>不过<code>frame variable</code>只接受变量作为参数，不接受表达式，也就是说我们无法使用<code>frame variable self.string</code>，因为<code>self.string</code>是调用string的getter方法。所以一般打印指定变量，我更喜欢用p或者po。</p>
<h5 id="其他不常用命令"><a href="#其他不常用命令" class="headerlink" title="其他不常用命令"></a>其他不常用命令</h5><p>一般frame variable打印所有变量用得比较多，frame还有2个不怎么常用的命令：</p>
<ol>
<li><p><code>frame info</code>: 查看当前frame的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) frame info</div><div class="line">frame #0: 0x0000000100b78933 the-master`-[HSTeamUnderwayOrderViewController setUpUI](self=0x00007fed0e65a7a0, _cmd=&quot;setUpUI&quot;) + 1139 at HSTeamUnderwayOrderViewController.m:316</div></pre></td></tr></table></figure>
</li>
<li><p><code>frame select</code>: 选择某个frame</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(lldb) frame select 1</div><div class="line">frame #1: 0x0000000100b75941 the-master`-[HSTeamUnderwayOrderViewController viewDidLoad](self=0x00007fed0e65a7a0, _cmd=&quot;viewDidLoad&quot;) + 785 at HSTeamUnderwayOrderViewController.m:89</div><div class="line">   86  	    orderContent = @&quot;0&quot;;</div><div class="line">   87  	    </div><div class="line">   88  	    self.orderDateArray = @[@&quot;时间&quot;, @&quot;一个月&quot;,@&quot;三个月&quot;,@&quot;六个月&quot;,@&quot;一年&quot;];</div><div class="line">-&gt; 89  	    [self setUpUI];</div><div class="line">   90  	</div><div class="line">   91  	    [self setupRefreshView];</div><div class="line">   92</div></pre></td></tr></table></figure>
<p>当我们选择frame 1的时候，他会把frame1的信息和代码打印出来。不过一般我都是直接在Xcode左边点击某个frame，这样更方便</p>
</li>
</ol>
<h3 id="breakpoint"><a href="#breakpoint" class="headerlink" title="breakpoint"></a>breakpoint</h3><p>调试过程中，我们用得最多的可能就是断点了。LLDB中的断点命令也非常强大</p>
<h4 id="breakpoint-set"><a href="#breakpoint-set" class="headerlink" title="breakpoint set"></a>breakpoint set</h4><p><code>breakpoint set</code>命令用于设置断点，LLDB提供了很多种设置断点的方式：</p>
<ul>
<li><p>使用<code>-n</code>根据方法名设置断点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -n search</div><div class="line">Breakpoint 10: 43 locations.</div></pre></td></tr></table></figure>
</li>
<li><p>使用-f指定文件</p>
<p>我们只给HSTeamUnderwayOrderViewController.m文件中的search方法加上断点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -f HSTeamUnderwayOrderViewController.m -n search</div><div class="line">Breakpoint 11: where = the-master`-[HSTeamUnderwayOrderViewController search] + 16 at HSTeamUnderwayOrderViewController.m:262, address = 0x0000000100b78180</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  这里需要注意，如果方法未写在文件中（比如写在category文件中，或者父类文件中），指定文件之后，将无法给这个方法设置断点。</p>
<ul>
<li><p>使用-l指定文件某一行设置断点<br>我们想给HSTeamUnderwayOrderViewController.m第38行设置断点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -f HSTeamUnderwayOrderViewController.m -l 286</div><div class="line">Breakpoint 13: where = the-master`-[HSTeamUnderwayOrderViewController setupRefreshView] + 20 at HSTeamUnderwayOrderViewController.m:288, address = 0x0000000100b783d4</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用-c设置条件断点</p>
<p>text:方法接受一个ret的参数，我们想让ret == YES的时候程序中断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -n text: -c ret == YES</div><div class="line">Breakpoint 7: where = TLLDB`-[ViewController text:] + 30 at ViewController.m:37, address = 0x0000000105ef37ce</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用-o设置单次断点</p>
<p>如果刚刚那个断点我们只想让他中断一次：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(lldb)breakpoint set -n text: -o</div><div class="line">&apos;breakpoint 3&apos;:where=TLLDB`-[ViewController text:]+30 at </div><div class="line">ViewController.m:37, address=0x000000010b6f97ce</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="breakpoint-command"><a href="#breakpoint-command" class="headerlink" title="breakpoint command"></a>breakpoint command</h4><p>有的时候我们可能需要给断点添加一些命令，比如每次走到这个断点的时候，我们都需要打印self对象。我们只需要给断点添加一个po self命令，就不用每次执行断点再自己输入po self了</p>
<h5 id="breakpoint-command-add"><a href="#breakpoint-command-add" class="headerlink" title="breakpoint command add"></a>breakpoint command add</h5><p>breakpoint command add命令就是给断点添加命令的命令。</p>
<p>假设我们需要在HSHomeViewController的getData中查看loginName(自己创建的一个NSString类型的变量)的值 我们首先给-[ViewController viewDidLoad]添加一个断点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint set -n &quot;-[HSHomeViewController getData]&quot;</div><div class="line">Breakpoint 2: where = the-master`-[HSHomeViewController getData] + 35 at HSHomeViewController.m:70, address = 0x00000001025fb263</div></pre></td></tr></table></figure>
<p>可以看到添加成功之后，这个breakpoint的id为2，然后我们给他增加一个命令：<code>po loginName</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint command add -o &quot;po loginName&quot;</div></pre></td></tr></table></figure>
<p>-o完整写法是–one-liner，表示增加一条命令。2表示对id为2的breakpoint增加命令。 添加完命令之后，每次程序执行到这个断点就可以自动打印出loginName的值了</p>
<p>如果我们一下子想增加多条命令，比如我想在viewDidLoad中打印当前frame的所有变量，但是我们不想让他中断，也就是在打印完成之后，需要继续执行。我们可以这样玩：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint command add 6</div><div class="line">Enter your debugger command(s).  Type &apos;DONE&apos; to end.</div><div class="line">&gt; frame variable</div><div class="line">&gt; continue</div><div class="line">&gt; DONE</div></pre></td></tr></table></figure>
<p>输入breakpoint command add 3对断点3增加命令。他会让你输入增加哪些命令，输入’DONE’表示结束。这时候你就可以输入多条命令了</p>
<p>多次对同一个断点添加命令，后面命令会将前面命令覆盖</p>
<h5 id="breakpoint-command-list"><a href="#breakpoint-command-list" class="headerlink" title="breakpoint command list"></a>breakpoint command list</h5><p>如果想查看某个断点已有的命令，可以使用breakpoint command list。 例如: 我们查看一下刚刚的断点6已有的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint command list 6</div><div class="line">Breakpoint 6:</div><div class="line">    Breakpoint commands:</div><div class="line">      frame variable</div><div class="line">      continue</div></pre></td></tr></table></figure>
<p>可以看到一共有2条命令，分别为frame variable和continue</p>
<h5 id="breakpoint-command-delete"><a href="#breakpoint-command-delete" class="headerlink" title="breakpoint command delete"></a>breakpoint command delete</h5><p>有增加就有删除，<code>breakpoint command delete</code>可以让我们删除某个断点的命令。 例如: 我们将断点3中的命令删除:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint command delete 1</div><div class="line">(lldb) breakpoint command list 1</div><div class="line">Breakpoint 1 does not have an associated command.c</div></pre></td></tr></table></figure>
<p>可以看到删除之后，断点1就没有命令了</p>
<h4 id="breakpoint-list"><a href="#breakpoint-list" class="headerlink" title="breakpoint list"></a>breakpoint list</h4><p>如果我们想查看已经设置了哪些断点，可以使用<code>breakpoint list</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint list</div><div class="line">Current breakpoints:</div><div class="line">1: name = &apos;-[HSHomeViewController getData]&apos;, locations = 1, resolved = 1, hit count = 3</div><div class="line">  1.1: where = the-master`-[HSHomeViewController getData] + 35 at HSHomeViewController.m:70, address = 0x000000010252d263, resolved, hit count = 3 </div><div class="line"></div><div class="line">2: name = &apos;-[HSSubTeamUnderwayOrderSearchViewController search]&apos;, locations = 0 (pending)</div><div class="line">    Breakpoint commands:</div><div class="line">      po self.view</div><div class="line"></div><div class="line"></div><div class="line">5: name = &apos;-[HSTeamUnderwayOrderViewController search]&apos;, locations = 1, resolved = 1, hit count = 2</div><div class="line">    Breakpoint commands:</div><div class="line">      po self.view</div><div class="line"></div><div class="line">  5.1: where = the-master`-[HSTeamUnderwayOrderViewController search] + 16 at HSTeamUnderwayOrderViewController.m:262, address = 0x00000001024b7b40, resolved, hit count = 2 </div><div class="line"></div><div class="line">6: name = &apos;-[HSTeamUnderwayOrderViewController headerRereshing]&apos;, locations = 1, resolved = 1, hit count = 2</div><div class="line">    Breakpoint commands:</div><div class="line">      frame variable</div><div class="line">      continue</div><div class="line"></div><div class="line">  6.1: where = the-master`-[HSTeamUnderwayOrderViewController headerRereshing] + 27 at HSTeamUnderwayOrderViewController.m:267, address = 0x00000001024b7bfb, resolved, hit count = 2</div></pre></td></tr></table></figure>
<h4 id="breakpoint-disable-enable"><a href="#breakpoint-disable-enable" class="headerlink" title="breakpoint disable/enable"></a>breakpoint disable/enable</h4><p>有的时候我们可能暂时不想要某个断点，可以使用<code>breakpoint disable</code>让某个断点暂时失效。 例如: 我们来让刚刚的断点1失效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint disable 1</div><div class="line">1 breakpoints disabled.</div></pre></td></tr></table></figure>
<p>输入完命令之后，显示断点已经失效</p>
<p>当我们又需要这个断点的时候，可以使用<code>breakpoint enable</code>再次让他生效 例如: 重新启用断点1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint enable 1</div><div class="line">1 breakpoints enabled.</div></pre></td></tr></table></figure>
<h4 id="breakpoint-delete"><a href="#breakpoint-delete" class="headerlink" title="breakpoint delete"></a>breakpoint delete</h4><p>如果我们觉得这个断点以后再也用不上了，可以用<code>breakpoint delete</code>直接删除断点. 例如: 删除断点1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint delete 1</div><div class="line">1 breakpoints deleted; 0 breakpoint locations disabled.</div></pre></td></tr></table></figure>
<p>如果我们想删除所有断点，只需要不指定<code>breakpoint delete</code>参数即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint delete</div><div class="line">About to delete all breakpoints, do you want to do that?: [Y/n] y</div><div class="line">All breakpoints removed. (3 breakpoints)</div></pre></td></tr></table></figure>
<p>删除的时候他会提示你，是不是真的想删除所有断点，需要你再次输入Y确认。如果想直接删除，不需要他的提示，使用-f命令选项即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint delete -f</div><div class="line">All breakpoints removed. (1 breakpoint)</div></pre></td></tr></table></figure>
<p>实际平时我们真正使用breakpoint命令反而比较少，因为Xcode已经内置了断点工具。我们可以直接在代码上打断点，可以在断点工具栏里面查看编辑断点，这比使用LLDB命令方便很多。不过了解LLDB相关命令可以让我们对断点理解更深刻。 如果你想了解怎么使用Xcode设置断点，可以阅读这篇文章<a href="http://www.cocoachina.com/industry/20130701/6514.html" target="_blank" rel="external">《Xcode中断点的威力》</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lldb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶-Runtime学习笔记]]></title>
      <url>http://yoursite.com/2017/02/27/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-Runtime%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Objective-C-Runtime到底是什么东西？"><a href="#Objective-C-Runtime到底是什么东西？" class="headerlink" title="Objective-C Runtime到底是什么东西？"></a>Objective-C Runtime到底是什么东西？</h1><p>Objective-C Runtime是一个将C语言转化为面向对象语言的扩展。<br>Objective-C是基于动态运行时类型，与静态类型的C++不一样。也就是说用C++编写的程序编译时就直接编译成了可令机器读懂的机器语言；用Objective-C编写的程序不能直接编译成可令机器读懂的机器语言，而是在程序运行的时候，通过Runtime把程序转为可令机器读懂的机器语言。Runtime是Objective不可缺少的重要一部分。</p>
<a id="more"></a>
<h1 id="Objective-C的基本元素的认识"><a href="#Objective-C的基本元素的认识" class="headerlink" title="Objective-C的基本元素的认识"></a>Objective-C的基本元素的认识</h1><h3 id="1-id和Class"><a href="#1-id和Class" class="headerlink" title="1. id和Class"></a>1. id和Class</h3><p>打开/Runtime-/runtime/objc.h文件可以看到如下定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#if !OBJC_TYPES_DEFINED</div><div class="line">/// An opaque type that represents an Objective-C class.</div><div class="line">typedef struct objc_class *Class;</div><div class="line"> </div><div class="line">/// Represents an instance of a class.</div><div class="line">struct objc_object &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">/// A pointer to an instance of a class.</div><div class="line">typedef struct objc_object *id;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>Class是一个指向objc_class结构体的指针，而id是一个指向objc_object结构体的指针，其中的isa是一个指向objc_class结构体的指针。其中的id就是我们所说的对象，Class就是我们所说的类。</p>
<p><strong>PS</strong>:isa指针不总是指向实例对象所属的类，不能依靠它来确定类型，而是应该用class方法来确定实例对象的类。因为KVO的实现机理就是将被观察对象的isa指针指向一个中间类而不是真实的类，这是一种叫做 isa-swizzling 的技术，详见<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOImplementation.html" target="_blank" rel="external">官方文档</a></p>
<p>打开/Runtime-/runtime/runtime.h文件可以看到如下定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_class *Class;</div><div class="line">struct objc_class &#123; </div><div class="line"> Class isa                                 OBJC_ISA_AVAILABILITY; // metaclass</div><div class="line">#if !__OBJC2__</div><div class="line"> Class super_class                         OBJC2_UNAVAILABLE; // 父类</div><div class="line"> const char *name                          OBJC2_UNAVAILABLE; // 类名</div><div class="line"> long version                              OBJC2_UNAVAILABLE; // 类的版本信息，默认为0，可以通过runtime函数class_setVersion或者class_getVersion进行修改、读取</div><div class="line"> long info                                 OBJC2_UNAVAILABLE; // 类信息，供运行时期使用的一些位标识，如CLS_CLASS (0x1L) 表示该类为普通 class，其中包含实例方法和变量;CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法;</div><div class="line"> long instance_size                        OBJC2_UNAVAILABLE; // 该类的实例变量大小（包括从父类继承下来的实例变量）</div><div class="line"> struct objc_ivar_list *ivars              OBJC2_UNAVAILABLE; // 该类的成员变量地址列表</div><div class="line"> struct objc_method_list **methodLists     OBJC2_UNAVAILABLE; // 方法地址列表，与 info 的一些标志位有关，如CLS_CLASS (0x1L)，则存储实例方法，如CLS_META (0x2L)，则存储类方法;</div><div class="line"> struct objc_cache *cache                  OBJC2_UNAVAILABLE; // 缓存最近使用的方法地址，用于提升效率；</div><div class="line"> struct objc_protocol_list *protocols      OBJC2_UNAVAILABLE; // 存储该类声明遵守的协议的列表</div><div class="line">#endif</div><div class="line">&#125;</div><div class="line">/* Use `Class` instead of `struct objc_class *` */</div></pre></td></tr></table></figure>
<p>由以上代码可见，类与对象的区别就是类比对象多了很多特征成员，类也可以当做一个objc_object来对待，也就是说类和对象都是对象，分别称作类对象（class object）和实例对象（instance object），这样我们就可以区别对象和类了。可以看到运行时一个类还关联了它的超类指针，类名，成员变量，方法，缓存，还有附属的协议。</p>
<p><strong>PS</strong>:OBJC2_UNAVAILABLE之类的宏定义是苹果在 Objc 中对系统运行版本进行约束的黑魔法，为的是兼容非Objective-C 2.0的遗留逻辑，但我们仍能从中获得一些有价值的信息，有兴趣的可以查看源代码。</p>
<p>在objc_class结构体中：ivars是objc_ivar_list指针；methodLists是指向objc_method_list指针的指针。也就是说可以动态修改*methodLists的值来添加成员方法，这也是Category实现的原理，同样解释了Category不能添加属性的原因。而最新版的 Runtime 源码对这一块的<a href="http://www.opensource.apple.com/source/objc4/objc4-647/runtime/objc-runtime-new.h" target="_blank" rel="external">描述</a>已经有很大变化，可以参考下美团技术团队的<a href="http://tech.meituan.com/DiveIntoCategory.html" target="_blank" rel="external">深入理解Objective-C：Category</a>。</p>
<p><strong>PS</strong>：任性的话可以在Category中添加@dynamic的属性，并利用运行期动态提供存取方法或干脆动态转发；或者干脆使用关联度对象（AssociatedObject）</p>
<p>不知道你是否注意到了objc_class中也有一个isa对象，这是因为一个 ObjC 类本身同时也是一个对象，为了处理类和对象的关系，runtime 库创建了一种叫做元类 (Meta Class) 的东西，类对象所属类型就叫做元类，它用来表述类对象本身所具备的元数据。类方法就定义于此处，因为这些方法可以理解成类对象的实例方法。每个类仅有一个类对象，而每个类对象仅有一个与之相关的元类。当你发出一个类似[NSObject alloc]的消息时，你事实上是把这个消息发给了一个类对象 (Class Object) ，这个类对象必须是一个元类的实例，而这个元类同时也是一个根元类 (root meta class) 的实例。所有的元类最终都指向根元类为其超类。所有的元类的方法列表都有能够响应消息的类方法。所以当 [NSObject alloc] 这条消息发给类对象的时候，objc_msgSend()会去它的元类里面去查找能够响应消息的方法，如果找到了，然后对这个类对象执行方法调用。</p>
<p>isa：objc_object（实例对象）中isa指针指向的类结构称为class（也就是该对象所属的类）其中存放着普通成员变量与动态方法（“-”开头的方法）；此处isa指针指向的类结构称为metaclass，其中存放着static类型的成员变量与static类型的方法（“+”开头的方法）。</p>
<p>super_class： 指向该类的父类的指针，如果该类是根类（如NSObject或NSProxy），那么super_class就为nil。</p>
<p>类与对象的继承层次关系如图（图片源自网络）：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fd4x49jnhbj30gm0h5wgj.jpg" alt=""></p>
<p>上图实线是 super_class 指针，虚线是isa指针。 有趣的是根元类的超类是NSObject，而isa指向了自己，而NSObject的超类为nil，也就是它没有超类。</p>
<p>所有的metaclass中isa指针都是指向根metaclass，而根metaclass则指向自身。根metaclass是通过继承根类产生的，与根class结构体成员一致，不同的是根metaclass的isa指针指向自身。</p>
<h3 id="2-SEL"><a href="#2-SEL" class="headerlink" title="2. SEL"></a>2. SEL</h3><p><code>objc_msgSend:</code>的真身是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSend ( id self, SEL op, ... );</div></pre></td></tr></table></figure>
<p><code>objc_msgSend</code>函数第二个参数类型为<code>SEL</code>，它是<code>selector</code>在Objc中的表示类型（Swift中是<code>Selector</code>类）。<code>selector</code>是方法选择器，可以理解为区分方法的 ID，而这个 ID 的数据结构是<code>SEL</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_selector *SEL;</div></pre></td></tr></table></figure>
<p>其实它就是个映射到方法的C字符串，你可以用 Objc 编译器命令<code>@selector()</code>或者 Runtime 系统的<code>sel_registerName</code>函数来获得一个SEL类型的方法选择器。<br>不同类中相同名字的方法所对应的方法选择器是相同的，即使方法名字相同而变量类型不同也会导致它们具有相同的方法选择器，于是 Objc 中方法命名有时会带上参数类型(NSNumber一堆抽象工厂方法拿走不谢)，Cocoa 中有好多长长的方法哦。</p>
<p>objc_selector的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct objc_selector &#123;</div><div class="line">    char *name;                       OBJC2_UNAVAILABLE;// 名称</div><div class="line">    char *types;                      OBJC2_UNAVAILABLE;// 类型</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>name和types都是char类型。</p>
<h3 id="3-IMP"><a href="#3-IMP" class="headerlink" title="3. IMP"></a>3. IMP</h3><p>IMP是“implementation”的缩写，它是由编译器生成的一个函数指针。当你发起一个消息后（下文介绍），这个函数指针决定了最终执行哪段代码。它的定义为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef id (*IMP)(id, SEL, ...);</div></pre></td></tr></table></figure>
<p>它就是一个<a href="http://yulingtianxia.com/blog/2014/04/17/han-shu-zhi-zhen-yu-zhi-zhen-han-shu/" target="_blank" rel="external">函数指针</a>，这是由编译器生成的。当你发起一个 ObjC 消息之后，最终它会执行的那段代码，就是由这个函数指针指定的。而 IMP 这个函数指针就指向了这个方法的实现。既然得到了执行某个实例某个方法的入口，我们就可以绕开消息传递阶段，直接执行方法，这在后面会提到。<br>你会发现IMP指向的方法与objc_msgSend函数类型相同，参数都包含id和SEL类型。每个方法名都对应一个SEL类型的方法选择器，而每个实例对象中的SEL对应的方法实现肯定是唯一的，通过一组id和SEL参数就能确定唯一的方法实现地址；反之亦然。</p>
<h3 id="4-Method"><a href="#4-Method" class="headerlink" title="4. Method"></a>4. Method</h3><p>Method代表类中的某个方法的类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_method *Method;</div></pre></td></tr></table></figure></p>
<p>objc_method的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct objc_method &#123;</div><div class="line">    SEL method_name                   OBJC2_UNAVAILABLE; // 方法名</div><div class="line">    char *method_types                OBJC2_UNAVAILABLE; // 方法类型</div><div class="line">    IMP method_imp                    OBJC2_UNAVAILABLE; // 方法实现</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法名method_name类型为SEL，上文提到过。<br>方法类型method_types是一个char指针，存储着方法的参数类型和返回值类型。<br>方法实现method_imp的类型为IMP，上文提到过。</p>
<h3 id="5-Ivar"><a href="#5-Ivar" class="headerlink" title="5. Ivar"></a>5. Ivar</h3><p>Ivar代表类中实例变量的类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_ivar *Ivar;</div></pre></td></tr></table></figure>
<p>objc_ivar的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct objc_ivar &#123;</div><div class="line">    char *ivar_name                   OBJC2_UNAVAILABLE; // 变量名</div><div class="line">    char *ivar_type                   OBJC2_UNAVAILABLE; // 变量类型</div><div class="line">    int ivar_offset                   OBJC2_UNAVAILABLE; // 基地址偏移字节</div><div class="line">#ifdef __LP64__</div><div class="line">    int space                         OBJC2_UNAVAILABLE; // 占用空间</div><div class="line">#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以根据实例查找其在类中的名字，也就是“反射”：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-(NSString *)nameWithInstance:(id)instance &#123;</div><div class="line">    unsigned int numIvars = 0;</div><div class="line">    NSString *key=nil;</div><div class="line">    Ivar * ivars = class_copyIvarList([self class], &amp;numIvars);</div><div class="line">    for(int i = 0; i &lt; numIvars; i++) &#123;</div><div class="line">        Ivar thisIvar = ivars[i];</div><div class="line">        const char *type = ivar_getTypeEncoding(thisIvar);</div><div class="line">        NSString *stringType =  [NSString stringWithCString:type encoding:NSUTF8StringEncoding];</div><div class="line">        if (![stringType hasPrefix:@&quot;@&quot;]) &#123;</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">        if ((object_getIvar(self, thisIvar) == instance)) &#123;//此处若 crash 不要慌！</div><div class="line">            key = [NSString stringWithUTF8String:ivar_getName(thisIvar)];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">    return key;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>class_copyIvarList 函数获取的不仅有实例变量，还有属性。但会在原本的属性名前加上一个下划线。</p>
<h3 id="6-objc-property-t"><a href="#6-objc-property-t" class="headerlink" title="6. objc_property_t"></a>6. objc_property_t</h3><p>objc_property_t是属性，它的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_property *objc_property_t;</div></pre></td></tr></table></figure>
<p>objc_property是内置的类型，与之关联的还有一个objc_property_attribute_t，它是属性的attribute，也就是其实是对属性的详细描述，包括属性名称、属性编码类型、原子类型/非原子类型等。它的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">typedef struct &#123;</div><div class="line">    const char *name; // 名称</div><div class="line">    const char *value;  // 值（通常是空的）</div><div class="line">&#125; objc_property_attribute_t;</div></pre></td></tr></table></figure>
<p>可以通过class_copyPropertyList 和 protocol_copyPropertyList方法来获取类和协议中的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)</div><div class="line">objc_property_t *protocol_copyPropertyList(Protocol *proto, unsigned int *outCount)</div></pre></td></tr></table></figure>
<p>返回类型为指向指针的指针，哈哈，因为属性列表是个数组，每个元素内容都是一个objc_property_t指针，而这两个函数返回的值是指向这个数组的指针。</p>
<p>举个例子，先声明一个类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface Lender : NSObject &#123;</div><div class="line">    float alone;</div><div class="line">&#125;</div><div class="line">@property float alone;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>用下面的代码获取属性列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">id LenderClass = objc_getClass(&quot;Lender&quot;);</div><div class="line">unsigned int outCount;</div><div class="line">objc_property_t *properties = class_copyPropertyList(LenderClass, &amp;outCount);</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>你可以用property_getName函数来查找属性名称：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *property_getName(objc_property_t property)</div></pre></td></tr></table></figure>
<p>你可以用class_getProperty 和 protocol_getProperty通过给出的名称来在类和协议中获取属性的引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">objc_property_t class_getProperty(Class cls, const char *name)</div><div class="line">objc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)</div></pre></td></tr></table></figure>
<p>你可以用property_getAttributes函数来发掘属性的名称和@encode类型字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *property_getAttributes(objc_property_t property)</div></pre></td></tr></table></figure>
<p>把上面的代码放一起，你就能从一个类中获取它的属性啦：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">id LenderClass = objc_getClass(&quot;Lender&quot;);</div><div class="line">unsigned int outCount, i;</div><div class="line">objc_property_t *properties = class_copyPropertyList(LenderClass, &amp;outCount);</div><div class="line">for (i = 0; i &lt; outCount; i++) &#123;</div><div class="line">    objc_property_t property = properties[i];</div><div class="line">    fprintf(stdout, &quot;%s %s\n&quot;, property_getName(property), property_getAttributes(property));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对比下 class_copyIvarList 函数，使用 class_copyPropertyList 函数只能获取类的属性，而不包含成员变量。但此时获取的属性名是不带下划线的。</p>
<h3 id="7-Cache"><a href="#7-Cache" class="headerlink" title="7. Cache"></a>7. Cache</h3><p>Catch的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_cache *Cache</div></pre></td></tr></table></figure>
<p>objc_cache的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct objc_cache &#123;</div><div class="line">    unsigned int mask                   OBJC2_UNAVAILABLE;</div><div class="line">    unsigned int occupied               OBJC2_UNAVAILABLE;</div><div class="line">    Method buckets[1]                   OBJC2_UNAVAILABLE;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Cache为方法调用的性能进行优化，通俗地讲，每当实例对象接收到一个消息时，它不会直接在isa指向的类的方法列表中遍历查找能够响应消息的方法，因为这样效率太低了，而是优先在Cache中查找。Runtime 系统会把被调用的方法存到Cache中（理论上讲一个方法如果被调用，那么它有可能今后还会被调用），下次查找的时候效率更高。这根计算机组成原理中学过的 CPU 绕过主存先访问Cache的道理挺像，而我猜苹果为提高Cache命中率应该也做了努力吧。</p>
<p>mask: 指定分配cache buckets的总数。在方法查找中，Runtime使用这个字段确定数组的索引位置。</p>
<p>occupied: 实际占用cache buckets的总数。</p>
<p>buckets: 指定Method数据结构指针的数组。这个数组可能包含不超过mask+1个元素。需要注意的是，指针可能是NULL，表示这个缓存bucket没有被占用，另外被占用的bucket可能是不连续的。这个数组可能会随着时间而增长。</p>
<p>objc_msgSend（下文讲解）每调用一次方法后，就会把该方法缓存到cache列表中，下次的时候，就直接优先从cache列表中寻找，如果cache没有，才从methodLists中查找方法。</p>
<h3 id="8-Catagory"><a href="#8-Catagory" class="headerlink" title="8. Catagory"></a>8. Catagory</h3><p>类别可以动态的为已存在的类添加新的方法。<br>它的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_category *Category;</div></pre></td></tr></table></figure>
<p>objc_category的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct objc_category &#123;</div><div class="line">    char *category_name                           OBJC2_UNAVAILABLE; // 类别名称</div><div class="line">    char *class_name                              OBJC2_UNAVAILABLE; // 类名</div><div class="line">    struct objc_method_list *instance_methods     OBJC2_UNAVAILABLE; // 实例方法列表</div><div class="line">    struct objc_method_list *class_methods        OBJC2_UNAVAILABLE; // 类方法列表</div><div class="line">    struct objc_protocol_list *protocols          OBJC2_UNAVAILABLE; // 协议列表</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Objective-C的消息传递"><a href="#Objective-C的消息传递" class="headerlink" title="Objective-C的消息传递"></a>Objective-C的消息传递</h1><h3 id="1-基本消息传递"><a href="#1-基本消息传递" class="headerlink" title="1. 基本消息传递"></a>1. 基本消息传递</h3><p>面向对象编程中，对象调用方法叫做发送消息。在编译时，程序的源代码就会将对象发送消息转换成Runtime的objc_msgSend函数调用。</p>
<p>有关消息发送和消息转发机制的原理，可以查看<a href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/" target="_blank" rel="external">这篇文章</a>。</p>
<p>下面详细叙述下消息发送步骤：</p>
<ol>
<li><p>检测这个 selector 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会 retain, release 这些函数了。</p>
</li>
<li><p>检测这个 target 是不是 nil 对象。ObjC 的特性是允许对一个 nil 对象执行任何一个方法不会 Crash，因为会被忽略掉。</p>
</li>
<li><p>如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，完了找得到就跳到对应的函数去执行。</p>
</li>
<li><p>如果 cache 找不到就找一下方法分发表。</p>
</li>
<li><p>如果分发表找不到就到超类的分发表去找，一直找，直到找到NSObject类为止。</p>
</li>
<li><p>如果还找不到就要开始进入动态方法解析了，后面会提到。</p>
</li>
</ol>
<p><strong>PS</strong>:这里说的分发表其实就是Class中的方法列表，它将方法选择器和方法实现地址联系起来。</p>
<p>例如某实例变量receiver实现某一个方法oneMethod：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[receiver oneMethod];</div></pre></td></tr></table></figure>
<p>Runtime会将其转成类似这样的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(receiver, selector);</div></pre></td></tr></table></figure>
<p>如果消息有参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(receiver, selector, arg1, arg2, ...);</div></pre></td></tr></table></figure>
<p>如果消息的接收者能够找到对应的selector，那么就相当于直接执行了接收者这个对象的特定方法；否则，消息要么被转发，或是临时向接收者动态添加这个selector对应的实现内容，要么就干脆玩完崩溃掉。</p>
<p>Runtime会根据类型自动转换成下列某一个函数：<br>objc_msgSend:普通的消息都会通过该函数发送;<br>objc_msgSend_stret:消息中有数据结构作为返回值（不是简单值）时，通过此函数发送和接收返回值;<br>objc_msgSendSuper:和objc_msgSend类似，这里把消息发送给父类的实例;<br>objc_msgSendSuper_stret:和objc_msgSend_stret类似，这里把消息发送给父类的实例并接收返回值.</p>
<p>当消息被发送到实例对象时，是如图所示处理的（图片源自网络）：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fd4xocwif8j309z0fegm4.jpg" alt=""></p>
<p>objc_msgSend函数的调用过程：</p>
<ul>
<li>检测这个selector是不是要忽略的。</li>
<li>检测这个target是不是nil对象。nil对象发送任何一个消息都会被忽略掉。</li>
<li>调用实例方法时，它会首先在自身isa指针指向的类（class）methodLists中查找该方法，如果找不到则会通过class的super_class指针找到父类的类对象结构体，然后从methodLists中查找该方法，如果仍然找不到，则继续通过super_class向上一级父类结构体中查找，直至根class；</li>
<li>当我们调用某个类方法时，它会首先通过自己的isa指针找到metaclass，并从其中methodLists中查找该类方法，如果找不到则会通过metaclass的super_class指针找到父类的metaclass对象结构体，然后从methodLists中查找该方法，如果仍然找不到，则继续通过super_class向上一级父类结构体中查找，直至根metaclass；</li>
<li>前三部都找不到就会进入动态方法解析(看下文)。</li>
</ul>
<h3 id="2-消息动态解析"><a href="#2-消息动态解析" class="headerlink" title="2. 消息动态解析"></a>2. 消息动态解析</h3><p>动态解析流程图（图片来自网络）：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fd4yyovatsj30gk09kgmw.jpg" alt=""></p>
<p>请参照图片品味以下步骤（实例请看下文《Runtime demo6》）：</p>
<ul>
<li>第一步：通过resolveInstanceMethod：方法决定是否动态添加方法。如果返回Yes则通过class_addMethod动态添加方法，消息得到处理，结束；如果返回No，则进入下一步；</li>
<li>第二步：这步会进入forwardingTargetForSelector:方法，用于指定备选对象响应这个selector，不能指定为self。如果返回某个对象则会调用对象的方法，结束。如果返回nil，则进入第三部；</li>
<li>第三步：这步我们要通过methodSignatureForSelector:方法签名，如果返回nil，则消息无法处理。如果返回methodSignature，则进入下一步；</li>
<li>第四步：这步调用forwardInvocation：方法，我们可以通过anInvocation对象做很多处理，比如修改实现方法，修改响应对象等，如果方法调用成功，则结束。如果失败，则进入doesNotRecognizeSelector方法，若我们没有实现这个方法，那么就会crash。</li>
</ul>
<h1 id="Runtime实战"><a href="#Runtime实战" class="headerlink" title="Runtime实战"></a>Runtime实战</h1><h3 id="1-Runtime-初识"><a href="#1-Runtime-初识" class="headerlink" title="1. Runtime 初识"></a>1. Runtime 初识</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">    // 动态创建对象 创建一个Person 继承自 NSObject类</div><div class="line">    Class People = objc_allocateClassPair([NSObject class], &quot;Person&quot;, 0);</div><div class="line">    </div><div class="line">    //为该类对象添加NSString *_name成员变量</div><div class="line">    class_addIvar(People, &quot;_name&quot;, sizeof(NSString*), sizeof(NSString*), @encode(NSString*));</div><div class="line">    class_addIvar(People, &quot;_age&quot;, sizeof(int), sizeof(int), @encode(int));</div><div class="line">    </div><div class="line">    //注册一个叫say方法</div><div class="line">    SEL s = sel_registerName(&quot;say:&quot;);</div><div class="line">    </div><div class="line">    //为该类增加名为say的方法</div><div class="line">    class_addMethod(People, s , (IMP)sayFunction, &quot;v@:@&quot;);</div><div class="line">    </div><div class="line">    //注册该类</div><div class="line">    objc_registerClassPair(People);</div><div class="line">    </div><div class="line">    //创建一个了类的实例</div><div class="line">    id peopleInstance = [[People alloc] init];</div><div class="line">    </div><div class="line">    //KVC 动态改变 对象peopleInstance 中的实例变量</div><div class="line">    [peopleInstance setValue:@&quot;Feyddy&quot; forKey:@&quot;name&quot;];</div><div class="line">    </div><div class="line">    //从类中获取成员变量Ivar</div><div class="line">    Ivar ageIvar = class_getInstanceVariable(People, &quot;_age&quot;);</div><div class="line">    </div><div class="line">    //为peopleInstance的成员变量赋值</div><div class="line">    object_setIvar(peopleInstance, ageIvar, @25);</div><div class="line">    </div><div class="line">    //调用 peopleInstance 对象中的 s 方法选择器对应的方法</div><div class="line">     objc_msgSend(peopleInstance, s, @&quot;大家好!&quot;); // 这样写也可以，请看我博客说明</div><div class="line">    /*</div><div class="line">     //修改的方法有返回值就用IMP，无返回值就用VIMP</div><div class="line">     typedef id   (*_IMP)  (id,SEL,...);</div><div class="line">     typedef void (*_VIMP) (id,SEL,...);</div><div class="line">     */</div><div class="line">    ((void (*)(id,SEL,id))objc_msgSend)(peopleInstance, s, @&quot;大家好&quot;);</div><div class="line">    </div><div class="line">    //当People类或者它的子类的实例还存在，则不能调用objc_disposeClassPair这个方法；因此这里要先销毁实例对象后才能销毁类；</div><div class="line">    peopleInstance = nil;</div><div class="line">    </div><div class="line">    // 销毁类</div><div class="line">    objc_disposeClassPair(People);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 自定义一个方法</div><div class="line">void sayFunction(id self, SEL _cmd, id some) &#123;</div><div class="line">    NSLog(@&quot;%@岁的%@说：%@&quot;, object_getIvar(self, class_getInstanceVariable([self class], &quot;_age&quot;)),[self valueForKey:@&quot;name&quot;],some);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后的结果是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-02-27 14:33:14.211 Runtime初识篇[9442:185921] 25岁的Feyddy说：大家好!</div><div class="line">2017-02-27 14:33:14.211 Runtime初识篇[9442:185921] 25岁的Feyddy说：大家好</div></pre></td></tr></table></figure>
<p>在使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(peopleInstance, s, @&quot;大家好!&quot;);</div></pre></td></tr></table></figure>
<p>默认会出现以下错误：<br>objc_msgSend()报错Too many arguments to function call ,expected 0,have3<br>直接通过objc_msgSend(self, setter, value)是报错，说参数过多。<br>请这样解决：<br>Build Setting–&gt; Apple LLVM 7.0 – Preprocessing–&gt; Enable Strict Checking of objc_msgSend Calls 改为 NO。<br>当然你也可以这样写(推荐)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((void (*)(id, SEL, id))objc_msgSend)(peopleInstance, s, @&quot;大家好&quot;);</div></pre></td></tr></table></figure>
<p>强制转换objc_msgSend函数类型为带三个参数且返回值为void函数，然后才能传三个参数。</p>
<p>此实战内容是，动态创建一个类，并创建成员变量和方法，最后赋值成员变量并发送消息。其中成员变量的赋值使用了KVC和object_setIvar函数两种方式，这些东西大家举一反三就可以了。</p>
<h3 id="2-Runtime-特征"><a href="#2-Runtime-特征" class="headerlink" title="2. Runtime 特征"></a>2. Runtime 特征</h3><p>下面我们来获取一下个人的相关信息：</p>
<h5 id="Person-h"><a href="#Person-h" class="headerlink" title="Person.h"></a>Person.h</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line">&#123;</div><div class="line">    NSString *occupation;</div><div class="line">    NSString *nationality;</div><div class="line">&#125;</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line">@property (nonatomic) NSUInteger age;</div><div class="line"></div><div class="line">- (NSDictionary *)allProperties;</div><div class="line">- (NSDictionary *)allIvars;</div><div class="line">- (NSDictionary *)allMethods;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="Person-m"><a href="#Person-m" class="headerlink" title="Person.m"></a>Person.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line">@implementation Person</div><div class="line"></div><div class="line">- (NSDictionary *)allProperties &#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    </div><div class="line">    //获取类的所有属性，如果没有属性count就为0</div><div class="line">    objc_property_t *properties = class_copyPropertyList([self class], &amp;count);</div><div class="line">    </div><div class="line">    NSMutableDictionary *resultDict = [@&#123;&#125;mutableCopy];</div><div class="line">    </div><div class="line">    for (NSUInteger i = 0; i &lt; count; i++) &#123;</div><div class="line">        //获取属性的名称和值</div><div class="line">        const char *propertyName = property_getName(properties[i]);</div><div class="line">        NSString *name = [NSString stringWithUTF8String:propertyName];</div><div class="line">        id propertyValue = [self valueForKey:name];</div><div class="line">        </div><div class="line">        if (propertyValue) &#123;</div><div class="line">            resultDict[name] = propertyValue;</div><div class="line">        &#125;else&#123;</div><div class="line">            resultDict[name] = @&quot;字典的key对应的value不能为nil哦！&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //这里properties是一个数组指针，我们需要使用free函数来释放内存</div><div class="line">    free(properties);</div><div class="line">    </div><div class="line">    return resultDict;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSDictionary *)allIvars</div><div class="line">&#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    </div><div class="line">    Ivar *ivars = class_copyIvarList([self class], &amp;count);</div><div class="line">    </div><div class="line">    NSMutableDictionary *resultDict = [@&#123;&#125; mutableCopy];</div><div class="line">    </div><div class="line">    for (NSUInteger i = 0; i &lt; count; i ++) &#123;</div><div class="line">        </div><div class="line">        const char *varName = ivar_getName(ivars[i]);</div><div class="line">        NSString *name = [NSString stringWithUTF8String:varName];</div><div class="line">        id varValue = [self valueForKey:name];</div><div class="line">        </div><div class="line">        if (varValue) &#123;</div><div class="line">            resultDict[name] = varValue;</div><div class="line">        &#125; else &#123;</div><div class="line">            resultDict[name] = @&quot;字典的key对应的value不能为nil哦！&quot;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(ivars);</div><div class="line">    </div><div class="line">    return resultDict;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSDictionary *)allMethods</div><div class="line">&#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    </div><div class="line">    // 获取类的所有方法，如果没有方法count就为0</div><div class="line">    Method *methods = class_copyMethodList([self class], &amp;count);</div><div class="line">    </div><div class="line">    NSMutableDictionary *resultDict = [@&#123;&#125; mutableCopy];</div><div class="line">    </div><div class="line">    for (NSUInteger i = 0; i &lt; count; i ++) &#123;</div><div class="line">        </div><div class="line">        // 获取方法名称</div><div class="line">        SEL methodSEL = method_getName(methods[i]);</div><div class="line">        const char *methodName = sel_getName(methodSEL);</div><div class="line">        NSString *name = [NSString stringWithUTF8String:methodName];</div><div class="line">        </div><div class="line">        // 获取方法的参数列表</div><div class="line">        int arguments = method_getNumberOfArguments(methods[i]);</div><div class="line">        </div><div class="line">        resultDict[name] = @(arguments-2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(methods);</div><div class="line">    </div><div class="line">    return resultDict;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="ViewController-m"><a href="#ViewController-m" class="headerlink" title="ViewController.m"></a>ViewController.m</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    Person *feyddy = [[Person alloc] init];</div><div class="line">    </div><div class="line">    feyddy.name = @&quot;Feyddy&quot;;</div><div class="line">    feyddy.age = 25;</div><div class="line">    [feyddy setValue:@&quot;ios developer&quot; forKey:@&quot;occupation&quot;];</div><div class="line">    </div><div class="line">    NSDictionary *propertiesResultDict = [feyddy allProperties];</div><div class="line">    for (NSString *propertyName in propertiesResultDict.allKeys) &#123;</div><div class="line">        NSLog(@&quot;propertyName:%@, propertyValue:%@&quot;,propertyName, propertiesResultDict[propertyName]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSDictionary *ivarResultDic = [feyddy allIvars];</div><div class="line">    for (NSString *ivarName in ivarResultDic.allKeys) &#123;</div><div class="line">        NSLog(@&quot;ivarName:%@, ivarValue:%@&quot;,ivarName, ivarResultDic[ivarName]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSDictionary *methodResultDic = [feyddy allMethods];</div><div class="line">    for (NSString *methodName in methodResultDic.allKeys) &#123;</div><div class="line">        NSLog(@&quot;methodName:%@, argumentsCount:%@&quot;, methodName, methodResultDic[methodName]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">2017-02-27 14:57:38.049 Runtime 特征篇[9914:198137] propertyName:name, propertyValue:Feyddy</div><div class="line">2017-02-27 14:57:38.049 Runtime 特征篇[9914:198137] propertyName:age, propertyValue:25</div><div class="line">2017-02-27 14:57:38.050 Runtime 特征篇[9914:198137] ivarName:_name, ivarValue:Feyddy</div><div class="line">2017-02-27 14:57:38.051 Runtime 特征篇[9914:198137] ivarName:nationality, ivarValue:字典的key对应的value不能为nil哦！</div><div class="line">2017-02-27 14:57:38.051 Runtime 特征篇[9914:198137] ivarName:_age, ivarValue:25</div><div class="line">2017-02-27 14:57:38.051 Runtime 特征篇[9914:198137] ivarName:occupation, ivarValue:ios developer</div><div class="line">2017-02-27 14:57:38.052 Runtime 特征篇[9914:198137] methodName:name, argumentsCount:0</div><div class="line">2017-02-27 14:57:38.052 Runtime 特征篇[9914:198137] methodName:setName:, argumentsCount:1</div><div class="line">2017-02-27 14:57:38.053 Runtime 特征篇[9914:198137] methodName:allIvars, argumentsCount:0</div><div class="line">2017-02-27 14:57:38.053 Runtime 特征篇[9914:198137] methodName:age, argumentsCount:0</div><div class="line">2017-02-27 14:57:38.054 Runtime 特征篇[9914:198137] methodName:allMethods, argumentsCount:0</div><div class="line">2017-02-27 14:57:38.054 Runtime 特征篇[9914:198137] methodName:setAge:, argumentsCount:1</div><div class="line">2017-02-27 14:57:38.054 Runtime 特征篇[9914:198137] methodName:allProperties, argumentsCount:0</div><div class="line">2017-02-27 14:57:38.055 Runtime 特征篇[9914:198137] methodName:.cxx_destruct, argumentsCount:0</div></pre></td></tr></table></figure>
<p>学习点：如何获取对象所有的属性名称和属性值、获取对象所有成员变量名称和变量值、获取对象所有的方法名和方法参数数量。</p>
<h3 id="3-Runtime-增加新技能篇"><a href="#3-Runtime-增加新技能篇" class="headerlink" title="3. Runtime 增加新技能篇"></a>3. Runtime 增加新技能篇</h3><h5 id="通过Category和Associated-Objects增加技能"><a href="#通过Category和Associated-Objects增加技能" class="headerlink" title="通过Category和Associated Objects增加技能"></a>通过Category和Associated Objects增加技能</h5><p>Person+Associated.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">typedef void (^CodingCallBack)();</div><div class="line">@interface Person (Associated)</div><div class="line">@property (nonatomic, strong) NSNumber *associatedHeight; // 胸围</div><div class="line">@property (nonatomic, copy) CodingCallBack associatedCallBack;  // 写代码</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Person+Associated.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person+Associated.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line">@implementation Person (Associated)</div><div class="line"></div><div class="line">- (void)setAssociatedHeight:(NSNumber *)associatedHeight</div><div class="line">&#123;</div><div class="line">    //设置关联对象</div><div class="line">    objc_setAssociatedObject(self, @selector(associatedHeight), associatedHeight, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSNumber *)associatedHeight &#123;</div><div class="line">    //得到关联对象</div><div class="line">    return objc_getAssociatedObject(self, @selector(associatedHeight));</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setAssociatedCallBack:(CodingCallBack)associatedCallBack &#123;</div><div class="line">    objc_setAssociatedObject(self, @selector(associatedCallBack), associatedCallBack, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CodingCallBack)associatedCallBack &#123;</div><div class="line">    return objc_getAssociatedObject(self, @selector(associatedCallBack));</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Person+Associated.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    </div><div class="line">    Person *feyddy = [[Person alloc] init];</div><div class="line">    feyddy.name = @&quot;Feyddy&quot;;</div><div class="line">    feyddy.age = 25;</div><div class="line">    [feyddy setValue:@&quot;ios developer&quot; forKey:@&quot;occupation&quot;];</div><div class="line">    feyddy.associatedHeight = @175;</div><div class="line">    feyddy.associatedCallBack = ^()&#123;</div><div class="line">    </div><div class="line">        NSLog(@&quot;Feyddy正在写代码~&quot;);</div><div class="line">    &#125;;</div><div class="line">    feyddy.associatedCallBack();</div><div class="line">    </div><div class="line">    NSDictionary *propertyResultDict = [feyddy allProperties];</div><div class="line">    for (NSString *propertyName in propertyResultDict.allKeys) &#123;</div><div class="line">        NSLog(@&quot;propertyName:%@, propertyValue:%@&quot;,propertyName, propertyResultDict[propertyName]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSDictionary *methodResultDic = [feyddy allMethods];</div><div class="line">    for (NSString *methodName in methodResultDic.allKeys) &#123;</div><div class="line">        NSLog(@&quot;methodName:%@, argumentsCount:%@&quot;, methodName, methodResultDic[methodName]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果多了加上去的属性和回调</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">2017-02-27 15:25:20.995 Runtime增加新技能篇[10457:210981] Feyddy正在写代码~</div><div class="line">2017-02-27 15:25:20.995 Runtime增加新技能篇[10457:210981] propertyName:associatedHeight, propertyValue:175</div><div class="line">2017-02-27 15:25:20.995 Runtime增加新技能篇[10457:210981] propertyName:age, propertyValue:25</div><div class="line">2017-02-27 15:25:20.996 Runtime增加新技能篇[10457:210981] propertyName:associatedCallBack, propertyValue:&lt;__NSGlobalBlock__: 0x10b1ee130&gt;</div><div class="line">2017-02-27 15:25:20.996 Runtime增加新技能篇[10457:210981] propertyName:name, propertyValue:Feyddy</div><div class="line">2017-02-27 15:25:20.996 Runtime增加新技能篇[10457:210981] methodName:age, argumentsCount:0</div><div class="line">2017-02-27 15:25:20.996 Runtime增加新技能篇[10457:210981] methodName:setAssociatedHeight:, argumentsCount:1</div><div class="line">2017-02-27 15:25:20.996 Runtime增加新技能篇[10457:210981] methodName:allProperties, argumentsCount:0</div><div class="line">2017-02-27 15:25:20.996 Runtime增加新技能篇[10457:210981] methodName:associatedHeight, argumentsCount:0</div><div class="line">2017-02-27 15:25:20.997 Runtime增加新技能篇[10457:210981] methodName:associatedCallBack, argumentsCount:0</div><div class="line">2017-02-27 15:25:20.997 Runtime增加新技能篇[10457:210981] methodName:allMethods, argumentsCount:0</div><div class="line">2017-02-27 15:25:20.997 Runtime增加新技能篇[10457:210981] methodName:.cxx_destruct, argumentsCount:0</div><div class="line">2017-02-27 15:25:21.036 Runtime增加新技能篇[10457:210981] methodName:setName:, argumentsCount:1</div><div class="line">2017-02-27 15:25:21.036 Runtime增加新技能篇[10457:210981] methodName:setAssociatedCallBack:, argumentsCount:1</div><div class="line">2017-02-27 15:25:21.036 Runtime增加新技能篇[10457:210981] methodName:allIvars, argumentsCount:0</div><div class="line">2017-02-27 15:25:21.037 Runtime增加新技能篇[10457:210981] methodName:name, argumentsCount:0</div><div class="line">2017-02-27 15:25:21.037 Runtime增加新技能篇[10457:210981] methodName:setAge:, argumentsCount:1</div></pre></td></tr></table></figure>
<p>我们平时在开发过程中用的比较多的就是添加回调了。</p>
<h3 id="4-Runtime-资料归档篇"><a href="#4-Runtime-资料归档篇" class="headerlink" title="4. Runtime 资料归档篇"></a>4. Runtime 资料归档篇</h3><p>Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject&lt;NSCoding&gt;</div><div class="line">@property (nonatomic, copy) NSString *name; // 姓名</div><div class="line">@property (nonatomic, strong) NSNumber *age; // 年龄</div><div class="line">@property (nonatomic, copy) NSString *occupation; // 职业</div><div class="line">@property (nonatomic, copy) NSString *nationality; // 国籍</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Person.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line">@implementation Person</div><div class="line">- (void)encodeWithCoder:(NSCoder *)aCoder</div><div class="line">&#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    Ivar *ivars = class_copyIvarList([self class], &amp;count);</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        const char *name = ivar_getName(ivar);</div><div class="line">        NSString *key = [NSString stringWithUTF8String:name];</div><div class="line">        id value = [self valueForKey:key];</div><div class="line">        </div><div class="line">        [aCoder encodeObject:value forKey:key];</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (instancetype)initWithCoder:(NSCoder *)aDecoder &#123;</div><div class="line">    self = [super init];</div><div class="line">    </div><div class="line">    if ( self) &#123;</div><div class="line">        unsigned int count = 0;</div><div class="line">        Ivar *ivars = class_copyIvarList([self class], &amp;count);</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            </div><div class="line">            Ivar ivar = ivars[i];</div><div class="line">            const char *name = ivar_getName(ivar);</div><div class="line">            NSString *key = [NSString stringWithUTF8String:name];</div><div class="line">            id value = [aDecoder decodeObjectForKey:key];</div><div class="line">            [self setValue:value forKey:key];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        free(ivars);</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="5-Runtime-资料转换篇"><a href="#5-Runtime-资料转换篇" class="headerlink" title="5. Runtime 资料转换篇"></a>5. Runtime 资料转换篇</h3><p>服务器返回了大量苍老师的数据，当然是要将JSON转换为Model啦！<br>相信平时你们的项目中也用到过这些三方库，下面我们去了解下runtime实现JSON和Model互转。</p>
<p>Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line">@property (nonatomic, copy) NSString *name; // 姓名</div><div class="line">@property (nonatomic, strong) NSNumber *age; // 年龄</div><div class="line">@property (nonatomic, copy) NSString *occupation; // 职业</div><div class="line">@property (nonatomic, copy) NSString *nationality; // 国籍</div><div class="line"></div><div class="line">// 生成model</div><div class="line">- (instancetype)initWithDictionary:(NSDictionary *)dictionary;</div><div class="line"></div><div class="line">// 转换成字典</div><div class="line">- (NSDictionary *)covertToDictionary;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Person.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line">@implementation Person</div><div class="line"></div><div class="line">- (instancetype)initWithDictionary:(NSDictionary *)dictionary &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        for (NSString *key in dictionary.allKeys) &#123;</div><div class="line">            id value = dictionary[key];</div><div class="line">            </div><div class="line">            SEL setter = [self propertySetterByKey:key];</div><div class="line">            if (setter) &#123;</div><div class="line">                // 这里还可以使用NSInvocation或者method_invoke，不再继续深究了，有兴趣google。</div><div class="line">                ((void (*)(id, SEL, id))objc_msgSend)(self, setter, value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSDictionary *)covertToDictionary &#123;</div><div class="line">    unsigned int count = 0;</div><div class="line">    objc_property_t *properties = class_copyPropertyList([self class], &amp;count);</div><div class="line">    </div><div class="line">    if (count !=0) &#123;</div><div class="line">        NSMutableDictionary *resultDict = [@&#123;&#125; mutableCopy];</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            const void *propertyName = property_getName(properties[i]);</div><div class="line">            NSString *name = [NSString stringWithUTF8String:propertyName];</div><div class="line">            </div><div class="line">            SEL getter = [self propertyGetterByKey:name];</div><div class="line">            if (getter) &#123;</div><div class="line">                id value = ((id (*)(id, SEL))objc_msgSend)(self, getter);</div><div class="line">                if (value) &#123;</div><div class="line">                    resultDict[name] = value;</div><div class="line">                &#125; else &#123;</div><div class="line">                    resultDict[name] = @&quot;字典的key对应的value不能为nil哦！&quot;;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        free(properties);</div><div class="line">        </div><div class="line">        return resultDict;</div><div class="line">    &#125;</div><div class="line">    free(properties);</div><div class="line">    </div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark - private methods</div><div class="line"></div><div class="line">//生成setter方法</div><div class="line">- (SEL)propertySetterByKey:(NSString *)key &#123;</div><div class="line">    </div><div class="line">    //首字母大写</div><div class="line">    NSString *propertySetterName = [NSString stringWithFormat:@&quot;set%@:&quot;,key.capitalizedString];</div><div class="line">    </div><div class="line">    SEL setter = NSSelectorFromString(propertySetterName);</div><div class="line">    if ([self respondsToSelector:setter]) &#123;</div><div class="line">        return setter;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//生成getter方法</div><div class="line">- (SEL)propertyGetterByKey:(NSString *)key &#123;</div><div class="line">    SEL getter = NSSelectorFromString(key);</div><div class="line">    if ([self respondsToSelector:getter]) &#123;</div><div class="line">        return getter;</div><div class="line">    &#125;</div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    NSDictionary *dict = @&#123;</div><div class="line">                           @&quot;name&quot; : @&quot;Feyddy&quot;,</div><div class="line">                           @&quot;age&quot;  : @25,</div><div class="line">                           @&quot;occupation&quot; : @&quot;ios developer&quot;,</div><div class="line">                           @&quot;nationality&quot; : @&quot;China&quot;</div><div class="line">                           &#125;;</div><div class="line">    </div><div class="line">    // 字典转模型</div><div class="line">    Person *feyddy = [[Person alloc] initWithDictionary:dict];</div><div class="line">    NSLog(@&quot;热烈欢迎，从%@远道而来的%@岁的%@%@&quot;,feyddy.nationality,feyddy.age,feyddy.name,feyddy.occupation);</div><div class="line">    </div><div class="line">    // 模型转字典</div><div class="line">    NSDictionary *covertedDict = [feyddy covertToDictionary];</div><div class="line">    NSLog(@&quot;%@&quot;,covertedDict);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2017-02-27 16:08:36.218 Runtime 资料转换篇[11340:233515] 热烈欢迎，从China远道而来的18岁的Feyddyios developer</div><div class="line">2017-02-27 16:08:36.219 Runtime 资料转换篇[11340:233515] &#123;</div><div class="line">    age = 18;</div><div class="line">    name = Feyddy;</div><div class="line">    nationality = China;</div><div class="line">    occupation = &quot;ios developer&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把假设是网络返回的苍老师的资料转化为了model，然后又将model转回字典。</p>
<h3 id="6-Runtime-消息动态解析篇"><a href="#6-Runtime-消息动态解析篇" class="headerlink" title="6. Runtime 消息动态解析篇"></a>6. Runtime 消息动态解析篇</h3><p><strong>6.1</strong> 添加eat实例方法，但是不提供方法的实现。验证当找不到方法的实现时，动态添加方法。</p>
<p>创建Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line"></div><div class="line">- (void)eat;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>创建Person.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line">@implementation Person</div><div class="line"></div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    //我们没有给Person类实现eat方法，我们这里动态添加方法</div><div class="line">    if ([NSStringFromSelector(sel) isEqualToString:@&quot;eat&quot;]) &#123;</div><div class="line">        class_addMethod(self, sel, (IMP)otherEat, &quot;v@:&quot;);</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return [super resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">void otherEat(id self, SEL cmd) &#123;</div><div class="line">    NSLog(@&quot;%@正在吃代码！！！&quot;,((Person *)self).name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    Person *feyddy = [[Person alloc] init];</div><div class="line">    feyddy.name = @&quot;Feyddy&quot;;</div><div class="line">    [feyddy eat];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-02-27 16:26:08.839 Runtime 消息动态解析篇[11676:241741] Feyddy正在吃代码！！！</div></pre></td></tr></table></figure>
<p>我们没有提供Feyddy吃的方法实现，因此在调用此方法的时候，会调用resolveInstanceMethod方法，我们动态添加了方法。我们也可以返回No，继续向下传递。</p>
<p><strong>6.2</strong> 这里我们不声明eat方法，将调用途中动态更换调用对象。<br>在上面代码的基础上，创建Animal的model.</p>
<p>Animal.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Animal : NSObject</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Animal.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#import &quot;Animal.h&quot;</div><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@implementation Animal</div><div class="line">// 第一步：我们不动态添加方法，返回NO，进入第二步；</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第二步：我们不指定备选对象响应aSelector，进入第三步；</div><div class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第三步：返回方法选择器，然后进入第四步；</div><div class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    if ([NSStringFromSelector(aSelector) isEqualToString:@&quot;eat&quot;]) &#123;</div><div class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [super methodSignatureForSelector:aSelector];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第四步：这步我们修改调用对象</div><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</div><div class="line">&#123;</div><div class="line">    // 我们改变调用对象为People</div><div class="line">    Person *feyddy = [[Person alloc] init];</div><div class="line">    feyddy.name = @&quot;Feyddy&quot;;</div><div class="line">    [anInvocation invokeWithTarget:feyddy];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Animal.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    Animal *animal = [[Animal alloc] init];</div><div class="line">    animal.name = @&quot;老鹰&quot;;</div><div class="line">    ((void (*)(id, SEL))objc_msgSend)((id)animal, @selector(eat));</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-02-27 16:38:16.859 Runtime 消息动态解析篇[11983:249378] Feyddy正在吃代码！！！</div></pre></td></tr></table></figure>
<p>成功更换了对象，把对象更换为feyddy了。</p>
<p><strong>6.3</strong>这里我是实现但是不提供声明，不修改调用对象，但是将sing方法修改为dance方法。</p>
<p>Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Person.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line">@implementation Person</div><div class="line"></div><div class="line">// 第一步：我们不动态添加方法，返回NO，进入第二步；</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第二部：我们不指定备选对象响应aSelector，进入第三步；</div><div class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第三步：返回方法选择器，然后进入第四部；</div><div class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    if ([NSStringFromSelector(aSelector) isEqualToString:@&quot;eat&quot;]) &#123;</div><div class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return [super methodSignatureForSelector:aSelector];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 第四部：这步我们修改调用方法</div><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</div><div class="line">&#123;</div><div class="line">    [anInvocation setSelector:@selector(dance)];</div><div class="line">    // 这还要指定是哪个对象的方法</div><div class="line">    [anInvocation invokeWithTarget:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 若forwardInvocation没有实现，则会调用此方法</div><div class="line">- (void)doesNotRecognizeSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;消息无法处理：%@&quot;, NSStringFromSelector(aSelector));</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)dance</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;跳舞！！！come on！&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#if TARGET_IPHONE_SIMULATOR</div><div class="line">#import &lt;objc/objc-runtime.h&gt;</div><div class="line">#else</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">#import &lt;objc/message.h&gt;</div><div class="line">#endif</div><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    Person *feyddy = [[Person alloc] init];</div><div class="line">    </div><div class="line">    ((void(*)(id, SEL)) objc_msgSend)((id)feyddy, @selector(eat));</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-02-27 16:44:43.190 Runtime 消息动态解析篇（二）[12150:253339] 跳舞！！！come on！</div></pre></td></tr></table></figure>
<p>成功更换了方法。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看完上面的相关学习和demo，我们来总结一下Runtime的一些知识。</p>
<h3 id="与Runtime交互"><a href="#与Runtime交互" class="headerlink" title="与Runtime交互"></a>与Runtime交互</h3><p>Objc 从三种不同的层级上与 Runtime 系统进行交互，分别是通过 Objective-C 源代码，通过 Foundation 框架的NSObject类定义的方法，通过对 runtime 函数的直接调用。</p>
<h4 id="Objective-C源代码"><a href="#Objective-C源代码" class="headerlink" title="Objective-C源代码"></a>Objective-C源代码</h4><p>大部分情况下你就只管写你的Objc代码就行，runtime 系统自动在幕后辛勤劳作着。<br>还记得引言中举的例子吧，消息的执行会使用到一些编译器为实现动态语言特性而创建的数据结构和函数，Objc中的类、方法和协议等在 runtime 中都由一些数据结构来定义，这些内容在后面会讲到。（比如objc_msgSend函数及其参数列表中的id和SEL都是啥）</p>
<h4 id="NSObject的方法"><a href="#NSObject的方法" class="headerlink" title="NSObject的方法"></a>NSObject的方法</h4><p>Cocoa 中大多数类都继承于NSObject类，也就自然继承了它的方法。最特殊的例外是NSProxy，它是个抽象超类，它实现了一些消息转发有关的方法，可以通过继承它来实现一个其他类的替身类或是虚拟出一个不存在的类，说白了就是领导把自己展现给大家风光无限，但是把活儿都交给幕后小弟去干。<br>有的NSObject中的方法起到了抽象接口的作用，比如description方法需要你重载它并为你定义的类提供描述内容。NSObject还有些方法能在运行时获得类的信息，并检查一些特性，比如class返回对象的类；isKindOfClass:和isMemberOfClass:则检查对象是否在指定的类继承体系中；respondsToSelector:检查对象能否响应指定的消息；conformsToProtocol:检查对象是否实现了指定协议类的方法；methodForSelector:则返回指定方法实现的地址。</p>
<h4 id="Runtime的函数"><a href="#Runtime的函数" class="headerlink" title="Runtime的函数"></a>Runtime的函数</h4><p>Runtime 系统是一个由一系列函数和数据结构组成，具有公共接口的动态共享库。头文件存放于/usr/include/objc目录下。许多函数允许你用纯C代码来重复实现 Objc 中同样的功能。虽然有一些方法构成了NSObject类的基础，但是你在写 Objc 代码时一般不会直接用到这些函数的，除非是写一些 Objc 与其他语言的桥接或是底层的debug工作。在<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html" target="_blank" rel="external">Objective-C Runtime Reference</a>中有对 Runtime 函数的详细文档。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git命令及Github项目部署(一)]]></title>
      <url>http://yoursite.com/2017/02/25/Git%E5%91%BD%E4%BB%A4%E5%8F%8AGithub%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git是目前世界上最先进的分布式版本控制系统。</p>
<p>与Git相对的就是SVN，它是集中式。</p>
<p>集中式vs分布式：<br>集中式：<br>集中式版本控制系统最大的毛病就是必须联网才能工作。<br>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>分布式：<br>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<a id="more"></a>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>本文只介绍MAC上的安装。在MAC上安装git有两种方式。</p>
<ul>
<li><p>是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a>。</p>
</li>
<li><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
</li>
</ul>
<p>安装完成后，还需要最后一步设置，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>
<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h3 id="创建版本库-repository"><a href="#创建版本库-repository" class="headerlink" title="创建版本库(repository)"></a>创建版本库(repository)</h3><p>你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<ul>
<li>先找一个地方创建空目录：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd ~/desktop</div><div class="line">$ mkdir TestRepository</div><div class="line">$ cd TestRepository</div><div class="line">$ pwd</div><div class="line">/Users/t3/desktop/TestRepository</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  <code>cd ~/desktop</code>：进入桌面目录下；<br>  <code>mkdir TestRepository</code>：创建一个空的仓库；<br>  <code>cd TestRepository</code>：进入仓库目录；<br>  <code>pwd</code>：命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/t3/desktop/TestRepository</code>。</p>
<ul>
<li>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">Initialized empty Git repository in /Users/t3/Desktop/TestRepository/.git/</div></pre></td></tr></table></figure>
</li>
</ul>
<p>此时，我们就创建了一个空的仓库。此时可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。<br>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -ah</div><div class="line">.	..	.git</div></pre></td></tr></table></figure>
<p>  当然，不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。</p>
<h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
<p><strong>（这里以iOS项目为例）</strong></p>
<ul>
<li>创建一个项目(TestRepositoryDemo),里面的<code>ViewController.swift</code>里面添上下面的代码：<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="keyword">super</span>.viewDidLoad()</div><div class="line">      <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">      <span class="built_in">print</span>(<span class="string">"我是版本一"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  一定要放到<code>repository</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p>
<ul>
<li><p>用命令<code>git add .</code>告诉Git，把本目录下的文件添加到Git仓库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
</li>
<li><p>用命令git commit告诉Git，把文件提交到仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  $ git commit -m &quot;第一次提交版本一&quot;</div><div class="line">[master (root-commit) d47e787] 第一次提交版本一</div><div class="line"> 15 files changed, 993 insertions(+)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  <code>git commit</code>：命令执行成功后会告诉你，15个文件被改动，插入了993行内容；<br>  <code>-m &quot;&quot;</code>：后面输入的是本次提交的说明；</p>
<p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add file1.txt</div><div class="line">$ git add file2.txt file3.txt</div><div class="line">$ git commit -m &quot;add 3 files.&quot;</div></pre></td></tr></table></figure></p>
<p>  <strong>注意：</strong>如果修改的文件放在子目录里面的时候，记得一定要先进入这个子目录，然后才能git add .,否则会出错的。</p>
<h3 id="查看修改内容和当前仓库状态"><a href="#查看修改内容和当前仓库状态" class="headerlink" title="查看修改内容和当前仓库状态"></a>查看修改内容和当前仓库状态</h3><p>首先我们先提交多个版本的项目，分别在代码中添加：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是版本一"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是版本二"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"我是版本三"</span>)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>运行<code>git status</code>命令看看结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure>
<p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，我们项目被修改过了，但还没有准备提交的修改。<br>我们还可以用<code>git diff</code>看看，我们修改的什么内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/TestRepositoryDemo/TestRepositoryDemo/ViewController.swift b/TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line">index e90c82d..6d60f42 100644</div><div class="line">--- a/TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line">+++ b/TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line">@@ -15,6 +15,7 @@ class ViewController: UIViewController &#123;</div><div class="line">         // Do any additional setup after loading the view, typically from a nib.</div><div class="line">         print(&quot;我是版本一&quot;)</div><div class="line">         print(&quot;我是版本二&quot;)</div><div class="line">+        print(&quot;我是版本三&quot;)</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">     override func didReceiveMemoryWarning() &#123;</div><div class="line">:</div></pre></td></tr></table></figure></p>
<p><code>git diff</code>就是查看与上一次提交的版本不一样的地方，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第15行添加了<code>个print(&quot;我是版本三&quot;)</code>。</p>
<p>然后按<code>Ctrl+Z</code>退出当前命令。</p>
<p>接下来，我们在把它提交到仓库。命令还是<code>git add .</code>和<code>git commit -m &quot;&quot;</code>。</p>
<p>当然，我们也可以在<code>git commit -m &quot;&quot;</code>之前<code>git status</code>一下，看看当前仓库的状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line">$ git commit -m &quot;版本第三次提交&quot;</div><div class="line">[master a04e162] 版本第三次提交</div><div class="line"> 2 files changed, 1 insertion(+)</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<p>到此我们就已经提交了新的版本了。</p>
<p><strong>注意：</strong>有的时候<code>git status</code>，新的内容一直是红色的，这个时候你可以cd到修改文件的目录下去，这样的话，可以解决该问题:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">TestRepositoryDemo</div><div class="line">$ ls -ah</div><div class="line">.			.DS_Store		TestRepositoryDemo</div><div class="line">..			.git</div><div class="line">cd TestRepositoryDemo</div></pre></td></tr></table></figure>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>用<code>git log</code>命令显示从最近到最远的提交日志，即查看提交的历史记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit a04e1629680d76333bf5c62eb1393772d6b80654</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:34:56 2017 +0800</div><div class="line"></div><div class="line">    版本第三次提交</div><div class="line"></div><div class="line">commit c557e1c93f1ddbe75a59e31d8280954da39ea031</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:22:03 2017 +0800</div><div class="line"></div><div class="line">    提交第二次版本</div><div class="line"></div><div class="line">commit d47e787ad8bf3f8e122f0fa4e0ca153fd26b481b</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:13:24 2017 +0800</div><div class="line"></div><div class="line">    第一次提交版本一</div></pre></td></tr></table></figure>
<p>最近的一次是<code>版本第三次提交</code>，上一次是<code>提交第二次版本</code>，最早的一次是<code>第一次提交版本一</code>。</p>
<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=oneline</div><div class="line">a04e1629680d76333bf5c62eb1393772d6b80654 版本第三次提交</div><div class="line">c557e1c93f1ddbe75a59e31d8280954da39ea031 提交第二次版本</div><div class="line">d47e787ad8bf3f8e122f0fa4e0ca153fd26b481b 第一次提交版本一</div></pre></td></tr></table></figure>
<p>其中一大串的数字和字符组成的是<code>commit id</code>（版本号）.</p>
<h4 id="说了这么多，终于到我们的重点，版本的回退"><a href="#说了这么多，终于到我们的重点，版本的回退" class="headerlink" title="说了这么多，终于到我们的重点，版本的回退"></a>说了这么多，终于到我们的重点，版本的回退</h4><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>3628164...882e1e0</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>回退版本的命令可以使用<code>git reset</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line">HEAD is now at c557e1c 提交第二次版本</div></pre></td></tr></table></figure>
<p>这样你的项目就变成了只有版本二的内容了，版本三的内容就没有了。</p>
<p>此时我们可以用<code>git log</code>看到下面没了版本三的提交记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit c557e1c93f1ddbe75a59e31d8280954da39ea031</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:22:03 2017 +0800</div><div class="line"></div><div class="line">    提交第二次版本</div><div class="line"></div><div class="line">commit d47e787ad8bf3f8e122f0fa4e0ca153fd26b481b</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:13:24 2017 +0800</div><div class="line"></div><div class="line">    第一次提交版本一</div></pre></td></tr></table></figure>
<p><strong>到这里，又有了一个新的问题，如果感觉版本三的内容是正确的，又不想回退了。怎么办？</strong></p>
<p>没关系，可以的。但是必须记住那个版本的<code>commit id</code>。否则没戏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard a04e1629</div><div class="line">HEAD is now at a04e162 版本第三次提交</div></pre></td></tr></table></figure>
<p>版本号没必要写全，前几位就可以了，Git会自动去找<br>此时，项目又回到了版本三的代码。</p>
<p>内部原理其实很简单：<br>因为Git在内部有个指向当前版本的<code>HEAD</code>指针，所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪,然后顺便把工作区的文件更新了。</p>
<p><strong>但是如果没记住第三次的版本号的话，怎么回退呢？</strong></p>
<p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>第二次的版本号</code>时，再想恢复到<code>第三次的版本号</code>，就必须找到<code>第三次的版本号</code>的<code>commit id</code>。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit c557e1c93f1ddbe75a59e31d8280954da39ea031</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:22:03 2017 +0800</div><div class="line"></div><div class="line">    提交第二次版本</div><div class="line"></div><div class="line">commit d47e787ad8bf3f8e122f0fa4e0ca153fd26b481b</div><div class="line">Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">Date:   Sat Feb 25 11:13:24 2017 +0800</div><div class="line"></div><div class="line">    第一次提交版本一</div><div class="line">xuzhonglindeMac-mini:TestRepository t3$ git reflog</div><div class="line">c557e1c HEAD@&#123;0&#125;: reset: moving to HEAD^</div><div class="line">a04e162 HEAD@&#123;1&#125;: reset: moving to a04e1629</div><div class="line">c557e1c HEAD@&#123;2&#125;: reset: moving to HEAD^</div><div class="line">a04e162 HEAD@&#123;3&#125;: commit: 版本第三次提交</div><div class="line">c557e1c HEAD@&#123;4&#125;: commit: 提交第二次版本</div><div class="line">d47e787 HEAD@&#123;5&#125;: commit (initial): 第一次提交版本一</div></pre></td></tr></table></figure>
<p>这样不就看到了吗？是不是很强大。</p>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>工作区就是电脑里面能看到的目录，比如我的<code>TestRepository</code>文件夹。</p>
<h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><p>工作区有个隐藏的目录<code>.git</code>，这个不算是工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<p><code>git add</code>：就是把文件修改添加到暂存区；<br><code>git commit</code>：就是把暂存区的所有内容提交到当前分支<br>可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>下面进行实践检验整理：<br>我们先对项目进行修改，增加<code>print(&quot;我是版本四&quot;)</code>,然后在工作区域增加一个文件，这里我随便写了一个main.js文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">	main.js</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure>
<p>Git非常清楚地告诉我们，<code>TestRepositoryDemo</code>被修改了，而<code>main.js</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>
<p>现在，使用两次命令<code>git add</code>，把项目和<code>main.js</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line">	new file:   main.js</div></pre></td></tr></table></figure>
<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git commit -m&quot;暂存区的介绍&quot;</div><div class="line">[master dc9ebfc] 暂存区的介绍</div><div class="line"> 3 files changed, 23 insertions(+)</div><div class="line"> create mode 100644 main.js</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了;<br>Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了;</p>
<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>.现在，文件就从版本库中被删除了。<br>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本。<br><code>$ git checkout -- test.txt</code>。</p>
<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<br>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>首先在github上创建一个空的仓库<code>TestRepository</code>.GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。<br>在本地的<code>TestRepository</code>仓库下运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git remote add repositoryName https://github.com/Feyddy/TestRepository.git</div><div class="line">$ git push -u repositoryName master</div><div class="line">Counting objects: 79, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (66/66), done.</div><div class="line">Writing objects: 100% (79/79), 31.55 KiB | 0 bytes/s, done.</div><div class="line">Total 79 (delta 20), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (20/20), done.</div><div class="line">To https://github.com/Feyddy/TestRepository.git</div><div class="line"> * [new branch]      master -&gt; master</div><div class="line">Branch master set up to track remote branch master from repositoryName.</div></pre></td></tr></table></figure></p>
<p>这里对一些出现的东西简单的说明一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/Feyddy/TestRepository.git</div></pre></td></tr></table></figure>
<p>这里的地址可以再github仓库上直接粘贴过来。当然也可以用SSH的方法进行远程关联。这里就不细讲了。</p>
<p><code>repositoryName</code>这个是远程库的名字，可以随便取名字。也有默认的取法叫做<code>origin</code>，这个相信大家看到过很多。</p>
<p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。</p>
<p>从现在起，只要是本地的<code>master</code>分之之提交最新修改至GitHub，只要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>上面讲的是先有本地仓库，然后再建立远程仓库，之后再关联两者。</p>
<p>下面将的是一开始就在远程建立一个仓库，然后将仓库克隆到本地。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/desktop</div><div class="line">$ git clone https://github.com/Feyddy/TestRepository.git</div></pre></td></tr></table></figure>
<p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>
<p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p>
<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fd2q7q1exwj209604sq2x.jpg" alt=""></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</p>
<p>也就是每执行一次<code>git commit</code>，圆圈就多一个，同时，<code>master</code>和<code>HEAD</code>也指向了新的圆圈。</p>
<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fd2qcxsx7oj20az06uaa5.jpg" alt=""></p>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！<br>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fd2qdj01mej20en06raa7.jpg" alt=""></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并:</p>
<p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1fd2qdu0pykj20d006cdfz.jpg" alt=""></p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支:</p>
<p><img src="https://ww3.sinaimg.cn/large/006y8lValy1fd2r0yn45oj30cs04q0sr.jpg" alt=""></p>
<p>原理讲完了，接下来进行实战：</p>
<ul>
<li><p>创建<code>dev</code>分支，然后切换到<code>dev</code>分支:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div><div class="line">Switched to a new branch &apos;dev&apos;</div></pre></td></tr></table></figure>
<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line">$ git checkout dev</div><div class="line">Switched to branch &apos;dev&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>用<code>git branch</code>命令查看当前分支:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">* dev</div><div class="line">  master</div></pre></td></tr></table></figure>
<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p>
</li>
<li><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对项目做个修改，加上一行（<code>print(&quot;我是分支dev提交的&quot;)</code>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;dev分支提交&quot;</div><div class="line">[dev af808ab] dev分支提交</div><div class="line"> 2 files changed, 1 insertion(+)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>  现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div><div class="line">Your branch is up-to-date with &apos;repositoryName/master&apos;.</div></pre></td></tr></table></figure>
<ul>
<li><p>切换回<code>master</code>分支后，再查看一个项目文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img src="https://ww3.sinaimg.cn/large/006y8lValy1fd2r8wfwj2j30df06lwel.jpg" alt=""></p>
</li>
<li><p>我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上（<code>git merge dev</code>）：<br><strong>注意：</strong>这里每次进行分支之间的操作的时候都会有提示，让你先提交一下。即：<code>git add</code>和<code>git commit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;master merge dev&quot;</div><div class="line">[master ce6bc2c] master merge dev</div><div class="line">1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line">$ git merge dev</div></pre></td></tr></table></figure>
<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查项目的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。合并完成后，就可以放心地删除<code>dev</code>分支了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -d dev</div><div class="line">Deleted branch dev (was 651f881).</div></pre></td></tr></table></figure>
<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">* master</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><ul>
<li><p>创建一个分支<code>feature1</code>分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature1</div><div class="line">Switched to a new branch &apos;feature1&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>修改最后一段代码，并在分支上提交：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;feature1提交&quot;</div><div class="line">[feature1 d9f022a] feature1提交</div><div class="line"> 2 files changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
</li>
<li><p>切换到<code>master</code>主分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div><div class="line">Your branch is up-to-date with &apos;repositoryName/master&apos;.</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>在<code>master</code>分支上修改最后一行代码，并且提交。</li>
</ul>
<p>现在，master分支和feature1分支各自都分别有新的提交，变成了这样：</p>
<p><img src="https://ww1.sinaimg.cn/large/006y8lValy1fd2s6rl62qj30d007yweo.jpg" alt=""></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git merge feature1</div><div class="line">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>
<p>果然冲突了！Git告诉我们，项目文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Your branch is ahead of &apos;repositoryName/master&apos; by 2 commits.</div><div class="line">  (use &quot;git push&quot; to publish your local commits)</div><div class="line">You have unmerged paths.</div><div class="line">  (fix conflicts and run &quot;git commit&quot;)</div><div class="line"></div><div class="line">Unmerged paths:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</div><div class="line"></div><div class="line">	both modified:   TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line">	both modified:   TestRepositoryDemo/TestRepositoryDemo/ViewController.swift</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure>
<p>我们可以直接查看项目文件中的内容：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本一"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本二"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本三"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本四"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本五"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是分支dev提交的"</span>)</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="type">HEAD</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是分支master提交的23"</span>)</div><div class="line">=======</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是分支feature提交的23"</span>)</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面可以看出，Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本一"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本二"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本三"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本四"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是版本五"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是分支dev提交的"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是分支master提交的23"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"我是分支feature提交的23"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再提交：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;conflict fixed&quot;</div><div class="line">[master 275259a] conflict fixed</div></pre></td></tr></table></figure>
<p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p><img src="https://ww1.sinaimg.cn/large/006y8lValy1fd2sluh137j30fs07zt8y.jpg" alt=""></p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ git log --graph --pretty=oneline --abbrev-commit</div><div class="line">*   275259a conflict fixed</div><div class="line">|\  </div><div class="line">| * d9f022a feature1提交</div><div class="line">* | 36b5df2 master提交1</div><div class="line">* | ae55a69 master提交</div><div class="line">|/  </div><div class="line">*   38db422 ad</div><div class="line">|\  </div><div class="line">| * 651f881 dev2</div><div class="line">| * 4b2458d dev2</div><div class="line">* | ce6bc2c master merge dev</div><div class="line">* |   cb7d0d6 devswitch</div><div class="line">|\ \  </div><div class="line">| |/  </div><div class="line">| * c6cd257 dev提交</div><div class="line">| * af808ab dev分支提交</div><div class="line">* | bcbe8de af</div><div class="line">* | 0a69183 master提胶</div><div class="line">|/  </div><div class="line">* 6b1c1be s</div><div class="line">* 5aa8e9c checkout</div><div class="line">* dc9ebfc 暂存区的介绍</div><div class="line">* a04e162 版本第三次提交</div><div class="line">:</div></pre></td></tr></table></figure>
<p>最后，删除<code>feature1</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -d feature1</div><div class="line">Deleted branch feature1 (was d9f022a).</div></pre></td></tr></table></figure>
<p><strong>git log –graph命令可以看到分支合并图</strong></p>
<h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会<code>在merge</code>时生成一个新的<code>commit</code>，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p>
<ul>
<li>创建并合并分支<code>dev</code>;</li>
<li>修改项目并提交一个新的<code>commit</code>;</li>
<li>切回<code>master</code>;</li>
<li><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</div></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的<code>commit</code>，所以加上<code>-m</code>参数，把<code>commit</code>描述写进去。</p>
</li>
<li><p>合并后，我们用<code>git log</code>看看分支历史：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ git log --graph</div><div class="line">* commit 5ed58de2217172a9a21f8b510e42783905a80c54</div><div class="line">| Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">| Date:   Sat Feb 25 16:33:42 2017 +0800</div><div class="line">| </div><div class="line">|     d</div><div class="line">|    </div><div class="line">*   commit 275259af9b9f3da4bb44dabf656bd3fc1c25c6ef</div><div class="line">|\  Merge: 36b5df2 d9f022a</div><div class="line">| | Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">| | Date:   Sat Feb 25 16:23:24 2017 +0800</div><div class="line">| | </div><div class="line">| |     conflict fixed</div><div class="line">| |   </div><div class="line">| * commit d9f022a92b9f96632fcde3a2f64ee9636461448a</div><div class="line">| | Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">| | Date:   Sat Feb 25 16:07:38 2017 +0800</div><div class="line">| | </div><div class="line">| |     feature1提交</div><div class="line">| |   </div><div class="line">* | commit 36b5df20a440121690a0a34b770c1f730e8d6787</div><div class="line">| | Author: Feyddy &lt;Feyddyxu@163.com&gt;</div><div class="line">| | Date:   Sat Feb 25 16:12:54 2017 +0800</div><div class="line">| | </div><div class="line">:</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到，不使用<code>Fast forward</code>模式，<code>merge</code>后就像这样：</p>
<p><img src="https://ww2.sinaimg.cn/large/006y8lValy1fd2sxg477gj30e307c0sw.jpg" alt=""></p>
<h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img src="https://ww4.sinaimg.cn/large/006y8lValy1fd2sz2m0aqj30f603sdg0.jpg" alt=""></p>
<h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>在开发中我们经常会遇到这样的一个问题：临时突然需要你立刻修改完一个Bug，但是当前正在分支上的工作进行了一半还没有完成，而且没法提交代码。<br>这样的状况，可以用Git的<code>stash</code>功能，可以把当前工作现场“储藏”起来，等恢复现场后继续工作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git stash</div><div class="line">Saved working directory and index state WIP on dev: c846f02 我是分支管理提交的</div><div class="line">HEAD is now at c846f02 我是分支管理提交的</div></pre></td></tr></table></figure>
<p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch dev</div><div class="line">Changes not staged for commit:</div></pre></td></tr></table></figure>
<p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div><div class="line">Your branch is ahead of &apos;repositoryName/master&apos; by 7 commits.</div><div class="line">$ git checkout -b &quot;issue-101&quot;</div><div class="line">Switched to a new branch &apos;issue-101&apos;</div></pre></td></tr></table></figure>
<p>现在修复bug，然后提交;<br>提交完后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch &apos;master&apos;</div><div class="line">Your branch is ahead of &apos;repositoryName/master&apos; by 7 commits.</div><div class="line">  (use &quot;git push&quot; to publish your local commits)</div><div class="line">$ git merge --no-ff -m &quot;merged bug fix&quot; issue-101</div><div class="line">$ git branch -d issue-101</div><div class="line">Deleted branch issue-101 (was cc17032).</div></pre></td></tr></table></figure>
<p>Bug修改完成后，是时候接着回到<code>dev</code>分支干活了！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git checkout dev</div><div class="line">Switched to branch &apos;dev&apos;</div><div class="line">$ git status</div><div class="line">On branch dev</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure>
<p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div><div class="line">stash@&#123;0&#125;: WIP on dev: c846f02 我是分支管理提交的</div></pre></td></tr></table></figure>
<p>工作现场还在，Git把<code>stash</code>内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<ul>
<li><p>一是用<code>git stash apply</code>恢复，但是恢复后，<code>stash</code>内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
</li>
<li><p>另一种方式是用<code>git stash pop</code>，恢复的同时把<code>stash</code>内容也删了：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git stash pop</div><div class="line">warning: Cannot merge binary files: TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate (Updated upstream vs. Stashed changes)</div><div class="line">Auto-merging TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div><div class="line">CONFLICT (content): Merge conflict in TestRepositoryDemo/TestRepositoryDemo.xcodeproj/project.xcworkspace/xcuserdata/t3.xcuserdatad/UserInterfaceState.xcuserstate</div></pre></td></tr></table></figure>
<p>再用<code>git stash list</code>查看，就看不到任何<code>stash</code>内容了。</p>
<p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的<code>stash</code>，用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash apply stash@&#123;0&#125;</div></pre></td></tr></table></figure>
<h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>在软件开发中添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>
<p>现在已开发新功能”Feyddy”为例。</p>
<ul>
<li>现在dev分之下创建一个分支<code>Feyddy</code>;</li>
<li>在项目中添加代码，完成新功能开发，然后提交；</li>
<li>切回<code>dev</code>，准备合并。一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</li>
</ul>
<p>但是此时，新功能不需要了，但是这个分支还是需要删除的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch -d Feyddy</div><div class="line">error: The branch &apos;Feyddy&apos; is not fully merged.</div><div class="line">If you are sure you want to delete it, run &apos;git branch -D Feyddy&apos;.</div></pre></td></tr></table></figure>
<p>销毁失败。Git友情提醒，Feyddy分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令<code>git branch -D Feyddy</code>。</p>
<p>下面只要我们继续强行删除就可以了。</p>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>
<p>要查看远程库的信息，用<code>git remote</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div><div class="line">repositoryName</div></pre></td></tr></table></figure>
<p>或者使用<code>git remote -v</code>显示更详细的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin	git@github.com:Feyddy/TestRepository.git (fetch)</div><div class="line">origin	git@github.com:Feyddy/TestRepository.git (push)</div><div class="line">repositoryName	https://github.com/Feyddy/TestRepository.git (fetch)</div><div class="line">repositoryName	https://github.com/Feyddy/TestRepository.git (push)</div></pre></td></tr></table></figure>
<p>上面显示了可以抓取和推送的<code>repositoryName</code>的地址。如果没有推送权限，就看不到push的地址。因为之前创建仓库的时候自己取了个名字.</p>
<h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git push repositoryName master</div><div class="line">Counting objects: 98, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (87/87), done.</div><div class="line">Writing objects: 100% (98/98), 18.28 KiB | 0 bytes/s, done.</div><div class="line">Total 98 (delta 34), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (34/34), completed with 3 local objects.</div><div class="line">To https://github.com/Feyddy/TestRepository.git</div><div class="line">   38db422..086c49c  master -&gt; master</div></pre></td></tr></table></figure>
<p>如果要推送其他分支，比如<code>dev</code>，就改成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git push repositoryName dev</div><div class="line">Counting objects: 98, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (87/87), done.</div><div class="line">Writing objects: 100% (98/98), 18.28 KiB | 0 bytes/s, done.</div><div class="line">Total 98 (delta 34), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (34/34), completed with 3 local objects.</div><div class="line">To https://github.com/Feyddy/TestRepository.git</div><div class="line">   38db422..086c49c  master -&gt; master</div></pre></td></tr></table></figure>
<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li>master分支是主分支，因此要时刻与远程同步；</li>
<li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<h4 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h4><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p>
<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆。</p>
<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。<br>现在小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div><div class="line">$ git reset --hard respositoryName/dev</div><div class="line">$ git push -u origin dev</div><div class="line">Total 0 (delta 0), reused 0 (delta 0)</div><div class="line">To https://github.com/Feyddy/TestRepository.git</div><div class="line"> * [new branch]      dev -&gt; dev</div><div class="line">Branch dev set up to track remote branch dev from origin.</div></pre></td></tr></table></figure>
<p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支push到远程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;dev&quot;</div><div class="line">[dev 2876867] dev</div><div class="line"> 2 files changed, 1 insertion(+)</div><div class="line">$ git push origin dev</div></pre></td></tr></table></figure>
<p>此时如果你也对同样的文件作了修改，并试图提交的时候，将会失败。因为有冲突，解决方法就是，<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送。</p>
<p><code>git pull</code>也失败了，原因是没有指定本地dev分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream dev origin/dev</div></pre></td></tr></table></figure>
<p>这样在pull。这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push。</p>
<p>因此，多人协作的工作模式通常是这样：</p>
<ul>
<li><p>首先，可以试图用git push origin branch-name推送自己的修改；</p>
</li>
<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>
</li>
<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>
</li>
<li><p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p>
</li>
<li><p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。</p>
</li>
</ul>
<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git命令 </tag>
            
            <tag> github项目部署 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS与WebSocket的使用]]></title>
      <url>http://yoursite.com/2017/02/24/iOS%E4%B8%8EWeb-Socket%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是HTML5规格中的一个非常重要的新特性，它的存在可以允许用户在浏览器中实现双向通信，实现数据的及时推送，这个技术的意义在于我们可以通过网页实现很多以前无法实现的应用。例如目前的在线聊天室，如果用户想要发送一句话，在他按下“发送”按钮的同时，浏览器会递送给目标服务器一个请求，然后服务器端会将这句话显示在网页上。而用户如果想要看到这句话，他需要刷新自己的浏览器以获得最新页面才可以。但是WebSocket的双向通信就神奇与此，通过WebSocket技术构建的HTML5应用，用户不再需要频繁的刷新页面以获取新数据，而新数据会自动由服务器端推送至用户的电脑屏幕上。</p>
<p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>
<p>在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
<a id="more"></a>
<p>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p>
<p>当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</p>
<p>WebSocket协议本质上是一个基于 TCP 的协议。</p>
<p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p>
<p>HTTP的三个问题：</p>
<pre><code>（1）为一个WEB客户端潜在的建产多个TCP连接。

（2）有一个大的HTTP头，以满足HTTP协议。

（3）客户端的脚本必须为输入连接和输出连接建立一个映射，以确定回复。

（4）基于请求-响应模式，HTTP服务端不能主动推送(push)数据到客户端。
</code></pre><p>Websocket的三个好处：</p>
<pre><code>（1）一个WEB客户端只有一个TCP连接。

（2）Websocket服务端可以推送数据到web客户端.

（3）轻量级的头，减少数据传送量

（4）服务端可以主动推送数据到客户端

（5）已成功应用于游戏、股票交易等用多用户实时系统中。

（6）支持多客户端，Web客戶

（7）客户端开发接口简单
</code></pre><p>关于WebSocket做个总结：</p>
<ol>
<li><p>Websocket就是借着 HTML5在浏览器中加了一个socket通信程序的客户端。你在安装浏览器的时候，默认装了一个客户端，可以向服务端请求，并建产链接。然后再像原先的socket应用程序一样来回互相发送消息。</p>
</li>
<li><p>Websocket不是一个新技术，只是HTML5中用javascript提供了一些接口，让你调用。服务端还是任何一门支持Socket通信的语言就行。</p>
</li>
<li><p>Websocket的应用。可以应用在很的领域，游戏，股票。简单说主要是一些多用户的实时应用。也可实现类似和webqq一样的网页聊工具。</p>
</li>
<li><p>Websocket把http协议轻量化了，在web交互中，我们再也不用让http包了一层又一层，而了去满足我们不需要的功能了。我们只要简单传我们想要的数据，协议我们可以在Websocket这种轻量级协议下，制定我们自己的子协议，可以减少不少的交互和网络流量哦。</p>
</li>
</ol>
<h2 id="WebSocket-在ios开发中的用法"><a href="#WebSocket-在ios开发中的用法" class="headerlink" title="WebSocket 在ios开发中的用法"></a>WebSocket 在ios开发中的用法</h2><p>一般APP里面有个聊天功能，需要服务器主动推数据到APP。HTTP 通信方式只能由客户端主动拉取，服务器不能主动推给客户端，如果有实时的消息，要立刻通知客户端就麻烦了，要么客户端每隔几秒钟发一次请求，看看有没有新数据，这种方式想想都知道耗流量电量。还一种方式就是走TCP/UDP协议服务器主动推给你，这种方式省流量。还有就是用websocket，websocket是h5里面的东西，但是它比原生socket用法简单。</p>
<p>WebSocket通信协议实现的是基于浏览器的原生socket，维基百科上解释：“WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。”</p>
<p>客户端在握手成功后，会触发WebSocket对象的onopen事件，告诉客户端连接已经成功建立了。客户端的WebSocket对象一共绑定了四个事件：</p>
<p>1、onopen：连接建立时触发；</p>
<p>2、onmessage：收到服务端消息时触发；</p>
<p>3、onerror：连接出错时触发；</p>
<p>4、onclose：连接关闭时触发；</p>
<p><strong>SocketRocket：</strong><br>它是采用OC编写的一个WebSocket客户端，来实现客户端与服务器的双向通信。<br>SocketRocket 是个标准的 Objective-C WebSocket (RFC 6455) 客户端库。</p>
<p>主要特性：</p>
<pre><code>TLS (wss) 支持

使用 NSStream/CFNetworking

使用 ARC

并行架构

基于委托
</code></pre><p>框架依赖：</p>
<pre><code>libicucore.dylib

CFNetwork.framework

Security.framework

Foundation.framework
</code></pre><p>SocketRocket Demo下载地址：<a href="https://github.com/square/SocketRocket" target="_blank" rel="external">https://github.com/square/SocketRocket</a></p>
<p>1.创建和设置代理对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SRWebSocket *socket = [[SRWebSocket alloc] initWithURLRequest:</div><div class="line">[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http://ip地址:端口&quot;]];</div><div class="line"> </div><div class="line">socket.delegate = self;    // 实现这个 SRWebSocketDelegate 协议啊</div><div class="line"> </div><div class="line">[socket open];    // open 就是直接连接了</div></pre></td></tr></table></figure>
<p>2.连接成功会调用这个代理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)webSocketDidOpen:(SRWebSocket *)webSocket &#123;</div><div class="line">    NSLog(@&quot;连接成功，可以立刻登录你公司后台的服务器了，还有开启心跳&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.连接失败会调用这个方法，看 NSLog 里面的东西</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error &#123;</div><div class="line">    NSLog(@&quot;连接失败，这里可以实现掉线自动重连，要注意以下几点&quot;);</div><div class="line">    NSLog(@&quot;1.判断当前网络环境，如果断网了就不要连了，等待网络到来，在发起重连&quot;);</div><div class="line">    NSLog(@&quot;2.判断调用层是否需要连接，例如用户都没在聊天界面，连接上去浪费流量&quot;);</div><div class="line">    NSLog(@&quot;3.连接次数限制，如果连接失败了，重试10次左右就可以了，不然就死循环了。</div><div class="line">    或者每隔1，2，4，8，10，10秒重连...f(x) = f(x-1) * 2, (x=5)&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.连接关闭调用这个方法，注意连接关闭不是连接断开，关闭是 <code>[socket close]</code>客户端主动关闭，断开可能是断网了，被动断开的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(NSString *)reason wasClean:(BOOL)wasClean &#123;</div><div class="line">    NSLog(@&quot;连接断开，清空socket对象，清空该清空的东西，还有关闭心跳！&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.收到服务器发来的数据会调用这个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessage:(id)message  &#123;</div><div class="line">    NSLog(@&quot;收到数据了，注意 message 是 id 类型的，学过C语言的都知道，id 是 (void *)  </div><div class="line">        void* 就厉害了，二进制数据都可以指着，不详细解释 void* 了&quot;);</div><div class="line">    NSLog(@&quot;我这后台约定的 message 是 json 格式数据</div><div class="line">        收到数据，就按格式解析吧，然后把数据发给调用层&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6.向服务器发送数据<br>发送的时候可能断网，可能socket还在连接，要判断一些情况，写在下面了</p>
<p>发送逻辑是，我有一个 socketQueue 的串行队列，发送请求会加到这个队列里，然后一个一个发出去，如果掉线了，重连连上后继续发送，对调用层透明，调用层不需要知道网络断开了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)sendData:(id)data &#123;</div><div class="line">    WEAKSELF(ws);</div><div class="line">    dispatch_async(self.socketQueue, ^&#123;</div><div class="line">        if (ws.socket != nil) &#123;</div><div class="line">            // 只有 SR_OPEN 开启状态才能调 send 方法啊，不然要崩</div><div class="line">            if (ws.socket.readyState == SR_OPEN) &#123;</div><div class="line">                [ws.socket send:data];    // 发送数据</div><div class="line"> </div><div class="line">            &#125; else if (ws.socket.readyState == SR_CONNECTING) &#123;</div><div class="line">                NSLog(@&quot;正在连接中，重连后其他方法会去自动同步数据&quot;);</div><div class="line">                // 每隔2秒检测一次 socket.readyState 状态，检测 10 次左右</div><div class="line">                // 只要有一次状态是 SR_OPEN 的就调用 [ws.socket send:data] 发送数据</div><div class="line">                // 如果 10 次都还是没连上的，那这个发送请求就丢失了，这种情况是服务器的问题了，小概率的</div><div class="line">                // 代码有点长，我就写个逻辑在这里好了</div><div class="line"> </div><div class="line">            &#125; else if (ws.socket.readyState == SR_CLOSING || ws.socket.readyState == SR_CLOSED) &#123;</div><div class="line">                // websocket 断开了，调用 reConnect 方法重连</div><div class="line">                [ws reConnect:^&#123;</div><div class="line">                    NSLog(@&quot;重连成功，继续发送刚刚的数据&quot;);</div><div class="line">                    [ws.socket send:data];</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            NSLog(@&quot;没网络，发送失败，一旦断网 socket 会被我设置 nil 的&quot;);</div><div class="line">            NSLog(@&quot;其实最好是发送前判断一下网络状态比较好，我写的有点晦涩，socket==nil来表示断网&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>7.心跳机制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//该函数是接收服务器发送的pong消息</div><div class="line">- (void)webSocket:(SRWebSocket *)webSocket didReceivePong:(NSData *)pongPayload &#123;</div><div class="line">    NSString *reply = [[NSString alloc] initWithData:pongPayload encoding:NSUTF8StringEncoding];</div><div class="line">    NSLog(@&quot;%@&quot;,reply);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>心跳机制就不难了，开个定时器，问下后台要每隔多少秒发送一次心跳请求就好了。然后注意，断网了或者socket断开的时候把心跳关一下，省资源，不然都断网了，还在循环发心跳，浪费CPU和电量。</p>
<p>这里详细讲解下心跳机制这个函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(void)webSocket:(SRWebSocket *)webSocket didReceivePong:(NSData *)pongPayload&#123;</div><div class="line">    socketPong = socketPong + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中最后一个是接受pong消息的，在这里就要提一下心跳包，一般情况下建立长连接都会建立一个心跳包，用于每隔一段时间通知一次服务端，客户端还是在线，这个心跳包其实就是一个ping消息，我的理解就是建立一个定时器，每隔十秒或者十五秒向服务端发送一个ping消息，这个消息可是是空的，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> NSData * data = [[NSData alloc]init];</div><div class="line">[_webSocket sendPing:data];</div></pre></td></tr></table></figure>
<p>发送过去消息以后，服务器会返回一个pong消息，这个消息是解读不了的，但是每次返回时就会调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(void)webSocket:(SRWebSocket *)webSocket didReceivePong:(NSData *)pongPayload</div></pre></td></tr></table></figure>
<p>这个函数，如果要用到话，可以像我做的那样，直接在该函数里面统计一下收到的次数，跟发送的次数比较，如果每次发送之前，自己发送的ping消息的个数，跟收到pong消息的个数相同，那就代表一直在连接状态，但是服务器发送pong消息时候是自动发送的，服务器是看不到客户端发送的ping消息的，同理，服务端也一样，只要服务端建立有心跳连接，那么服务端也是一直在发送ping消息，客户端一直在回复pong消息，这两个消息是处理不了的，没办法解读这个歌消息体里面的内容。还有一点就是在发送ping消息的时候，如果非要想在里面加入一些参数，这个参数不能太大，太大的话，会提示发送失败。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS与WebSocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML语义标签简介]]></title>
      <url>http://yoursite.com/2017/02/23/HTML%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h3 id="h标签和p标签"><a href="#h标签和p标签" class="headerlink" title="h标签和p标签"></a>h标签和p标签</h3><p>h标签：h1~h6字体越来越小，没有h7以上的标签。</p>
<p>p标签：段落</p>
<h3 id="img图片标签"><a href="#img图片标签" class="headerlink" title="img图片标签"></a>img图片标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./icon.png"</span> <span class="attr">alt</span>=<span class="string">"如果图片加载不出来，显示本文字"</span> <span class="attr">title</span>=<span class="string">"鼠标移动到图片上，弹出本文字"</span>/&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="替换标签（replaced-element）"><a href="#替换标签（replaced-element）" class="headerlink" title="替换标签（replaced element）"></a>替换标签（replaced element）</h3><p>首先我们拿<code>&lt;img&gt;</code>标签来举例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>img到底是内联还是块级？<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">img</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--如果是内联元素，但是完全可以设置宽高而且还有几像素的margin值--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./icon.png"</span> <span class="attr">alt</span>=<span class="string">"图片"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./icon.png"</span> <span class="attr">alt</span>=<span class="string">"图片"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--但如果是块级元素，上下两个块状之间不会有margin值，而且设置margin值又不管用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>asdasdasd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--所以img是一个特殊的内联元素，同时是内联替换元素，替换元素是能设置宽和高的。因此在css初始化的时候，一般先将img标签转换成块级元素，然后设置border为0--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所谓替换元素（replaced element），就是元素本身没有实际内容，最终显示内容需要浏览器根据元素某些属性去判断的元素。</p>
<p>如<code>&lt;img&gt;</code>元素，其最终的显示内容是由属性src决定的，如<code>&lt;input&gt;</code>元素，其最终显示的效果是由属性type决定的。</p>
<p>常见的替换元素还包括<code>：&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code>。</p>
<p>替换元素经常具备固有的尺寸：固有的width，固有的height，以及固有的比例ratio。</p>
<p>这个理解起来不难，类比<code>&lt;img&gt;</code>元素，它的固有尺寸就是原始图片大小；类比<code>&lt;input&gt;</code>元素，不管其type属于哪一种类型，显示出来的input元素都有原始尺寸。</p>
<p>但是像<code>&lt;div&gt;&lt;/div&gt;</code>这样的非替换元素，其没有固有尺寸。</p>
<p>HTML中大多数是非替换元素(non-replaced element)。</p>
<p>所谓非替换元素和替换元素相反，元素本身是有实际内容的，浏览器会直接将其内容显示出来，而不需要根据元素属性来判断到底显示什么内容。如<code>&lt;span&gt;this is the content&lt;/span&gt;</code>，元素内容就是“this is the content”。</p>
<h3 id="有序列表和无序列表"><a href="#有序列表和无序列表" class="headerlink" title="有序列表和无序列表"></a>有序列表和无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有序列表和无序列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--但是开发的时候一把都去掉样式：none--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        *&#123;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">0px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-tag">li</span>&#123;</div><div class="line">            <span class="attribute">list-style-type</span>:none;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.icon1</span> <span class="selector-tag">li</span>&#123;</div><div class="line">            <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">            <span class="attribute">background-size</span>: <span class="number">5px</span> <span class="number">5px</span>;</div><div class="line">            <span class="attribute">background-image</span>:<span class="built_in">url</span>(../cssimage/sinaicon.png);</div><div class="line">            <span class="attribute">background-repeat</span>:no-repeat;</div><div class="line">            <span class="attribute">background-position</span>:<span class="number">5px</span> <span class="number">8px</span>;</div><div class="line">            <span class="attribute">list-style-type</span>:none;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*当标题前的图标时单独的一个点儿或者方块或者其他类似图标时，定义背景图background要放在&lt;li&gt;里。</span></div><div class="line">        在&lt;li&gt;中设置背景图片的尺寸，地址，不重复，位置；以及文字相关的padding，无序列图标，行高等*/</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span>初始化CSS后，写li，并利用背景图片，来完成li小图标的效果，且达到个浏览器兼容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"icon1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有序列表和无序列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--但是开发的时候一把都去掉样式：none--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        *&#123;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">0px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-tag">li</span>&#123;</div><div class="line">            <span class="attribute">list-style-type</span>:none;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.icon1</span>&#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">1024px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">978px</span>;</div><div class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(image/smallicon2.jpg);</div><div class="line">            <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">            <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">30px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.icon1</span> <span class="selector-tag">li</span>&#123;</div><div class="line">            <span class="attribute">padding-top</span>: <span class="number">40px</span>;</div><div class="line">            <span class="attribute">padding-left</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">115px</span>;</div><div class="line">            <span class="attribute">list-style-type</span>: none;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*当标题前的图标是很长的一列并标有连续的1、2、3、4……的图片而不是单独的一个点或者类似图标时，在定义背景图background要定义在&lt;ul&gt;里。</span></div><div class="line">        记住要定义属性宽高，背景图片的地址和位置，图片不重复等。</div><div class="line">        然后在&lt;li&gt;中定义文字的相关部分，如内边距padding,行高line-height,无序列号样式list-style-type,字体大小等*/</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span>初始化CSS后，写li，并利用背景图片，来完成li小图标的效果，且达到个浏览器兼容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"icon1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1、春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2、夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3、秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4、冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>整齐的表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">td</span> &#123;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.tables</span> &#123;</div><div class="line">            <span class="comment">/*设置table里面的单元格之间没有间距。注意不能设置在td里面*/</span></div><div class="line">            <span class="attribute">border-collapse</span>: collapse;</div><div class="line">            <span class="comment">/*设置表格里面哥哥单元格之间的间距*/</span></div><div class="line">            <span class="comment">/*border-spacing: 20px;*/</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--三行四列--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"tables"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--跨3列--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;td&gt;12&lt;/td&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;td&gt;13&lt;/td&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;td&gt;14&lt;/td&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--跨2行--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;td&gt;31&lt;/td&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;td&gt;33&lt;/td&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接标签(内联元素)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-tag">a</span> &#123;</div><div class="line">            <span class="attribute">display</span>: block;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--这里一定要加上https://--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"baidudizhi"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--target默认是自身窗口改变。如果需要新打开一个窗口的话target="_blank"--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"CSS选择器.html"</span> <span class="attr">title</span>=<span class="string">"baidudizhi"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>自己的项目页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>锚点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#p1"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#p2"</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#p3"</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"p1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"p2"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"p3"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>CSS允许我们针对a标签的4种状态设置各自的CSS特性，叫做CSS的伪类。<br>下面列举几个注意点：</p>
<ul>
<li>active一般不必写；</li>
<li>一定注意，顺序是LVHA</li>
<li>a:link可以简写为a</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>a标签的伪类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="comment">/*普通的一个标签显示 a:link或者直接a*/</span></div><div class="line">        <span class="selector-tag">a</span> &#123;</div><div class="line">            <span class="attribute">display</span>: block;</div><div class="line">            <span class="attribute">color</span>: blue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*点击放开鼠标*/</span></div><div class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</div><div class="line">            <span class="attribute">color</span>: grey;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*鼠标放上去*/</span></div><div class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">            <span class="attribute">color</span>: blueviolet;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*点击不放*/</span></div><div class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">            <span class="attribute">color</span>: darkred;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"锚点.html/#p2"</span>&gt;</span>锚点的解释asd<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"超链接.html"</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>空链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p>在html开发中，有一些字符，不适合直接写出，如&gt;,&lt;<br>一般的格式：&amp; + 实体名 + ;<br>实体有很多，记住常用的就行如：</p>
<ul>
<li>&amp;gt   &gt;</li>
<li>&amp;lt   &lt;</li>
<li>&amp;quot    “</li>
<li>&amp;amp     &amp;</li>
<li>&amp;copy   版权</li>
<li>&amp;nbsp   空格</li>
</ul>
<p>其他的可以去查手册</p>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> h标签 </tag>
            
            <tag> p标签 </tag>
            
            <tag> 替换标签 </tag>
            
            <tag> 有序列表 </tag>
            
            <tag> 无序列表 </tag>
            
            <tag> 表格（table） </tag>
            
            <tag> 超链接（a） </tag>
            
            <tag> 锚点（a） </tag>
            
            <tag> 伪类 </tag>
            
            <tag> 字符实体 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS证书配置流程详解]]></title>
      <url>http://yoursite.com/2017/02/22/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="证书的配置流程"><a href="#证书的配置流程" class="headerlink" title="证书的配置流程"></a>证书的配置流程</h2><p>首先，你的Apple Id必须是付过费的，这样你才可以使用相关的证书功能。<br>如果你的账号没有付过费，那么你登录Apple developer之后是下面的样子：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fczk0iq72nj30sw0hc0un.jpg" alt=""></p>
<p>如果你的账号付过费，那么你登录之后将会是下面的样子：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fczk3z3c7hj30zz0hwwgw.jpg" alt=""></p>
<p>点击上图中的<code>Certificates, Identifiers &amp; Profiles</code>。跳转到下面的界面：<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fczkrph5kaj30rl0hzaas.jpg" alt=""></p>
<p><strong>在配置证书之前需要将我们的Apple ID和我们的项目进行绑定。</strong></p>
<a id="more"></a>
<ul>
<li><p>首先应该配置自己的App IDs:</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fczl0hcgqqj30rd0cugm1.jpg" alt=""></p>
<ul>
<li>点击上图中的+跳转到下面的界面，在此界面我们可以设置自己的App ID</li>
</ul>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fczl31dhxuj30kf0eh74g.jpg" alt=""></p>
<p><strong>上图中的Name可以随便取一个名字</strong></p>
<ul>
<li>下图中的Bundle ID必须和自己的项目中的Bundle ID一样的，具体的取名格式图片上已经有了提示：</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fczl6aquosj30kd0er74l.jpg" alt=""></p>
<ul>
<li>还有就是该页面的最下面有一个App Services。里面的可以先不勾选，等到以后有需求在勾选也不迟。</li>
<li><p>最后点击continue继续，跳转界面后，在点击Register后就可以了。到此你的项目就和你的Apple ID绑定了。</p>
</li>
<li><p>另外，我们需要在指定的设备上进行相关的证书的测试，这个时候我们就需要添加设备了。详细步骤见下图：</p>
</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fczmuz30xoj30rf0gv759.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fczmvzf42oj30kb0gk0sz.jpg" alt=""></p>
<p>UUID需要连接手机后在itunes里查看：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fczmzv6rbaj30un0ig7a6.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fczn01937xj30ug0igdgu.jpg" alt=""></p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fczn0k0c9rj30ug0ihab2.jpg" alt=""></p>
<p>最后点击注册就行了。</p>
</li>
</ul>
<p>接下来才可以配置证书。</p>
<h3 id="证书的配置过程"><a href="#证书的配置过程" class="headerlink" title="证书的配置过程"></a>证书的配置过程</h3><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fczlkw7v51j30rb0csmxp.jpg" alt=""></p>
<ul>
<li>开发证书(Development)（线下真机测试）<ul>
<li>开发环境下app签证证书</li>
<li>开发环境下推送证书<br><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fczlu1z4h3j30q90bet96.jpg" alt=""></li>
</ul>
</li>
</ul>
<pre><code>- 选择上面的证书后，点击继续，会跳转到下面的界面：

 ![](https://ww2.sinaimg.cn/large/006tNc79gy1fczlwnk7z4j30j00ct0t1.jpg)
**在这里你需要选择上面自己创建的App ID。**

- 接下来一直continue直到出现下面的界面：

 ![](https://ww4.sinaimg.cn/large/006tNc79gy1fczm0xoch4j30kh0ej0t0.jpg)

 这个时候你必须要去你电脑里面的钥匙串里面导出CertificateSigningRequest文件。具体的步骤见下图：

 ![](https://ww2.sinaimg.cn/large/006tNc79gy1fczm6c33x0j30qi0cmabm.jpg)

 ![](https://ww3.sinaimg.cn/large/006tNc79gy1fczm7rq4cfj30h40c40sx.jpg)

**注意上面的email填写必须为你的APPLE ID账号**

获得文件后，回到配置证书界面：点击choose File，将刚刚导出的文件上传后跳转到下面：
![](https://ww2.sinaimg.cn/large/006tNc79gy1fczn9v0ve1j30jf0gtjs3.jpg)

点击下载文件，然后双击这个文件，在钥匙串里面导出p12文件。

![](https://ww1.sinaimg.cn/large/006tNc79gy1fczmjm1zdej30o80eiq3s.jpg)

双击p12文件，就会自动导入你的项目中，这个就是开发证书。

**推送证书的步骤类似**
</code></pre><ul>
<li><p>profile文件</p>
<p>  <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcznim3pdaj30770h8q2x.jpg" alt=""></p>
<p>  <img src="https://ww1.sinaimg.cn/large/006tNc79gy1fcznjpulvyj30kg04i747.jpg" alt=""></p>
<p>  <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcznka843rj30km0gjdg7.jpg" alt=""></p>
<p>  下面就是选择一开始设置的那个APP ID</p>
<p>  <img src="https://ww2.sinaimg.cn/large/006tNc79gy1fcznljwnvgj30kf0bo74m.jpg" alt=""></p>
<p>  下面就是你之前配置的开发证书选择：</p>
<p>  <img src="https://ww1.sinaimg.cn/large/006tNc79gy1fcznnbl7i7j30kl0a6aa7.jpg" alt=""></p>
<p>  因为是开发证书，所以接下来需要选择真机测试的UUID设备：</p>
<p>  <img src="https://ww4.sinaimg.cn/large/006tNc79gy1fcznok9yjnj30kh0htgls.jpg" alt=""></p>
<p>  最后为你的profile文件取个名字</p>
<p>  <img src="https://ww4.sinaimg.cn/large/006tNc79gy1fcznp044blj30kn0dwq33.jpg" alt=""></p>
<p>  下载profile文件后双击打开就会自动导入项目。</p>
</li>
</ul>
<ul>
<li>生产证书(Distribution)（线上）<ul>
<li>App Store</li>
<li>Adhoc (打包.ipa文件为了测试线上的证书配置效果)，UUID的配置，为了在特定的手机上进行线上环境测试。</li>
<li>推送证书<br><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fcznwumb89j30jh09lwew.jpg" alt=""></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS证书配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS常用的选择器以及四种引入方式]]></title>
      <url>http://yoursite.com/2017/02/22/CSS%E5%B8%B8%E7%94%A8%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8%E4%BB%A5%E5%8F%8A%E5%9B%9B%E7%A7%8D%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="CSS常用的选择器"><a href="#CSS常用的选择器" class="headerlink" title="CSS常用的选择器"></a>CSS常用的选择器</h3><ul>
<li><p>id选择器<br>给每个标签定义一个唯一标识id。这个id整个页面只有一个。</p>
</li>
<li><p>class类选择器<br>给每个标签定义一个类名，这个类名可以分配到多个标签，使得多个标签拥有一个类的CSS样式。</p>
</li>
<li><p>标签选择器<br>直接改变整个页面中的所有的一种标签的样式。</p>
</li>
<li><p>派生选择器<br>利用元素之间的所属级关系，改变某个标签的子标签的样式。</p>
</li>
</ul>
<a id="more"></a>
<p>具体代码见下面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #test1 &#123;</div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            border: 1px solid purple;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        .test2 &#123;</div><div class="line">            width: 300px;</div><div class="line">            height: 300px;</div><div class="line">            border: 1px solid blue;</div><div class="line">        &#125;</div><div class="line">        div &#123;</div><div class="line"></div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">        div p &#123;</div><div class="line">            background-color: purple;</div><div class="line">            width: 100px;</div><div class="line">            height: 50px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div里面的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div 外面独立的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当我们对同一个标签进行多种选择器CSS样式设置的时候，这就涉及到CSS优先级的问题了。记住一个准则：越精细的优先级越高。</p>
<p>可见：id &gt; class &gt; 标签<br>但是对于派生选择器需要看不同情况进行不同的判断。<br>例如： div .text1  &gt; div #text1 &gt; div p</p>
<ul>
<li>组合选择器</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #test1 &#123;</div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            border: 1px solid purple;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        .test2 &#123;</div><div class="line">            width: 300px;</div><div class="line">            height: 300px;</div><div class="line">            border: 1px solid blue;</div><div class="line">        &#125;</div><div class="line">        div &#123;</div><div class="line"></div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">        div p &#123;</div><div class="line">            background-color: purple;</div><div class="line">            width: 100px;</div><div class="line">            height: 50px;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        p.test2 &#123;</div><div class="line">        	  color: red;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3&gt;我是div里面的p标签&lt;/p&gt;</span></span></div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p class="<span class="attr">test2</span>&gt;我是div 外面独立的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中的p.test2组合就是只改变p标签里类是test2的颜色，而不改变div里类是test2的颜色。</p>
<p>一个标签还可以有多个类：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #test1 &#123;</div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            border: 1px solid purple;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        .test2 &#123;</div><div class="line">            width: 300px;</div><div class="line">            height: 300px;</div><div class="line">            border: 1px solid blue;</div><div class="line">        &#125;</div><div class="line">        div &#123;</div><div class="line"></div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">        div p &#123;</div><div class="line">            background-color: purple;</div><div class="line">            width: 100px;</div><div class="line">            height: 50px;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        p.test2 &#123;</div><div class="line">        	  color: red;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2 test3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3&gt;我是div里面的p标签&lt;/p&gt;</span></span></div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p class="<span class="attr">test2</span>&gt;我是div 外面独立的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中的有一个div有<code>test2</code>、 <code>test3</code>两个类。</p>
<p>我们还可以同时对多个类进行相同属性的设置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        #test1 &#123;</div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            border: 1px solid purple;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        .test2 &#123;</div><div class="line">            width: 300px;</div><div class="line">            height: 300px;</div><div class="line">            border: 1px solid blue;</div><div class="line">        &#125;</div><div class="line">        div,.test2,.test3 &#123;</div><div class="line"></div><div class="line">            width: 200px;</div><div class="line">            height: 200px;</div><div class="line">            background-color: orange;</div><div class="line">        &#125;</div><div class="line">        div p &#123;</div><div class="line">            background-color: purple;</div><div class="line">            width: 100px;</div><div class="line">            height: 50px;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        p.test2 &#123;</div><div class="line">        	  color: red;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2 test3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test3&gt;我是div里面的p标签&lt;/p&gt;</span></span></div><div class="line">&lt;/div&gt;</div><div class="line">&lt;p class="<span class="attr">test2</span>&gt;我是div 外面独立的p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>伪元素选择器</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*链接正常状态*/</div><div class="line">a: link &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">/*链接点击过状态*/</div><div class="line">a: visited &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">/*链接鼠标放上去状态*/</div><div class="line">a: hover &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">/*链接点击时状态*/</div><div class="line">a: active &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：a: hover必须放在a: link和a: visited之后才有效果；a: active必须放在a: hover之后才有效。</strong></p>
<p>还有P元素也是:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*p标签里面的第一个子标签*/</div><div class="line">p:first-child</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">/*p标签里面的第一个字符*/</div><div class="line">p:first-letter &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">/*p标签里的第一行*/    </div><div class="line">p:first-line &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他的选择器可以自行搜索手册进行学习。</p>
<h3 id="CSS四种引入方式"><a href="#CSS四种引入方式" class="headerlink" title="CSS四种引入方式"></a>CSS四种引入方式</h3><ul>
<li>写在head里面直接用<style></style>进行包含。</li>
<li><p>写在一个CSS文件中，然后在head中引入：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./ZICSS.css"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>其中的<code>./</code>是代表当前文件夹的意思；<code>../</code>上一个文件夹路径。</p>
</li>
<li><p>直接在body里面的某个标签中设置： </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>nisha<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在一个.css文件中用@import url()导入另一个css文件</p>
</li>
</ul>
<h3 id="CSS的初始化"><a href="#CSS的初始化" class="headerlink" title="CSS的初始化"></a>CSS的初始化</h3><p>相同的元素，如li，在不同的浏览器中，显示的效果稍有不同。是因为，浏览器对各种元素的margin,border,font,size等略有不同，如果杜绝这种情况，我们通过css强制让所有元素的属性值都一样，这样，浏览器显示就一致了，减少了不兼容性的发生。这个过程叫做css初始化。</p>
<p>这个需要查看源代码</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 选择器 </tag>
            
            <tag> css初始化 </tag>
            
            <tag> css引入方式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS对背景图片的相关设置]]></title>
      <url>http://yoursite.com/2017/02/21/CSS%E5%AF%B9%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="css设置背景图片"><a href="#css设置背景图片" class="headerlink" title="css设置背景图片"></a>css设置背景图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">background: purple;</div><div class="line"></div><div class="line">background-image: url(images/身份证.jpg);</div><div class="line"></div><div class="line">/*水平重复*/</div><div class="line">/*background-repeat: repeat-x;*/</div><div class="line"></div><div class="line">/*整个页面重复*/</div><div class="line">/*background-repeat: repeat;*/</div><div class="line"></div><div class="line">background-repeat: no-repeat;</div><div class="line"></div><div class="line">/*页面即使滑动，图片也一直浮现在视野上面*/</div><div class="line">background-attachment: fixed;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>如果网页既设置了背景色又设置背景图，优先显示背景图</p>
<a id="more"></a>
<h4 id="css精确设置背景图片的位置"><a href="#css精确设置背景图片的位置" class="headerlink" title="css精确设置背景图片的位置"></a>css精确设置背景图片的位置</h4><ul>
<li>我们可以使用background-position属性<ul>
<li>background-position: center（水平方向居中） bottom（竖直方向在底部）;</li>
</ul>
</li>
<li><p>我们还可以设置某个大图片的一部分进行显示</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/*这边的position需要根据具体的大图片来计算了*/</div><div class="line">   background-position: -150px -530px;</div></pre></td></tr></table></figure>
</li>
<li><p>当然，我们也可以像设置font一样，用一行来设置背景的相关属性</p>
<ul>
<li><p>background:背景色 背景图片 是否重复显示图片 position属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/*设置背景，我们可以直接用下面的一串直接设置*/</div><div class="line">background: purple url(images/bg.png) no-repeat -150px -530px;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> background </tag>
            
            <tag> background-position </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS控制段落和文字的一些常用属性]]></title>
      <url>http://yoursite.com/2017/02/20/CSS%E6%8E%A7%E5%88%B6%E6%AE%B5%E8%90%BD%E5%92%8C%E6%96%87%E5%AD%97%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h4 id="CSS控制段落的属性"><a href="#CSS控制段落的属性" class="headerlink" title="CSS控制段落的属性"></a>CSS控制段落的属性</h4><p>下面只是常用的几个属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*段落缩进*/</div><div class="line">text-indent: 20px;</div><div class="line">/*文字居中*/</div><div class="line">text-align: center;</div><div class="line">/*文本装饰-下划线*/</div><div class="line">text-decoration: underline;</div><div class="line">/*文字之间的距离*/</div><div class="line">letter-spacing: 20px;</div></pre></td></tr></table></figure>
<p>其他的一些常用的段落控制属性可参考：<a href="http://blog.sina.com.cn/s/blog_40824a5d0102vyn0.html" target="_blank" rel="external">段落控制的一些css属性</a></p>
<h4 id="css控制文字的一些属性"><a href="#css控制文字的一些属性" class="headerlink" title="css控制文字的一些属性"></a>css控制文字的一些属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*字体的颜色*/</div><div class="line">color: purple;</div><div class="line"></div><div class="line">/*字体的形式：斜体*/</div><div class="line">font-style: italic;</div><div class="line"></div><div class="line">/*加粗*/</div><div class="line">font-weight: bold;</div><div class="line"></div><div class="line">/*字体的大小*/</div><div class="line">font-size: 20px;</div><div class="line"></div><div class="line">/*行高*/</div><div class="line">line-height: 46px;</div><div class="line"></div><div class="line">/*字体*/</div><div class="line">font-family: "SimHei";</div></pre></td></tr></table></figure>
<p>也可以一次性设置所有的属性，但是必须按照一定的顺序才行<br>font: 字体形式 加粗 字体大小/行高 字体<br>font: italic bold 12px/30px “SimHei”;</p>
<p><strong>注意：</strong><br>在设置字体的时候，我们最好考虑到如果用户没有改字体的情况，于是可以多字体设置，以供用户的电脑自己匹配字体。<br>下面有两种类型的字体大类：<code>sans-serif</code>和<code>serif</code></p>
<ul>
<li><p>font-family: ‘微软雅不黑’,’微软雅黑’,’黑体’,sans-serif;</p>
</li>
<li><p>font-family: ‘New Times’,’新宋’,’宋体’,serif;</p>
</li>
</ul>
<p>优先选择靠前的字体。</p>
<p>其他的文字属性可以去查看手册。</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> text </tag>
            
            <tag> font </tag>
            
            <tag> letter-spacing </tag>
            
            <tag> line-height </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内联与块级的转换]]></title>
      <url>http://yoursite.com/2017/02/20/%E5%86%85%E8%81%94%E4%B8%8E%E5%9D%97%E7%BA%A7%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h4 id="内联与块级的转换"><a href="#内联与块级的转换" class="headerlink" title="内联与块级的转换"></a>内联与块级的转换</h4><p>display改变属性<br>block—转变成块级元素<br>inline—转换成行内元素<br>inline-block—-转换成将对象呈递为内联对象，但是对象的内容作为块对象呈递。具有宽度高度特性，又具有同行特性，这个时候我们可以使用inline-block<br>比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。</p>
<p>更多的display属性详细看：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">display属性值大全</a></p>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> display </tag>
            
            <tag> block </tag>
            
            <tag> inline </tag>
            
            <tag> inline-block </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见的行内元素和块级元素]]></title>
      <url>http://yoursite.com/2017/02/19/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h4 id="内联元素（行内元素）inline"><a href="#内联元素（行内元素）inline" class="headerlink" title="内联元素（行内元素）inline"></a>内联元素（行内元素）inline</h4><p>设置宽高，竖直方向上的margin和padding没有任何意义。但是可以设置水平方向上的margin和padding。完全是按照文字的大小适应的</p>
<a id="more"></a>
<h5 id="块元素-block-element"><a href="#块元素-block-element" class="headerlink" title="块元素(block element)"></a>块元素(block element)</h5><ul>
<li><p>address - 地址</p>
</li>
<li><p>blockquote - 块引用</p>
</li>
<li><p>center - 举中对齐块</p>
</li>
<li><p>dir - 目录列表</p>
</li>
<li><p>div - 常用块级容易，也是css layout的主要标签</p>
</li>
<li><p>dl - 定义列表</p>
</li>
<li><p>fieldset - form控制组</p>
</li>
<li><p>form - 交互表单</p>
</li>
<li><p>h1 - 大标题</p>
</li>
<li><p>h2 - 副标题</p>
</li>
<li><p>h3 - 3级标题</p>
</li>
<li><p>h4 - 4级标题</p>
</li>
<li><p>h5 - 5级标题</p>
</li>
<li><p>h6 - 6级标题</p>
</li>
<li><p>hr - 水平分隔线</p>
</li>
<li><p>isindex - input prompt</p>
</li>
<li><p>menu - 菜单列表</p>
</li>
<li><p>noframes - frames可选内容，（对于不支持frame的浏览器显示此区块内容</p>
</li>
<li><p>noscript - ）可选脚本内容（对于不支持script的浏览器显示此内容）</p>
</li>
<li><p>ol - 排序表单</p>
</li>
<li><p>p - 段落</p>
</li>
<li><p>pre - 格式化文本</p>
</li>
<li><p>table - 表格</p>
</li>
<li><p>ul - 非排序列表 </p>
</li>
</ul>
<h5 id="内联元素（行内元素）内联元素-inline-element"><a href="#内联元素（行内元素）内联元素-inline-element" class="headerlink" title="内联元素（行内元素）内联元素(inline element)"></a>内联元素（行内元素）内联元素(inline element)</h5><ul>
<li><p>a - 锚点</p>
</li>
<li><p>abbr - 缩写</p>
</li>
<li><p>acronym - 首字</p>
</li>
<li><p>b - 粗体(不推荐)</p>
</li>
<li><p>bdo - bidi override</p>
</li>
<li><p>big - 大字体</p>
</li>
<li><p>br - 换行</p>
</li>
<li><p>cite - 引用</p>
</li>
<li><p>code - 计算机代码(在引用源码的时候需要)</p>
</li>
<li><p>dfn - 定义字段</p>
</li>
<li><p>em - 强调</p>
</li>
<li><p>font - 字体设定(不推荐)</p>
</li>
<li><p>i - 斜体</p>
</li>
<li><p>img - 图片</p>
</li>
<li><p>input - 输入框</p>
</li>
<li><p>kbd - 定义键盘文本</p>
</li>
<li><p>label - 表格标签</p>
</li>
<li><p>q - 短引用</p>
</li>
<li><p>s - 中划线(不推荐)</p>
</li>
<li><p>samp - 定义范例计算机代码</p>
</li>
<li><p>select - 项目选择</p>
</li>
<li><p>small - 小字体文本</p>
</li>
<li><p>span - 常用内联容器，定义文本内区块</p>
</li>
<li><p>strike - 中划线</p>
</li>
<li><p>strong - 粗体强调</p>
</li>
<li><p>sub - 下标</p>
</li>
<li><p>sup - 上标</p>
</li>
<li><p>textarea - 多行文本输入框</p>
</li>
<li><p>tt - 电传文本</p>
</li>
<li><p>u - 下划线</p>
</li>
<li><p>var - 定义变量 </p>
</li>
</ul>
<h4 id="可变元素"><a href="#可变元素" class="headerlink" title="可变元素"></a>可变元素</h4><p>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</p>
<ul>
<li>applet - java applet</li>
<li>button - 按钮</li>
<li>del - 删除文本</li>
<li>iframe - inline frame</li>
<li>ins - 插入的文本</li>
<li>map - 图片区块(map)</li>
<li>object - object对象</li>
<li>script - 客户端脚本</li>
</ul>
<h4 id="新手常犯的错误"><a href="#新手常犯的错误" class="headerlink" title="新手常犯的错误"></a>新手常犯的错误</h4><ol>
<li>不加doctype,—-导致低版本IE，解析效果不一样。</li>
<li>id为数字，这是不可饶恕的。</li>
<li>文件编码与charset申明不一致，这个主要出现在文件另存的时候选择的编码不同。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> block </tag>
            
            <tag> inline </tag>
            
            <tag> charset </tag>
            
            <tag> 可变元素 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[盒子模型的相关知识]]></title>
      <url>http://yoursite.com/2017/02/18/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>盒子与盒子之间：margin</p>
<p>盒子边框：border</p>
<p>盒子内部与内容的距离：padding</p>
<a id="more"></a>
<h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><ul>
<li><p>margin的几个快捷写法：</p>
<p>margin: 10px(上) 0px（右） 10px（下） 40px（左）;</p>
<p>margin: 10px(上) 0px（右，左） 10px（下）;</p>
<p>margin: 10px(上，下) 0px（右，左）;</p>
<p>margin: 10px(上，左，下，右);</p>
</li>
</ul>
<p><strong>也可以单独设置一边</strong></p>
<p>margin-top:</p>
<ul>
<li><p>如果想设置div水平居中的话</p>
<p>margin: 0 auto;</p>
</li>
<li><p>margin重叠现象：</p>
<p>上下相邻的普通元素（比如不能是浮动的），上下外边距，并非简单的相加，而是取其中比较大的边距值，这种现象叫做margin重叠。</p>
<p>父子div也会出现margin重叠现象，父div的margin和子div的margin也是同方向取比较大的边距值，是共同作用于父div同级的外边距。</p>
</li>
</ul>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>margin重叠现象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.test1</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.test2</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">margin-top</span>: <span class="number">30px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.super</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.sub</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: purple;</div><div class="line">            <span class="comment">/*这个时候super距离外边距为200像素*/</span></div><div class="line">            <span class="attribute">margin-top</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>这里的两个div的margin其实只有30px而已<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"super"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p><strong>三要素：</strong>宽，形状(solid实线，dashed虚线等见手册)，颜色</p>
<p>这个和盒子本身设置的宽高没有什么关系，这个border是在盒子的外围继续增加本盒子占位的宽高。</p>
<p> 单独设置一个属性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">border-width: 1px;</div><div class="line"></div><div class="line">border-style: dotted;</div><div class="line"></div><div class="line">border-color: aqua;</div></pre></td></tr></table></figure>
<p>下面做个小例子：<br>画出一个三角形和圣诞树</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css控制border画出三角形和圣诞树<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.header</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: gray;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.triangle</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">border-top</span>: <span class="number">50px</span> solid <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">            <span class="attribute">border-right</span>: <span class="number">50px</span> solid <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">            <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid orange;</div><div class="line">            <span class="attribute">border-left</span>: <span class="number">50px</span> solid <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.firstLeaves</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">border-top</span>: <span class="number">100px</span> solid <span class="built_in">rgba</span>(0,255,0,0);</div><div class="line">            <span class="attribute">border-right</span>: <span class="number">100px</span> solid <span class="built_in">rgba</span>(0,255,0,0);</div><div class="line">            <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid green;</div><div class="line">            <span class="attribute">border-left</span>: <span class="number">100px</span> solid <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">            <span class="attribute">margin-left</span>: <span class="number">350px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.secondLeaves</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">border-right</span>: <span class="number">200px</span> solid <span class="built_in">rgba</span>(0,255,0,0);</div><div class="line">            <span class="attribute">border-bottom</span>: <span class="number">200px</span> solid green;</div><div class="line">            <span class="attribute">border-left</span>: <span class="number">200px</span> solid <span class="built_in">rgba</span>(0,0,0,0);</div><div class="line">            <span class="attribute">margin-left</span>: <span class="number">250px</span>;</div><div class="line">            <span class="attribute">margin-top</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.root</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">            <span class="attribute">background-color</span>: brown;</div><div class="line">            <span class="attribute">margin-left</span>: <span class="number">400px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"firstLeaves"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"secondLeaves"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>###padding</p>
<p>padding属性增加后；盒子会变大，也就是说。盒子的内容才是盒子的本身的宽高，但是如果加上padding，那么盒子就会向外扩大padding的大小。和border是一样的效果。</p>
<p>####盒子模型的总结<br>一个div到底占有多大的空间?</p>
<p>因为有margin,border,padding,实占多大?</p>
<p>假如设置了一个div的宽度为300x300像素，但这个只是在div里面的实际的文字内容的大小，这个时候如果加上border为50px，那么这个div的实际占有（300+2x50）x(300+2x50)像素，也就是400x400。如果再加上padding为50像素,这个时候div内容的占有量没有变大还是300x300像素，但是整个div占有量有扩大了,此时变成(400+2x50)x(400+2x50)像素，也就是500x500。这个时候如果加上margin为50的话，那么这个又会扩大了(500+2x50)x(500+2x50)像素，也就是600x600了。但是实际显示内容的也就只有300x300，其他的都是修饰。</p>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> margin </tag>
            
            <tag> padding </tag>
            
            <tag> border </tag>
            
            <tag> margin重叠 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[div的浮动详解]]></title>
      <url>http://yoursite.com/2017/02/17/div%E7%9A%84%E6%B5%AE%E5%8A%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="div的浮动原理"><a href="#div的浮动原理" class="headerlink" title="div的浮动原理"></a>div的浮动原理</h2><p>我们可以理解为每一个div是一个纸片。</p>
<p>当一个divA的float：left的时候，纸片飘起来，这样的话，后面的divB就在下面滑到飘起来的divA的下面。但是如果这个时候divB也飘起来的话，就和飘起来的divA一起在上面了，这个时候如果divB的float：left，就和divA并排了。于是就紧靠在一起了。</p>
<p>当然，如果divA没有float:left,那么后面的divB即使float：left，也是没用的。</p>
<h2 id="清除浮动clear的解释"><a href="#清除浮动clear的解释" class="headerlink" title="清除浮动clear的解释"></a>清除浮动clear的解释</h2><p>clear:left 只对同一级的前面以后所有的浮动，也就是本div直接不在后面挨着，另起一行紧贴着浮动的div下面。</p>
<p>clear:right 只针对右边的div起作用，也就是，本div直接进入下一行，紧贴在右边浮动的div下面。</p>
<p>clear:both 按照左右两边浮动的最高的那个为主，进行换行紧贴。<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>clear清除浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.left</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.right</span> &#123;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">background-color</span>: green;</div><div class="line">            <span class="attribute">float</span>: right;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.main</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">            <span class="attribute">background</span>: orange;</div><div class="line">            <span class="attribute">clear</span>: right;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>我是左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>我是右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>我是不浮动的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>下面是运用clear属性制作田字格的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>作业田字格布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-class">.topLeft</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: black;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">30px</span>;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">            <span class="comment">/*clear: left;*/</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.topRight</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: purple;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">30px</span>;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.bottomLeft</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">30px</span>;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">            <span class="attribute">clear</span>: left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.bottomRight</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">30px</span>;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topLeft"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topRight"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottomLeft"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottomRight"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>如果父div中有两个div是浮动的，父div的高度，不会被两个div撑起来，父div还是原来的高度；这里如果两个子div不设置宽度的话就不会显示出来。宽度就为0，而不是屏幕的宽度。<br>这里的原因是，float之后就变成了inline-block,这就必须要主动设置宽高，否则不显示，但是如果你设置了边框，边框的像素始终都会有的。</p>
<ul>
<li>如果父div不浮动，但是子div浮动，那么是不会撑起父div的高度的；</li>
<li>如果父div不浮动，但是子div不浮动，那么是会撑起父div的高度的（前提是父div不设置高度）；</li>
<li>如果父div浮动，但是子div不浮动，那么如果父div不设置宽度的话，就和子div的宽度一样;如果设置就是设置的宽度；<ul>
<li>如果设置的宽度小于子div的宽度的话，那么子div自动换行（前提是父div没有限制死高度）</li>
</ul>
</li>
</ul>
<p>父div与子div的关系例子如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"></div><div class="line">        <span class="selector-tag">div</span> &#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">190px</span>;</div><div class="line">            <span class="attribute">background-color</span>: yellow;</div><div class="line">            <span class="attribute">float</span>: left;</div><div class="line">        &#125;</div><div class="line">       <span class="selector-class">.first</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="comment">/*float: left;*/</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">       <span class="selector-class">.second</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: orange;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">            <span class="comment">/*float: right;*/</span></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="行内标签的浮动"><a href="#行内标签的浮动" class="headerlink" title="行内标签的浮动"></a>行内标签的浮动</h2><p>如果是行内标签的话，如果挂上float属性，直接变成了块级标签。<br>如果是行内标签，是没有宽高的，直接根据内部的文字内容自动设置宽高，所以直接设置宽高是没用的。</p>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> float </tag>
            
            <tag> clear </tag>
            
            <tag> html </tag>
            
            <tag> 行内标签浮动 </tag>
            
            <tag> 田字格 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift开发技巧（一）]]></title>
      <url>http://yoursite.com/2017/01/23/Swift%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="使用arc4random-、arc4random-uniform-取得随机数"><a href="#使用arc4random-、arc4random-uniform-取得随机数" class="headerlink" title="使用arc4random()、arc4random_uniform()取得随机数"></a>使用arc4random()、arc4random_uniform()取得随机数</h4><p><strong>arc4random() </strong>这个全局函数会生成10位数的随机整数（UInt32）。其生成的最大值是4294967295（2^32 - 1），最小值为0。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面是使用 arc4random 函数求一个 1~100 的随机数（包括1和100）</span></div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> &#123;</div><div class="line">            <span class="keyword">let</span> temp = <span class="type">Int</span>(arc4random()%<span class="number">100</span>)+<span class="number">1</span></div><div class="line">            <span class="built_in">print</span>(temp)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line"><span class="comment">//下面是使用 arc4random_uniform 函数求一个 1~100 的随机数（包括1和100）</span></div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10</span> &#123;</div><div class="line">            <span class="keyword">let</span> temp = <span class="type">Int</span>(arc4random_uniform(<span class="number">100</span>))+<span class="number">1</span></div><div class="line">            <span class="built_in">print</span>(temp)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="字符串范围也可以使用区间运算符"><a href="#字符串范围也可以使用区间运算符" class="headerlink" title="字符串范围也可以使用区间运算符"></a><strong>字符串范围也可以使用区间运算符</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不使用区间运算符</span></div><div class="line">        <span class="keyword">let</span> index = str.index(str.startIndex, offsetBy: <span class="number">4</span>)</div><div class="line">        <span class="keyword">let</span> index2 = str.index(str.startIndex, offsetBy: <span class="number">6</span>)</div><div class="line">        <span class="keyword">let</span> range1 = <span class="type">Range</span>(uncheckedBounds: (lower: index, upper: index2))</div><div class="line">        <span class="keyword">let</span> rangeStr1 = str.substring(with: range1)</div><div class="line">        <span class="built_in">print</span>(rangeStr1)<span class="comment">//结果为am</span></div><div class="line">        </div><div class="line">        </div><div class="line"><span class="comment">//使用区间运算符</span></div><div class="line">        <span class="keyword">let</span> range2 = str.index(str.startIndex, offsetBy: <span class="number">4</span>)..&lt;str.index(str.startIndex, offsetBy: <span class="number">8</span>)</div><div class="line">        <span class="keyword">let</span> rangeStr2 = str.substring(with: range2)</div><div class="line">        <span class="built_in">print</span>(rangeStr2)<span class="comment">//结果为ame</span></div></pre></td></tr></table></figure>
<h4 id="区间运算符除了返回一个Range外，还可以接受Comparable的输入，返回ClosedInterval或HalfOpenInterval"><a href="#区间运算符除了返回一个Range外，还可以接受Comparable的输入，返回ClosedInterval或HalfOpenInterval" class="headerlink" title="区间运算符除了返回一个Range外，还可以接受Comparable的输入，返回ClosedInterval或HalfOpenInterval"></a><strong>区间运算符除了返回一个Range外，还可以接受Comparable的输入，返回ClosedInterval或HalfOpenInterval</strong></h4><p>用这个特性检查字符串里的字符是不是都是合法字符（比如是不是都是小写）</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">"My name is Feyddy"</span></div><div class="line"><span class="comment">//设置一个范围</span></div><div class="line"><span class="keyword">let</span> interval = <span class="string">"a"</span>...<span class="string">"z"</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> str.characters &#123;</div><div class="line">    interval.<span class="built_in">contains</span>(<span class="type">String</span>(<span class="built_in">c</span>)) == <span class="literal">true</span> ?  <span class="built_in">print</span>(<span class="string">"\(c)是小写字母"</span>) :  <span class="built_in">print</span>(<span class="string">"\(c)不是小写字母"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="结构体-struct"><a href="#结构体-struct" class="headerlink" title="结构体 - struct"></a><strong>结构体 - struct</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个结构体</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BookInfo</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="type">ID</span>:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> <span class="type">Name</span>:<span class="type">String</span> = <span class="string">"Defaut"</span></div><div class="line">    <span class="keyword">var</span> <span class="type">Author</span>:<span class="type">String</span> = <span class="string">"Defaut"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> book1:<span class="type">BookInfo</span> <span class="comment">//默认构造器创建结构体实例</span></div><div class="line"><span class="keyword">var</span> book2 = <span class="type">BookInfo</span>(<span class="type">ID</span>:<span class="number">0021</span>,<span class="type">Name</span>:<span class="string">"航歌"</span>,<span class="type">Author</span>:<span class="string">"hangge"</span>)  <span class="comment">//调用逐一构造器创建实例</span></div><div class="line">book2.<span class="type">ID</span> = <span class="number">1234</span>  <span class="comment">//修改内部值</span></div></pre></td></tr></table></figure>
<h4 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举-enum"></a>枚举-enum</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通的写法</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CompassPoint</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">North</span></div><div class="line">    <span class="keyword">case</span> <span class="type">South</span></div><div class="line">    <span class="keyword">case</span> <span class="type">East</span></div><div class="line">    <span class="keyword">case</span> <span class="type">West</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//调用</span></div><div class="line"><span class="keyword">var</span> directionToHead = <span class="type">CompassPoint</span>.<span class="type">West</span></div><div class="line"> </div><div class="line"><span class="comment">//带有原始值的写法</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span>: <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Mercury</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Venus</span> = <span class="number">2</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Earth</span> = <span class="number">3</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> earthsOrder = <span class="type">Planet</span>.<span class="type">Earth</span>.rawValue <span class="comment">//rawValue来获取他的原始值:3</span></div><div class="line"><span class="keyword">let</span> possiblePlanet = <span class="type">Planet</span>(rawValue: <span class="number">2</span>)  <span class="comment">//通过原始值来寻找所对应的枚举成员:Venus</span></div><div class="line"> </div><div class="line"><span class="comment">//里面定义函数的写法</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Up</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Down</span></div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">description</span><span class="params">()</span></span> -&gt; <span class="type">String</span>&#123;</div><div class="line">        <span class="keyword">switch</span>(<span class="keyword">self</span>)&#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Up</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"向上"</span></div><div class="line">        <span class="keyword">case</span> .<span class="type">Down</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"向下"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(<span class="type">Direction</span>.<span class="type">Up</span>.description())</div></pre></td></tr></table></figure>
<h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a><strong>while循环语句</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> i&lt;<span class="number">100</span> &#123;</div><div class="line">    i+=<span class="number">1</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//类似于do-while</span></div><div class="line"><span class="keyword">repeat</span>&#123;</div><div class="line">    i+=<span class="number">1</span></div><div class="line">&#125;<span class="keyword">while</span> i&lt;<span class="number">100</span></div></pre></td></tr></table></figure>
<h4 id="可变形参：可以接受0个或者任意数量的输入参数"><a href="#可变形参：可以接受0个或者任意数量的输入参数" class="headerlink" title="可变形参：可以接受0个或者任意数量的输入参数"></a><strong>可变形参：可以接受0个或者任意数量的输入参数</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(numbers:Int...)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers&#123;</div><div class="line">        <span class="built_in">count</span> += number</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">count</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="如果想要同时改变函数内外的参数值，可以利用inout关键字，同时调用函数的时候给参数加上前缀“-amp-”"><a href="#如果想要同时改变函数内外的参数值，可以利用inout关键字，同时调用函数的时候给参数加上前缀“-amp-”" class="headerlink" title="如果想要同时改变函数内外的参数值，可以利用inout关键字，同时调用函数的时候给参数加上前缀“&amp;”"></a><strong>如果想要同时改变函数内外的参数值，可以利用inout关键字，同时调用函数的时候给参数加上前缀“&amp;”</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(age:<span class="keyword">inout</span> Int)</span></span>&#123;</div><div class="line">    age += <span class="number">1</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> age = <span class="number">22</span></div><div class="line">add(age: &amp;age)</div><div class="line"><span class="built_in">print</span>(age) <span class="comment">//23</span></div></pre></td></tr></table></figure>
<h4 id="可以使用函数类型的参数"><a href="#可以使用函数类型的参数" class="headerlink" title="可以使用函数类型的参数"></a><strong>可以使用函数类型的参数</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">additive</span><span class="params">(a:Int, b:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//函数类型的参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAdditiveResult</span><span class="params">(addFun: <span class="params">(Int, Int)</span></span></span> -&gt; <span class="type">Int</span>, a:<span class="type">Int</span>, b:<span class="type">Int</span>)&#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Result:\(addFun(a,b))"</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">printAdditiveResult(addFun: additive, a: <span class="number">5</span> ,b: <span class="number">7</span>)</div></pre></td></tr></table></figure>
<h4 id="也可以使用函数类型的返回值"><a href="#也可以使用函数类型的返回值" class="headerlink" title="也可以使用函数类型的返回值"></a><strong>也可以使用函数类型的返回值</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义个自增函数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">increase</span><span class="params">(input:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> input + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//定义个自减函数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reduce</span><span class="params">(input:Int)</span></span> -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> input - <span class="number">1</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//定义一个返回函数类型的函数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chooseFunction</span><span class="params">(backwards:Bool)</span></span> -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> backwards ? <span class="built_in">reduce</span> : increase</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//测试</span></div><div class="line"><span class="keyword">let</span> aFun = chooseFunction(backwards: <span class="number">3</span>&gt;<span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(aFun(<span class="number">3</span>))  <span class="comment">//2</span></div></pre></td></tr></table></figure>
<h4 id="Swift-属性观察者（willSet与didSet）"><a href="#Swift-属性观察者（willSet与didSet）" class="headerlink" title="Swift - 属性观察者（willSet与didSet）"></a>Swift - 属性观察者（willSet与didSet）</h4><p>属性观察者，类似于触发器。用来监视属性的除初始化之外的属性值变化，当属性值发生改变时可以对此作出响应。有如下特点：</p>
<p>1，不仅可以在属性值改变后触发didSet，也可以在属性值改变前触发willSet。</p>
<p>2，给属性添加观察者必须要声明清楚属性类型，否则编译器报错。</p>
<p>3，willSet可以带一个newName的参数，没有的话，该参数默认命名为newValue。</p>
<p>4，didSet可以带一个oldName的参数，表示旧的属性，不带的话默认命名为oldValue。</p>
<p>5，属性初始化时，willSet和didSet不会调用。只有在初始化上下文之外，当设置属性值时才会调用。</p>
<p>6，即使是设置的值和原来值相同，willSet和didSet也会被调用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//普通属性</span></div><div class="line">    <span class="keyword">var</span> firstName:<span class="type">String</span> = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> lastName:<span class="type">String</span>  = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> nickName:<span class="type">String</span>  = <span class="string">""</span></div><div class="line">     </div><div class="line">    <span class="comment">//计算属性</span></div><div class="line">    <span class="keyword">var</span> fullName:<span class="type">String</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> nickName + <span class="string">" "</span> + firstName + <span class="string">" "</span> + lastName</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//带属性监视器的普通属性</span></div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//我们需要在age属性变化前做点什么</span></div><div class="line">        <span class="keyword">willSet</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Will set an new value \(newValue) to age"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//我们需要在age属性发生变化后，更新一下nickName这个属性</span></div><div class="line">        <span class="keyword">didSet</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"age filed changed form \(oldValue) to \(age)"</span>)</div><div class="line">            <span class="keyword">if</span> age&lt;<span class="number">10</span></div><div class="line">            &#123;</div><div class="line">                nickName = <span class="string">"Little"</span></div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                nickName = <span class="string">"Big"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toString</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Full Name: \(fullName) "</span> + <span class="string">", Age: \(age) "</span></div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">let</span> me = <span class="type">People</span>()</div><div class="line">me.firstName = <span class="string">"Li"</span></div><div class="line">me.lastName  = <span class="string">"Lei"</span></div><div class="line">me.age = <span class="number">30</span></div><div class="line"> </div><div class="line"><span class="built_in">print</span>(me.<span class="built_in">toString</span>())</div><div class="line"> </div><div class="line"><span class="comment">/*程序输出</span></div><div class="line">Will set an new value 30 to age</div><div class="line">age filed changed form 0 to 30</div><div class="line">Full Name: Big Li Lei , Age: 30</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="类的计算属性（使用get和set来间接获取-改变其他属性的值）"><a href="#类的计算属性（使用get和set来间接获取-改变其他属性的值）" class="headerlink" title="类的计算属性（使用get和set来间接获取/改变其他属性的值）"></a>类的计算属性（使用get和set来间接获取/改变其他属性的值）</h4><ul>
<li><p><strong>Swift中类可以使用计算属性，即使用get和set来间接获取/改变其他属性的值</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calcuator</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> a:<span class="type">Int</span> = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> b:<span class="type">Int</span> = <span class="number">1</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> sum:<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">return</span> a + b</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span>(val)&#123;</div><div class="line">            b = val - a</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> cal = <span class="type">Calcuator</span>();</div><div class="line"><span class="built_in">print</span>(cal.sum) <span class="comment">//2</span></div><div class="line">cal.sum = <span class="number">5</span></div><div class="line"><span class="built_in">print</span>(cal.b) <span class="comment">//4</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>对于set有简写方法，简写时，新赋的值默认为newValue</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calcuator</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> a:<span class="type">Int</span> = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> b:<span class="type">Int</span> = <span class="number">1</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> sum:<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">get</span>&#123;</div><div class="line">            <span class="keyword">return</span> a + b</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span>&#123;</div><div class="line">            b = newValue - a</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>如果只要get，不要set方法</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calcuator</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> a:<span class="type">Int</span> = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> b:<span class="type">Int</span> = <span class="number">1</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> sum:<span class="type">Int</span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="遍历一个目录下的所有文件"><a href="#遍历一个目录下的所有文件" class="headerlink" title="遍历一个目录下的所有文件"></a><strong>遍历一个目录下的所有文件</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.首先我们获取用户文档目录路径</span></div><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> url = urlForDocument[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">URL</span></div><div class="line"><span class="built_in">print</span>(url)</div><div class="line"></div><div class="line"><span class="comment">//2.对指定路径执行浅搜索，返回指定目录路径下的文件、子目录及符号链接的列表</span></div><div class="line"><span class="keyword">let</span> contentsOfPath = <span class="keyword">try</span>? manager.contentsOfDirectory(atPath: url.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"contentsOfPath: \(contentsOfPath)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//3.类似上面的，对指定路径执行浅搜索，返回指定目录路径下的文件、子目录及符号链接的列表</span></div><div class="line"><span class="keyword">let</span> contentsOfURL = <span class="keyword">try</span>? manager.contentsOfDirectory(at: url,</div><div class="line">                        includingPropertiesForKeys: <span class="literal">nil</span>, options: .skipsHiddenFiles)</div><div class="line"><span class="built_in">print</span>(<span class="string">"contentsOfURL: \(contentsOfURL)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//4.深度遍历，会递归遍历子文件夹（但不会递归符号链接）</span></div><div class="line"><span class="keyword">let</span> enumeratorAtPath = manager.enumerator(atPath: url.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"enumeratorAtPath: \(enumeratorAtPath?.allObjects)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//5.类似上面的，深度遍历，会递归遍历子文件夹（但不会递归符号链接）</span></div><div class="line"><span class="keyword">let</span> enumeratorAtURL = manager.enumerator(at: url, includingPropertiesForKeys: <span class="literal">nil</span>,</div><div class="line">                                         options: .skipsHiddenFiles, errorHandler:<span class="literal">nil</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"enumeratorAtURL: \(enumeratorAtURL?.allObjects)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//6.深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）</span></div><div class="line"><span class="keyword">let</span> subPaths = manager.subpaths(atPath: url.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"subPaths: \(subPaths)"</span>)</div></pre></td></tr></table></figure>
<h4 id="判断文件或文件夹是否存在"><a href="#判断文件或文件夹是否存在" class="headerlink" title="判断文件或文件夹是否存在"></a><strong>判断文件或文件夹是否存在</strong></h4><ul>
<li>法一：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myDirectory:<span class="type">String</span> = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/myFolder/Files"</span></div><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"> </div><div class="line"><span class="comment">//withIntermediateDirectories为ture表示路径中间如果有不存在的文件夹都会创建</span></div><div class="line"><span class="keyword">try</span>! fileManager.createDirectory(atPath: myDirectory,</div><div class="line">                        withIntermediateDirectories: <span class="literal">true</span>, attributes: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<ul>
<li>法二</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFolder</span><span class="params">(name:String,baseUrl:NSURL)</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line">    <span class="keyword">let</span> folder = baseUrl.appendingPathComponent(name, isDirectory: <span class="literal">true</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"文件夹: \(folder)"</span>)</div><div class="line">    <span class="keyword">let</span> exist = manager.fileExists(atPath: folder!.path)</div><div class="line">    <span class="keyword">if</span> !exist &#123;</div><div class="line">        <span class="keyword">try</span>! manager.createDirectory(at: folder!, withIntermediateDirectories: <span class="literal">true</span>,</div><div class="line">                                     attributes: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">     </div><div class="line"><span class="comment">//在文档目录下新建folder目录</span></div><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>: .userDomainMask)</div><div class="line"><span class="keyword">let</span> url = urlForDocument[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">NSURL</span></div><div class="line">createFolder(name: <span class="string">"folder"</span>, baseUrl: url)</div></pre></td></tr></table></figure>
<h4 id="将对象写入文件"><a href="#将对象写入文件" class="headerlink" title="将对象写入文件"></a><strong>将对象写入文件</strong></h4><p>可以通过write(to:)方法，可以创建文件并将对象写入，对象包括String，NSString，UIImage，NSArray，NSDictionary等。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把String保存到文件</span></div><div class="line"><span class="keyword">let</span> filePath:<span class="type">String</span> = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/hangge.txt"</span></div><div class="line"><span class="keyword">let</span> info = <span class="string">"欢迎来到hange.com"</span></div><div class="line"><span class="keyword">try</span>! info.write(toFile: filePath, atomically: <span class="literal">true</span>, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//把图片保存到文件路径下</span></div><div class="line"><span class="keyword">let</span> filePath = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/hangge.png"</span></div><div class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>(named: <span class="string">"apple.png"</span>)</div><div class="line"><span class="keyword">let</span> data:<span class="type">Data</span> = <span class="type">UIImagePNGRepresentation</span>(image!)!</div><div class="line"><span class="keyword">try</span>? data.write(to: <span class="type">URL</span>(fileURLWithPath: filePath))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//把NSArray保存到文件路径下</span></div><div class="line"><span class="keyword">let</span> array = <span class="type">NSArray</span>(objects: <span class="string">"aaa"</span>,<span class="string">"bbb"</span>,<span class="string">"ccc"</span>)</div><div class="line"><span class="keyword">let</span> filePath:<span class="type">String</span> = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/array.plist"</span></div><div class="line">array.write(toFile: filePath, atomically: <span class="literal">true</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//把NSDictionary保存到文件路径下</span></div><div class="line"><span class="keyword">let</span> dictionary:<span class="type">NSDictionary</span> = [<span class="string">"Gold"</span>: <span class="string">"1st Place"</span>, <span class="string">"Silver"</span>: <span class="string">"2nd Place"</span>]</div><div class="line"><span class="keyword">let</span> filePath:<span class="type">String</span> = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/dictionary.plist"</span></div><div class="line">dictionary.write(toFile: filePath, atomically: <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a><strong>创建文件</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">(name:String, fileBaseUrl:URL)</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line">     </div><div class="line">    <span class="keyword">let</span> file = fileBaseUrl.appendingPathComponent(name)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"文件: \(file)"</span>)</div><div class="line">    <span class="keyword">let</span> exist = manager.fileExists(atPath: file.path)</div><div class="line">    <span class="keyword">if</span> !exist &#123;</div><div class="line">        <span class="keyword">let</span> data = <span class="type">Data</span>(base64Encoded:<span class="string">"aGVsbG8gd29ybGQ="</span> ,options:.ignoreUnknownCharacters)</div><div class="line">        <span class="keyword">let</span> createSuccess = manager.createFile(atPath: file.path,contents:data,attributes:<span class="literal">nil</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"文件创建结果: \(createSuccess)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//在文档目录下新建test.txt文件</span></div><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls( <span class="keyword">for</span>: .documentDirectory,</div><div class="line">                                   <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> url = urlForDocument[<span class="number">0</span>]</div><div class="line">createFile(name:<span class="string">"test.txt"</span>, fileBaseUrl: url)</div><div class="line"><span class="comment">//createFile(name: "folder/new.txt", fileBaseUrl: url)</span></div></pre></td></tr></table></figure>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件 "></a><strong>复制文件 </strong></h4><ul>
<li>法一:</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> homeDirectory = <span class="type">NSHomeDirectory</span>()</div><div class="line"><span class="keyword">let</span> srcUrl = homeDirectory + <span class="string">"/Documents/hangge.txt"</span></div><div class="line"><span class="keyword">let</span> toUrl = homeDirectory + <span class="string">"/Documents/copyed.txt"</span></div><div class="line"><span class="keyword">try</span>! fileManager.copyItem(atPath: srcUrl, toPath: toUrl)</div></pre></td></tr></table></figure>
<ul>
<li>法二：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定位到用户文档目录</span></div><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls( <span class="keyword">for</span>:.documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> url = urlForDocument[<span class="number">0</span>]</div><div class="line"> </div><div class="line"><span class="comment">// 将test.txt文件拷贝到文档目录根目录下的copyed.txt文件</span></div><div class="line"><span class="keyword">let</span> srcUrl = url.appendingPathComponent(<span class="string">"test.txt"</span>)</div><div class="line"><span class="keyword">let</span> toUrl = url.appendingPathComponent(<span class="string">"copyed.txt"</span>)</div><div class="line"> </div><div class="line"><span class="keyword">try</span>! manager.copyItem(at: srcUrl, to: toUrl)</div></pre></td></tr></table></figure>
<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><ul>
<li>法一：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> homeDirectory = <span class="type">NSHomeDirectory</span>()</div><div class="line"><span class="keyword">let</span> srcUrl = homeDirectory + <span class="string">"/Documents/hangge.txt"</span></div><div class="line"><span class="keyword">let</span> toUrl = homeDirectory + <span class="string">"/Documents/moved/hangge.txt"</span></div><div class="line"><span class="keyword">try</span>! fileManager.moveItem(atPath: srcUrl, toPath: toUrl)</div></pre></td></tr></table></figure>
<ul>
<li>法二：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定位到用户文档目录</span></div><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls( <span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> url = urlForDocument[<span class="number">0</span>]</div><div class="line"> </div><div class="line"><span class="keyword">let</span> srcUrl = url.appendingPathComponent(<span class="string">"test.txt"</span>)</div><div class="line"><span class="keyword">let</span> toUrl = url.appendingPathComponent(<span class="string">"copyed.txt"</span>)</div><div class="line"><span class="comment">// 移动srcUrl中的文件（test.txt）到toUrl中（copyed.txt）</span></div><div class="line"><span class="keyword">try</span>! manager.moveItem(at: srcUrl, to: toUrl)</div></pre></td></tr></table></figure>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h4><ul>
<li>法一：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> homeDirectory = <span class="type">NSHomeDirectory</span>()</div><div class="line"><span class="keyword">let</span> srcUrl = homeDirectory + <span class="string">"/Documents/hangge.txt"</span></div><div class="line"><span class="keyword">try</span>! fileManager.removeItem(atPath: srcUrl)</div></pre></td></tr></table></figure>
<ul>
<li>法二：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定位到用户文档目录</span></div><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> url = urlForDocument[<span class="number">0</span>]</div><div class="line"> </div><div class="line"><span class="keyword">let</span> toUrl = url.appendingPathComponent(<span class="string">"copyed.txt"</span>)</div><div class="line"><span class="comment">// 删除文档根目录下的toUrl路径的文件（copyed.txt文件）</span></div><div class="line"><span class="keyword">try</span>! manager.removeItem(at: toUrl)</div></pre></td></tr></table></figure>
<h4 id="删除目录下所有的文件"><a href="#删除目录下所有的文件" class="headerlink" title="删除目录下所有的文件"></a><strong>删除目录下所有的文件</strong></h4><ul>
<li><p>法一：获取所有文件，然后遍历删除</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> myDirectory = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/Files"</span></div><div class="line"><span class="keyword">let</span> fileArray = fileManager.subpaths(atPath: myDirectory)</div><div class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> fileArray!&#123;</div><div class="line">    <span class="keyword">try</span>! fileManager.removeItem(atPath: myDirectory + <span class="string">"/\(fn)"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>法二：删除目录后重新创建该目录</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> myDirectory = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/Files"</span></div><div class="line"><span class="keyword">try</span>! fileManager.removeItem(atPath: myDirectory)</div><div class="line"><span class="keyword">try</span>! fileManager.createDirectory(atPath: myDirectory, withIntermediateDirectories: <span class="literal">true</span>,</div><div class="line">                                 attributes: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlsForDocDirectory = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> docPath = urlsForDocDirectory[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> file = docPath.appendingPathComponent(<span class="string">"test.txt"</span>)</div><div class="line"> </div><div class="line"><span class="comment">//方法1</span></div><div class="line"><span class="keyword">let</span> readHandler = <span class="keyword">try</span>! <span class="type">FileHandle</span>(forReadingFrom:file)</div><div class="line"><span class="keyword">let</span> data = readHandler.readDataToEndOfFile()</div><div class="line"><span class="keyword">let</span> readString = <span class="type">String</span>(data: data, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</div><div class="line"><span class="built_in">print</span>(<span class="string">"文件内容: \(readString)"</span>)</div><div class="line"> </div><div class="line"><span class="comment">//方法2</span></div><div class="line"><span class="keyword">let</span> data2 = manager.contents(atPath: file.path)</div><div class="line"><span class="keyword">let</span> readString2 = <span class="type">String</span>(data: data2!, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</div><div class="line"><span class="built_in">print</span>(<span class="string">"文件内容: \(readString2)"</span>)</div></pre></td></tr></table></figure>
<h4 id="在任意位置写入数据"><a href="#在任意位置写入数据" class="headerlink" title="在任意位置写入数据"></a><strong>在任意位置写入数据</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlsForDocDirectory = manager.urls(<span class="keyword">for</span>:.documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> docPath = urlsForDocDirectory[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> file = docPath.appendingPathComponent(<span class="string">"test.txt"</span>)</div><div class="line"> </div><div class="line"><span class="keyword">let</span> string = <span class="string">"添加一些文字到文件末尾"</span></div><div class="line"><span class="keyword">let</span> appendedData = string.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8, allowLossyConversion: <span class="literal">true</span>)</div><div class="line"><span class="keyword">let</span> writeHandler = <span class="keyword">try</span>? <span class="type">FileHandle</span>(forWritingTo:file)</div><div class="line">writeHandler!.seekToEndOfFile()</div><div class="line">writeHandler!.write(appendedData!)</div></pre></td></tr></table></figure>
<h4 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a><strong>文件权限判断</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> docPath = urlForDocument[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> file = docPath.appendingPathComponent(<span class="string">"test.txt"</span>)</div><div class="line"> </div><div class="line"><span class="keyword">let</span> readable = manager.isReadableFile(atPath: file.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"可读: \(readable)"</span>)</div><div class="line"><span class="keyword">let</span> writeable = manager.isWritableFile(atPath: file.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"可写: \(writeable)"</span>)</div><div class="line"><span class="keyword">let</span> executable = manager.isExecutableFile(atPath: file.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"可执行: \(executable)"</span>)</div><div class="line"><span class="keyword">let</span> deleteable = manager.isDeletableFile(atPath: file.path)</div><div class="line"><span class="built_in">print</span>(<span class="string">"可删除: \(deleteable)"</span>)</div></pre></td></tr></table></figure>
<h4 id="获取文件属性（创建时间，修改时间，文件大小，文件类型等信息）"><a href="#获取文件属性（创建时间，修改时间，文件大小，文件类型等信息）" class="headerlink" title="获取文件属性（创建时间，修改时间，文件大小，文件类型等信息）"></a><strong>获取文件属性（创建时间，修改时间，文件大小，文件类型等信息）</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> docPath = urlForDocument[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> file = docPath.appendingPathComponent(<span class="string">"test.txt"</span>)</div><div class="line"> </div><div class="line"><span class="keyword">let</span> attributes = <span class="keyword">try</span>? manager.attributesOfItem(atPath: file.path) <span class="comment">//结果为Dictionary类型</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"attributes: \(attributes!)"</span>)</div></pre></td></tr></table></figure>
<h4 id="文件-文件夹比较"><a href="#文件-文件夹比较" class="headerlink" title="文件/文件夹比较"></a>文件/文件夹比较</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> manager = <span class="type">FileManager</span>.<span class="keyword">default</span></div><div class="line"><span class="keyword">let</span> urlForDocument = manager.urls(<span class="keyword">for</span>: .documentDirectory, <span class="keyword">in</span>:.userDomainMask)</div><div class="line"><span class="keyword">let</span> docPath = urlForDocument[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> contents = <span class="keyword">try</span>! manager.contentsOfDirectory(atPath: docPath.path)</div><div class="line"> </div><div class="line"><span class="comment">//下面比较用户文档中前面两个文件是否内容相同（该方法也可以用来比较目录）</span></div><div class="line"><span class="keyword">let</span> <span class="built_in">count</span> = contents.<span class="built_in">count</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</div><div class="line">    <span class="keyword">let</span> path1 = docPath.path + <span class="string">"/"</span> + (contents[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">String</span>)</div><div class="line">    <span class="keyword">let</span> path2 = docPath.path + <span class="string">"/"</span> + (contents[<span class="number">1</span>] <span class="keyword">as</span> <span class="type">String</span>)</div><div class="line">    <span class="keyword">let</span> <span class="built_in">equal</span> = manager.contentsEqual(atPath: path1,andPath:path2)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"path1：\(path1)"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"path2：\(path2)"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"比较结果： \(equal)"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UILabel的富文本设置"><a href="#UILabel的富文本设置" class="headerlink" title="UILabel的富文本设置"></a>UILabel的富文本设置</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//富文本设置</span></div><div class="line"><span class="keyword">let</span> attributeString = <span class="type">NSMutableAttributedString</span>(string:<span class="string">"welcome to hangge.com"</span>)</div><div class="line"><span class="comment">//从文本0开始6个字符字体HelveticaNeue-Bold,16号</span></div><div class="line">attributeString.addAttribute(<span class="type">NSFontAttributeName</span>,</div><div class="line">                             value: <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue-Bold"</span>, size: <span class="number">16</span>)!,</div><div class="line">                             range: <span class="type">NSMakeRange</span>(<span class="number">0</span>,<span class="number">6</span>))</div><div class="line"><span class="comment">//设置字体颜色</span></div><div class="line">attributeString.addAttribute(<span class="type">NSForegroundColorAttributeName</span>, value: <span class="type">UIColor</span>.blue,</div><div class="line">                             range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">3</span>))</div><div class="line"><span class="comment">//设置文字背景颜色</span></div><div class="line">attributeString.addAttribute(<span class="type">NSBackgroundColorAttributeName</span>, value: <span class="type">UIColor</span>.green,</div><div class="line">                             range: <span class="type">NSMakeRange</span>(<span class="number">3</span>,<span class="number">3</span>))</div><div class="line">label.attributedText = attributeString</div></pre></td></tr></table></figure>
<h4 id="UITextView"><a href="#UITextView" class="headerlink" title="UITextView"></a>UITextView</h4><ul>
<li>给文字中的电话号码和网址自动加链接</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">textview.dataDetectorTypes = [] <span class="comment">//都不加链接</span></div><div class="line">textview.dataDetectorTypes = <span class="type">UIDataDetectorTypes</span>.phoneNumber <span class="comment">//只有电话加链接</span></div><div class="line">textview.dataDetectorTypes = <span class="type">UIDataDetectorTypes</span>.link <span class="comment">//只有网址加链接</span></div><div class="line">textview.dataDetectorTypes = <span class="type">UIDataDetectorTypes</span>.all <span class="comment">//电话和网址都加</span></div></pre></td></tr></table></figure>
<ul>
<li>自定义选择内容后的菜单</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> textview = <span class="type">UITextView</span>(frame:<span class="type">CGRect</span>(x:<span class="number">10</span>, y:<span class="number">100</span>, width:<span class="number">200</span>, height:<span class="number">100</span>))</div><div class="line">textview.layer.borderWidth = <span class="number">1</span>  <span class="comment">//边框粗细</span></div><div class="line">textview.layer.borderColor = <span class="type">UIColor</span>.gray.cgColor <span class="comment">//边框颜色</span></div><div class="line"><span class="keyword">self</span>.view.addSubview(textview)</div><div class="line"></div><div class="line"><span class="keyword">let</span> mail = <span class="type">UIMenuItem</span>(title: <span class="string">"邮件"</span>, action: #selector(<span class="type">ViewController</span>.onMail))</div><div class="line"><span class="keyword">let</span> weixin = <span class="type">UIMenuItem</span>(title: <span class="string">"微信"</span>, action: #selector(<span class="type">ViewController</span>.onWeiXin))</div><div class="line"><span class="keyword">let</span> menu = <span class="type">UIMenuController</span>()</div><div class="line">menu.menuItems = [mail,weixin]</div></pre></td></tr></table></figure>
<h4 id="滑块（UISlider）自定义滑块组件图片"><a href="#滑块（UISlider）自定义滑块组件图片" class="headerlink" title="滑块（UISlider）自定义滑块组件图片"></a>滑块（UISlider）<strong>自定义滑块组件图片</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置滑块右边部分的图片</span></div><div class="line">slider.setMaximumTrackImage(<span class="type">UIImage</span>(named:<span class="string">"slider_max"</span>),forState:<span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line"><span class="comment">//设置滑块左边部分的图片</span></div><div class="line">slider.setMinimumTrackImage(<span class="type">UIImage</span>(named:<span class="string">"slider_min"</span>),forState:<span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line"><span class="comment">//设置滑块的图片</span></div><div class="line">slider.setThumbImage(<span class="type">UIImage</span>(named:<span class="string">"slider_thumb"</span>),forState:<span class="type">UIControlState</span>.<span class="type">Normal</span>)</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置滑块右边部分的图片-使用三宫格缩放（左右14像素不变，中间缩放）</span></div><div class="line"><span class="keyword">let</span> imgTrackRight = <span class="type">UIImage</span>(named:<span class="string">"slider_max"</span>)</div><div class="line"><span class="keyword">let</span> imgRight = imgTrackRight!.stretchableImageWithLeftCapWidth(<span class="number">14</span>, topCapHeight:<span class="number">0</span>)</div><div class="line">slider.setMaximumTrackImage(imgRight, forState:<span class="type">UIControlState</span>.<span class="type">Normal</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> arc4random </tag>
            
            <tag> arc4random_uniform </tag>
            
            <tag> Range </tag>
            
            <tag> struct </tag>
            
            <tag> enum </tag>
            
            <tag> while </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3学习笔记（七）]]></title>
      <url>http://yoursite.com/2017/01/23/Swift3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="用-Swift-运行时获取对象属性列表"><a href="#用-Swift-运行时获取对象属性列表" class="headerlink" title="用 Swift 运行时获取对象属性列表"></a><strong>用 Swift 运行时获取对象属性列表</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> title: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="comment">//类方法</span></div><div class="line">    <span class="comment">///目标：[使用运行时]获取当前类所有属性的数组</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">propertyList</span>() -&gt; [<span class="title">String</span>] </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//1.获取“类”的属性列表，返回属性列表的数组。可选项</span></div><div class="line">        <span class="comment">//其中的UnsafeMutablePointer是可变的UInt32类型的指针</span></div><div class="line">        <span class="keyword">let</span> list = class_copyPropertyList(<span class="keyword">self</span>, &amp;<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"属性的数量\(count)"</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//2.遍历数组</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="type">Int</span>(<span class="built_in">count</span>) &#123;</div><div class="line">            <span class="comment">//3.根据下标获取属性</span></div><div class="line">            <span class="keyword">let</span> pty = list?[i]</div><div class="line">            </div><div class="line">            <span class="comment">//4.获取属性的名称 C 语言字符串</span></div><div class="line">            <span class="comment">//Int8 -&gt; byte -&gt; char -&gt; C语言的字符串</span></div><div class="line">            <span class="keyword">let</span> cName = property_getName(pty!)</div><div class="line">            </div><div class="line">            <span class="comment">//5.转成OC（String）的字符串</span></div><div class="line">            <span class="keyword">let</span> name = <span class="type">String</span>(utf8String: cName!)</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(name)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//释放C语言对象</span></div><div class="line">        free(list)</div><div class="line">        </div><div class="line">        <span class="comment">//返回一个空数组，而不是nil</span></div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="运行时观察属性的情况-amp-guard语法守护"><a href="#运行时观察属性的情况-amp-guard语法守护" class="headerlink" title="运行时观察属性的情况&amp;guard语法守护"></a><strong>运行时观察属性的情况&amp;guard语法守护</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div><div class="line">    <span class="comment">//基础数据类型 ，在OC中没有可选，如果定义成可选，运行时同样获取不到，使用kvc就会奔溃！</span></div><div class="line">    <span class="comment">//var age:Int?</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="comment">//private的属性使用运行时，同样获取不到属性（可以获取到ivar），同样谁让KVC崩溃</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> title: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="comment">//类方法</span></div><div class="line">    <span class="comment">///目标：[使用运行时]获取当前类所有属性的数组</span></div><div class="line">    <span class="comment">///获取ivar列表是所有第三方框架字典转模型的基础</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">propertyList</span>() -&gt; [<span class="title">String</span>] </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//1.获取“类”的属性列表，返回属性列表的数组。可选项</span></div><div class="line">        <span class="comment">//其中的UnsafeMutablePointer是可变的UInt32类型的指针</span></div><div class="line">        <span class="keyword">let</span> list = class_copyPropertyList(<span class="keyword">self</span>, &amp;<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"属性的数量\(count)"</span>);</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//2.遍历数组</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="type">Int</span>(<span class="built_in">count</span>) &#123;</div><div class="line">            <span class="comment">//3.根据下标获取属性</span></div><div class="line">            <span class="comment">//使用guard语法一次判断每一项是否有值，只要有一项为nil，就不再执行后面的代码</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> pty = list?[i],<span class="keyword">let</span> cName = property_getName(pty),<span class="keyword">let</span> name = <span class="type">String</span>(utf8String: cName)</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//继续遍历下一个</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//name是一定有值的</span></div><div class="line">            <span class="built_in">print</span>(name)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//释放C语言对象</span></div><div class="line">        free(list)</div><div class="line">        </div><div class="line">        <span class="comment">//返回一个空数组，而不是nil</span></div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用-session-加载百度数据"><a href="#使用-session-加载百度数据" class="headerlink" title="使用 session 加载百度数据"></a><strong>使用 session 加载百度数据</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="comment">//URL的构造函数可以返回nil</span></div><div class="line">        <span class="comment">//构造函数就是实例化对象的</span></div><div class="line">        <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"http://www.baidu.com"</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//发起网络请求</span></div><div class="line">        <span class="comment">//- 和OC的区别就是，闭包里面所有的参数需要自己写，OC直接带出</span></div><div class="line">        <span class="comment">//- 如果不关心的值可以直接”_“忽略</span></div><div class="line">        <span class="type">URLSession</span>.shared.dataTask(with: url!) &#123; (data,</div><div class="line">            <span class="number">_</span>, error) <span class="keyword">in</span></div><div class="line"><span class="comment">//            if (error != nil) &#123;</span></div><div class="line"><span class="comment">//                print("网络请求失败")</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line">            </div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"网络请求失败\(error)"</span>)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//将data转换为String</span></div><div class="line">            <span class="keyword">let</span> html = <span class="type">String</span>(data: data, encoding: .utf8)</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(html)</div><div class="line">            </div><div class="line">        &#125;.resume()<span class="comment">//session需要加上</span></div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="利用遍历构造函数判断对象创建条件"><a href="#利用遍历构造函数判断对象创建条件" class="headerlink" title="利用遍历构造函数判断对象创建条件"></a><strong>利用遍历构造函数判断对象创建条件</strong></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     1.遍历构造函数允许返回nil</div><div class="line">        - 正常的构造函数一定会创建对象</div><div class="line">        - ** 判断构造函数是否符合条件，如果不符合条件，直接返回nil</div><div class="line">     2.**只有** 遍历构造函数中使用“self.init”构造当前对象</div><div class="line">        - 没有convenience关键字的构造函数是负责创建对象，反之，用来检查条件的，本身不负责对象的创建</div><div class="line">     3.如果在遍历构造函数中使用当前对象的属性，一定要在self.init方法之后</div><div class="line">     */</div><div class="line">    </div><div class="line">    <span class="comment">/// 'self' used before self.init call  </span></div><div class="line">    <span class="comment">//解决方法，在里面加上self.init()</span></div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>?(name: <span class="type">String</span>,age: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">if</span> age &gt; <span class="number">200</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">///Use of 'self' in property access 'name' before self.init initializes self</span></div><div class="line">        <span class="comment">//使用self 访问name 之前，应该调用self.init</span></div><div class="line">        <span class="comment">//self.name = name</span></div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</div><div class="line"></div><div class="line">        <span class="comment">//执行到此 self才允许被访问，才能够访问到对象的属性</span></div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="便利构造函数抽取控件创建方法"><a href="#便利构造函数抽取控件创建方法" class="headerlink" title="便利构造函数抽取控件创建方法"></a><strong>便利构造函数抽取控件创建方法</strong></h4><p>设置UITextFiled+Extension</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITextField</span> </span>&#123;</div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>,placeholder: <span class="type">String</span> = <span class="string">"sdf"</span>,fontSize: <span class="type">CGFloat</span> = <span class="number">14</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//实例化当前对象</span></div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(frame:frame)</div><div class="line">    </div><div class="line">        <span class="comment">//访问属性</span></div><div class="line">        <span class="keyword">self</span>.borderStyle = .roundedRect</div><div class="line">        <span class="keyword">self</span>.placeholder = placeholder</div><div class="line">        <span class="keyword">self</span>.font = <span class="type">UIFont</span>.systemFont(ofSize: fontSize)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建UIButton+Extension</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span> </span>&#123;</div><div class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span> , title: <span class="type">String</span> = <span class="string">"按钮"</span> , color: <span class="type">UIColor</span> = <span class="type">UIColor</span>.darkGray) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(frame: frame)</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.setTitle(title, <span class="keyword">for</span>: .normal)</div><div class="line">        <span class="keyword">self</span>.setTitleColor(color, <span class="keyword">for</span>: .normal)</div><div class="line">        <span class="keyword">self</span>.sizeToFit()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运行时属性 </tag>
            
            <tag> 遍历构造函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3学习笔记（六）]]></title>
      <url>http://yoursite.com/2017/01/21/Swift3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="必选属性的构造过程"><a href="#必选属性的构造过程" class="headerlink" title="必选属性的构造过程"></a>必选属性的构造过程</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 1.给自己的属性分配空间并且设置初始值</div><div class="line"> 2.调用父类的构造方法之前，先给本类的属性设置初始值</div><div class="line"> 3.调用父类的“构造函数”，给父类的属性分配空间设置初始值</div><div class="line"> NSObject 没有属性，只有一个成员变量'isa'</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//1. Class 'Person' has no initializers</span></div><div class="line"><span class="comment">//Person类没有“初始化器”s，构造函数。可以有多个，默认的是init</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="comment">//2.Overriding declaration requires an 'override' keyword</span></div><div class="line">    <span class="comment">//如果重写一个方法的话，如果父类有这个方法，子类需要重写的话就必须加上override</span></div><div class="line">    <span class="comment">//3.Property 'self.name' not initialized at implicitly generated super.init call</span></div><div class="line">    <span class="comment">//implicitly(隐式生成 super.init),调用父类的构造函数之前,属性self.name没有被初始化</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">        <span class="comment">//必须加载super.init()之前</span></div><div class="line">        name = <span class="string">""</span></div><div class="line">        </div><div class="line">        <span class="comment">//4. Property 'self.name' not initialized at super.init call</span></div><div class="line">        <span class="comment">//这里的提示是给self.name初始化，分配内存空间，设置初始值</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line"> </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>ViewController.swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 在Swift中，默认同一个项目中（同一个命名空间下），所有的类都是共享的，可以直接访问到，不需要import</div><div class="line"> 所有的对象属性 var，也可以直接访问到</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//实例化Person类</span></div><div class="line">        <span class="comment">//() -&gt; alloc/init</span></div><div class="line">        <span class="comment">//swift中对应一个函数 init构造函数</span></div><div class="line">        <span class="comment">//给成员变量分配空间，初始化成员变量</span></div><div class="line">        <span class="keyword">let</span> p = <span class="type">Person</span>()</div><div class="line">        <span class="built_in">print</span>(p.name)</div><div class="line">        p.name = <span class="string">"xu"</span></div><div class="line">        <span class="built_in">print</span>(p.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注：如果是子类的构造方法，他的是执行顺序是：</strong></p>
<ul>
<li>先执行子类的构造方法，再执行父类的构造方</li>
</ul>
<h4 id="重载构造方法"><a href="#重载构造方法" class="headerlink" title="重载构造方法"></a>重载构造方法</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="comment">/**</span></div><div class="line"> 如果重载了构造函数，并且没有实现父类 init方法，系统不再提供init() 构造方法（默认是会有的）</div><div class="line"> - 因为默认的构造函数，不能给本类的属性分配空间!</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="comment">//重写：父类有这个方法</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">        <span class="comment">//问题：name 确实有初始值，但是所有的初始值都是Feyddy</span></div><div class="line">        name = <span class="string">"Feyddy"</span></div><div class="line">        </div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//重载，函数名相同，但是参数的个数不同</span></div><div class="line">    <span class="comment">//重载可以给自己的属性从外部设置初始值</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//使用参数的name设置成属性</span></div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        </div><div class="line">        <span class="comment">//调用父类的构造函数</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在ViewController里面创建对象的时候就会有两种方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="type">Person</span>(name: <span class="string">"xuzongli"</span>)</div><div class="line"><span class="keyword">let</span> p2 = <span class="type">Person</span>()</div></pre></td></tr></table></figure>
<p>但是如果除去“重写：父类有这个方法“那就只会剩下重载的那个方法</p>
<h4 id="KVC函数调用的基本实现及KVC构造函数中基本数据类型和私有属性"><a href="#KVC函数调用的基本实现及KVC构造函数中基本数据类型和私有属性" class="headerlink" title="KVC函数调用的基本实现及KVC构造函数中基本数据类型和私有属性"></a>KVC函数调用的基本实现及KVC构造函数中基本数据类型和私有属性</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="comment">/**</span></div><div class="line"> 1.在定义模型的时候，如果是对象，通常都是可选的</div><div class="line">  -在需要的时候创建</div><div class="line">  -避免写构造函数，可以简化代码</div><div class="line"> 2.如果是基本数据类型，不能设置成可选的，而且要设置初始值，否则KVC会奔溃</div><div class="line"> 3.如果需要使用KVC设置数据，属性不能是private</div><div class="line"> 4.在使用KVC方法之前应该调用super.init()，保证对象实例化完成</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//name 属性是可选的，在OC中很多的属性都是在需要的时候创建的</span></div><div class="line">    <span class="comment">//例如。vc.view / tableViewCell.textLabel / detailLabel / imageView</span></div><div class="line">    <span class="comment">//因为手机在开发，内存很宝贵，有些属性并不是一定需要分配空间的</span></div><div class="line">    <span class="comment">//延迟加载，在需要的时候在创建</span></div><div class="line">    </div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="comment">//给基本数据类型属性初始化</span></div><div class="line">    <span class="comment">// - 使用KVC会提示无法找到age 的Key</span></div><div class="line">    <span class="comment">// - 原因：Int是一个基本数据类型的结构体，OC中没有，OC中只有基本数据类型</span></div><div class="line">    <span class="comment">//var age: Int?</span></div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//如果是private属性，使用KVC设置的时候，同样无法设置</span></div><div class="line">    <span class="comment">//如果是private属性，是禁止外部访问的</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> title: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//重载构造函数，使用字典为本类设置初始值</span></div><div class="line">    <span class="keyword">init</span>(dict: [<span class="type">String</span>: <span class="type">AnyObject</span>]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//保障对象完全初始化完成(一定)</span></div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        </div><div class="line">        <span class="comment">//Use of 'self' in method call 'setValuesForKeys' before super.init initializes self</span></div><div class="line">        <span class="comment">//使用self 的方法“setValueForKeys”之前，应该调用 super.init</span></div><div class="line">        <span class="comment">//KVC的方法是OC的方法，在运行时给对象发送消息，要求对象已经实例化完成</span></div><div class="line">        setValuesForKeys(dict)</div><div class="line">        </div><div class="line">        <span class="comment">//super.init()如果放在这个时候调用，对象还没有初始化完成</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//重写父类的方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(<span class="number">_</span> value: Any?, forUndefinedKey key: String)</span></span> &#123;</div><div class="line">        <span class="comment">//没有调用 super，将父类的代码实现完全覆盖！不会奔溃！</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="子类构造函数的继承"><a href="#子类构造函数的继承" class="headerlink" title="子类构造函数的继承"></a>子类构造函数的继承</h4><p>我们继承上面的类</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> no: <span class="type">String</span>?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在主控制器中实现初始化</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="type">Student</span>(dict: [<span class="string">"name"</span>:<span class="string">"wang"</span> <span class="keyword">as</span> <span class="type">AnyObject</span>,<span class="string">"age"</span>:<span class="number">10</span> <span class="keyword">as</span> <span class="type">AnyObject</span>,<span class="string">"no"</span>:<span class="string">"100"</span> <span class="keyword">as</span> <span class="type">AnyObject</span>,<span class="string">"xxx"</span>:<span class="string">"feyddy"</span> <span class="keyword">as</span> <span class="type">AnyObject</span>])</div><div class="line">        <span class="built_in">print</span>(s.no)</div><div class="line"><span class="comment">//可以看出我们可以直接通过父类的KVC方法在子类的使用</span></div><div class="line"><span class="comment">//如果我们想在初始化的时候添加上一个不存在的属性"xxx",这个时候就要在KVC构造方法的时候重写setValue(_ value: Any?, forUndefinedKey key: String)看上面的代码</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 构造函数 </tag>
            
            <tag> 重载 </tag>
            
            <tag> 重写 </tag>
            
            <tag> KVC函数调用 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3学习笔记（五）]]></title>
      <url>http://yoursite.com/2017/01/21/Swift3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="使用Swift实现循环引用"><a href="#使用Swift实现循环引用" class="headerlink" title="使用Swift实现循环引用"></a>使用Swift实现循环引用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//定义属性</span></div><div class="line">    <span class="keyword">var</span> completionCallBack: (()-&gt;())?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">// block 中如果出现self 要特别小心</span></div><div class="line">        <span class="comment">//- 只是闭包对 self 进行了copy,闭包执行完成之后，会自动销毁，同时释放对self的引用</span></div><div class="line">        <span class="comment">//- 同时需要self对闭包引用</span></div><div class="line">        loadData &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="keyword">self</span>.view)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(completion: @escaping <span class="params">()</span></span></span>-&gt;()) -&gt; () &#123;</div><div class="line">        <span class="comment">//使用属性记录闭包-&gt;self对闭包引用.这个时候deinit不会运行，因为出现了循环引用</span></div><div class="line">        completionCallBack = completion</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//异步</span></div><div class="line">        <span class="type">DispatchQueue</span>.global().async &#123; </div><div class="line">            <span class="built_in">print</span>(<span class="string">"耗时操作"</span>)</div><div class="line">            </div><div class="line">            <span class="comment">//尾随闭包</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                <span class="comment">//回调执行闭包</span></div><div class="line">                completion()</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//类似于OC中的dealloc</span></div><div class="line">    <span class="comment">//没有func -&gt; 不让调用</span></div><div class="line">    <span class="comment">//没有() -&gt; 不让重载</span></div><div class="line">    <span class="comment">//在对象被销毁前自动调用</span></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">    	<span class="comment">//1.跟踪对象的销毁</span></div><div class="line">    	<span class="comment">//2.必须释放</span></div><div class="line">    		<span class="comment">/**</span></div><div class="line">    			- 通知，不释放不会奔溃，但是会泄露</div><div class="line">    			- KVO，不释放会奔溃</div><div class="line">    			- NSTimer / CADisplayLink ,不销毁会出现循环应用</div><div class="line">    		*/</div><div class="line">    		</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有循环引用"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="解除循环引用"><a href="#解除循环引用" class="headerlink" title="解除循环引用"></a>解除循环引用</h4><p>还是拿上面的代码进行解决</p>
<ul>
<li><p>OC方式解决循环引用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//***解除循环引用，需要打断链条</span></div><div class="line">        <span class="comment">//细节1：var ：weak只能修饰var，不能修饰let</span></div><div class="line">        <span class="comment">//‘weak’ must be a mutable variable,because it may change at runtime</span></div><div class="line">        <span class="comment">//weak 可能会在运行时被修改-&gt;指向对象一旦被释放掉，会被自动设置为nil</span></div><div class="line">        <span class="comment">//ViewController?</span></div><div class="line">        </div><div class="line">        <span class="keyword">weak</span> <span class="keyword">var</span> weakSelf = <span class="keyword">self</span></div><div class="line">        loadData &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//细节2：</span></div><div class="line">            <span class="comment">//解包的方式有两种</span></div><div class="line">            <span class="comment">//？可选解包 - 如果 self 已经被释放，不会对对象发送 getter 消息，更加安全</span></div><div class="line">            <span class="comment">//！强行解包 - 如果 self 已经被释放，强行解包会导致奔溃</span></div><div class="line">            </div><div class="line">            <span class="comment">/**</span></div><div class="line">             weakSelf?.view  -  只是单纯的发送消息，没有任的计算</div><div class="line">             强行解包，因为需要计算，可选项不能直接参与计算</div><div class="line">            */</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(weakSelf?.view)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Swift解决循环引用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift推荐方法</span></div><div class="line">        <span class="comment">//[weak self] 表示&#123;&#125;里面的self都是弱引用，需要注意解包</span></div><div class="line">        loadData &#123;</div><div class="line">            [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="keyword">self</span>?.view)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Swift另外的用法，不推荐。不安全</span></div><div class="line">        <span class="comment">//[unowned self]表示&#123;&#125;中的所有的self都是assgin的，不会强引用，但是，如果对象释放，指针地址不会变化</span></div><div class="line">        <span class="comment">//如果对象被释放，继续调用，就会出现野指针的问题</span></div><div class="line">        loadData &#123;</div><div class="line">            [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="keyword">self</span>.view)</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>OC代码中解决循环引用的两种方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#import &quot;FDViewController.h&quot;</div><div class="line"></div><div class="line">@interface FDViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation FDViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view.</div><div class="line">    </div><div class="line">    /*</div><div class="line">    //解除引用1：__weak</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    </div><div class="line">    [self loadData:^&#123;</div><div class="line">        NSLog(@&quot;%@&quot;,weakSelf.view);</div><div class="line">    &#125;];</div><div class="line">    */</div><div class="line">    </div><div class="line">    //解除引用2:__unsafe_unretained</div><div class="line">    //如果需要自行管理内存，才使用</div><div class="line">    //EXC_BAD_ACCESS 坏内存访问，野指针访问</div><div class="line">    //__unsafe_unretained同样是 assign的引用（MRC中没有weak）</div><div class="line">    //在MRC中如果要弱引用对象都是使用assign，不会增加引用计数，但是一旦对象被释放，地址不会改变，继续访问，出现野指针</div><div class="line">    //ARC weak ,本质上是一个官缠着模式，一旦发现对象被释放，会自动将地址设置为nil，更加安全</div><div class="line">    </div><div class="line">    </div><div class="line">    //效率：weak的效率会略微差一些</div><div class="line">    __unsafe_unretained typeof(self) weakSelf = self;</div><div class="line">    [self loadData:^&#123;</div><div class="line">        NSLog(@&quot;%@&quot;,weakSelf.view);</div><div class="line"></div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)loadData:(void(^)()) completion &#123;</div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        NSLog(@&quot;耗时操作 %@&quot;,[NSThread currentThread]);</div><div class="line">        </div><div class="line">        //睡眠</div><div class="line">        [NSThread sleepForTimeInterval:2.0];</div><div class="line">        </div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            //执行block</div><div class="line">            </div><div class="line">            completion();</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 循环引用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3学习笔记（四）]]></title>
      <url>http://yoursite.com/2017/01/19/Swift3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="闭包的定义格式"><a href="#闭包的定义格式" class="headerlink" title="闭包的定义格式"></a>闭包的定义格式</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     闭包</div><div class="line">     1.提前准备好的代码</div><div class="line">     2.在需要的时候执行</div><div class="line">     3.可以当做参数</div><div class="line">     */</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">//1&gt;最简单的闭包</span></div><div class="line">        <span class="comment">//() -&gt; ()没有参数，没有返回值的函数</span></div><div class="line">        <span class="comment">//如果没有参数，没有返回值，可以省略，连in都一起省略</span></div><div class="line">        <span class="keyword">let</span> b1 = &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"hello"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//执行闭包</span></div><div class="line">        b1();</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//2&gt;带参数的闭包</span></div><div class="line">        <span class="comment">//闭包中的参数，返回值，实现代码都是写在花括号里面</span></div><div class="line">        <span class="comment">//需要使用一个关键字`in`用来分隔定义和实现</span></div><div class="line">        <span class="comment">//&#123;形参列表 -&gt; 返回值类型 `in` //实现代码&#125;</span></div><div class="line">        <span class="keyword">let</span> b2 = &#123;(x: <span class="type">Int</span>)-&gt;() <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(x)</div><div class="line">        &#125;</div><div class="line">        b2(<span class="number">100</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//3&gt;带参数返回值的闭包</span></div><div class="line">        <span class="comment">//(Int)-&gt;(Int)</span></div><div class="line">        <span class="keyword">let</span> b3 = &#123;(x: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> x + <span class="number">10</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(b3(<span class="number">100</span>))</div><div class="line">  </div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h4><p>将任务添加到队列，指定执行任务的函数，即，队列调度任务（block/闭包），以同步或者异步的方式执行</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在异步执行任务，获取结果，通过block/闭包回调</span></div><div class="line"><span class="comment">//闭包的应用场景和block完全一致</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="comment">//将任务添加到队列，指定执行任务的函数，即，队列调度任务（block/闭包），以同步或者异步的方式执行</span></div><div class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"耗时操作\(Thread.current)"</span>)</div><div class="line">            </div><div class="line">            <span class="comment">//休眠</span></div><div class="line">            <span class="type">Threa</span></div><div class="line">            </div><div class="line">            <span class="comment">//主队列回调</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async(execute: &#123; </div><div class="line">                <span class="built_in">print</span>(<span class="string">"主线程更新 UI\(Thread.current)"</span>)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="通过闭包回调传递参数"><a href="#通过闭包回调传递参数" class="headerlink" title="通过闭包回调传递参数"></a>通过闭包回调传递参数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">      </div><div class="line">        loadData &#123; (result) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"获取数据\(result)"</span>)</div><div class="line">        &#125;</div><div class="line">  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//@escaping逃逸闭包，即该闭包实在函数执行完成后才开始执行</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(completion: @escaping <span class="params">(<span class="number">_</span> result: [String])</span></span></span>-&gt;()) -&gt; ()  &#123;</div><div class="line">        <span class="comment">//将任务添加到队列，指定执行任务的函数，即，队列调度任务（block/闭包），以同步或者异步的方式执行</span></div><div class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"耗时操作\(Thread.current)"</span>)</div><div class="line">            </div><div class="line">            <span class="comment">//休眠</span></div><div class="line">            <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">1.0</span>)</div><div class="line">            </div><div class="line">            <span class="comment">//获取结果</span></div><div class="line">            <span class="keyword">let</span> json = [<span class="string">"头条"</span>,<span class="string">"八卦"</span>,<span class="string">"娱乐"</span>]</div><div class="line">            </div><div class="line">            <span class="comment">//主队列回调</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async(execute:&#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"主线程更新 UI\(Thread.current)"</span>)</div><div class="line">                </div><div class="line">                <span class="comment">//回调 -&gt; 执行闭包（通过参数传递）</span></div><div class="line"></div><div class="line">                <span class="comment">//传递异步获取的结果</span></div><div class="line">            </div><div class="line">                completion(json)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="尾随闭包"><a href="#尾随闭包" class="headerlink" title="尾随闭包"></a>尾随闭包</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">     </div><div class="line">        <span class="comment">//尾随闭包</span></div><div class="line">        <span class="comment">//如果函数的最后一个参数是闭包，函数参数可以提前结束，最后一个参数直接使用&#123;&#125;包装闭包的代码</span></div><div class="line">        <span class="comment">//</span></div><div class="line"><span class="comment">//        loadData(completion: (result: [String]) -&gt; ())</span></div><div class="line"><span class="comment">//        loadData &#123; (result) in</span></div><div class="line"><span class="comment">//            print(result)</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        </div><div class="line">        <span class="comment">//按照函数本身编写的结果</span></div><div class="line">        loadData(completion: &#123;(result) -&gt; () <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(result)</div><div class="line">        &#125;)</div><div class="line">  </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">()</span></span> -&gt; () &#123;</div><div class="line">        <span class="comment">//尾随闭包</span></div><div class="line">        <span class="type">DispatchQueue</span>.global().async &#123; </div><div class="line">            </div><div class="line">            <span class="comment">//嵌套的GCD Xcode不会改成尾随闭包</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async(execute: &#123; </div><div class="line">                </div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//尾随闭包</span></div><div class="line">        <span class="type">DispatchQueue</span>.main.async &#123; </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//@escaping逃逸闭包，即该闭包实在函数执行完成后才开始执行</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadData</span><span class="params">(completion: @escaping <span class="params">(<span class="number">_</span> result: [String])</span></span></span>-&gt;()) -&gt; ()  &#123;</div><div class="line">        <span class="comment">//将任务添加到队列，指定执行任务的函数，即，队列调度任务（block/闭包），以同步或者异步的方式执行</span></div><div class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"耗时操作\(Thread.current)"</span>)</div><div class="line">            </div><div class="line">            <span class="comment">//休眠</span></div><div class="line">            <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">1.0</span>)</div><div class="line">            </div><div class="line">            <span class="comment">//获取结果</span></div><div class="line">            <span class="keyword">let</span> json = [<span class="string">"头条"</span>,<span class="string">"八卦"</span>,<span class="string">"娱乐"</span>]</div><div class="line">            </div><div class="line">            <span class="comment">//主队列回调</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async(execute:&#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"主线程更新 UI\(Thread.current)"</span>)</div><div class="line">                </div><div class="line">                <span class="comment">//回调 -&gt; 执行闭包（通过参数传递）</span></div><div class="line"></div><div class="line">                <span class="comment">//传递异步获取的结果</span></div><div class="line">            </div><div class="line">                completion(json)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OC-的一个坑（作用于）"><a href="#OC-的一个坑（作用于）" class="headerlink" title="OC{}的一个坑（作用于）"></a>OC{}的一个坑（作用于）</h4><p>下面是错误的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> l = <span class="type">UILabel</span>()</div><div class="line"><span class="comment">//(1)参数结束&#123;尾随闭包&#125;</span></div><div class="line">view.addSubView(l)</div><div class="line"></div><div class="line"><span class="comment">//Extra argument in call</span></div><div class="line"><span class="comment">//调用了·额外·的参数</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> l = <span class="type">UILabel</span>()</div><div class="line">	view.addSubView(l)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3学习笔记（三）]]></title>
      <url>http://yoursite.com/2017/01/19/Swift3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="函数的基本使用"><a href="#函数的基本使用" class="headerlink" title="函数的基本使用"></a>函数的基本使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//调用方法</span></div><div class="line">        <span class="built_in">print</span>(sum(x: <span class="number">10</span>, y: <span class="number">40</span>))</div><div class="line">        </div><div class="line">        <span class="comment">//外部参数的调用</span></div><div class="line">        <span class="built_in">print</span>(sum1(num1: <span class="number">10</span>, num2: <span class="number">100</span>))</div><div class="line">        <span class="built_in">print</span>(sum2(<span class="number">10</span>, <span class="number">20</span>))</div><div class="line">        </div><div class="line">        <span class="comment">//测试默认值</span></div><div class="line">        <span class="built_in">print</span>(defaultValue())</div><div class="line">        <span class="built_in">print</span>(defaultValue(x: <span class="number">10</span>, y: <span class="number">20</span>))</div><div class="line">        <span class="built_in">print</span>(defaultValue(y: <span class="number">20</span>))</div><div class="line">        <span class="built_in">print</span>(defaultValue(x: <span class="number">10</span>))</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//无返回值</span></div><div class="line">        noReturn1()</div><div class="line">        noReturn2()</div><div class="line">        noReturn3()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">// MARK: - 函数定义</span></div><div class="line">    <span class="comment">/// 函数定义的格式：函数名(形参列表) -&gt; 返回值类型</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameters:</span></div><div class="line">    <span class="comment">///   - x: 形参1</span></div><div class="line">    <span class="comment">///   - y: 形参2</span></div><div class="line">    <span class="comment">/// - Returns: 返回值</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(x: Int , y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> x + y</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - 外部参数</span></div><div class="line">    <span class="comment">/// -外部参数就是在函数前面加上一个名字</span></div><div class="line">    <span class="comment">/// -外部参数不会影响函数内部的细节</span></div><div class="line">    <span class="comment">/// -外部参数会让外部调用方法的时候更加直观</span></div><div class="line">    <span class="comment">/// -外部参数如果使用_，在外部调用函数时，会忽略形参的名字</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sum2</span><span class="params">(<span class="number">_</span> x: Int,<span class="number">_</span> y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//在Swift中 _ 就是可以忽略任意不感兴趣的内容</span></div><div class="line">        <span class="comment">//从来没有被用到的数据可以用_来替代,如下面的i</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"hello"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> x+y</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sum1</span><span class="params">(num1 x: Int, num2 y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> x+y</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - 默认值</span></div><div class="line">    <span class="comment">//通过给参数设置默认值，在调用的时候，可以任意组合参数，然后没有赋值的参数就是用默认的函数中定义的值</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">defaultValue</span><span class="params">(x: Int = <span class="number">1</span>,y: Int = <span class="number">11</span>)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> x+y</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - 无返回值</span></div><div class="line">    <span class="comment">/*</span></div><div class="line">     主要用在闭包</div><div class="line">     - 直接省略</div><div class="line">     - （）</div><div class="line">     - void</div><div class="line">     */</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">noReturn1</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Void"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">noReturn2</span><span class="params">()</span></span> -&gt; () &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"()"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">noReturn3</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"省略"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3.0学习笔记（二）]]></title>
      <url>http://yoursite.com/2017/01/19/Swift3-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">arrayDemo</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="comment">//[Int]-&gt;表示存放的都是Int类型的数据</span></div><div class="line">        <span class="comment">//Swift中基本数据类型不需要包装</span></div><div class="line">        <span class="keyword">let</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">        <span class="built_in">print</span>(array1)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//结构体:不需要包装</span></div><div class="line">        <span class="keyword">let</span> p = <span class="type">CGPoint</span>(x: <span class="number">10</span>, y: <span class="number">20</span>)</div><div class="line">        <span class="comment">//[CGPoint]</span></div><div class="line">        <span class="keyword">let</span> array2 = [p];</div><div class="line">        <span class="built_in">print</span>(array2)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//混合数组：开发中几乎不用，因为数组是靠下标索引</span></div><div class="line">        <span class="comment">//如果数组中的类型不一致，自动推导的结果就是NSObject</span></div><div class="line">        <span class="comment">//Swfit 中还有一个[AnyObject] - &gt; 任意对象</span></div><div class="line">        <span class="comment">//Swift中一个类可以没有任何“父类”</span></div><div class="line">        <span class="comment">//AnyObject范围大于NSObject</span></div><div class="line">        </div><div class="line">        <span class="comment">/**在混合数组中CG结构体需要包装*/</span></div><div class="line">        <span class="comment">//let array3 = ["Feyddy",1,p]//报错：需要包装</span></div><div class="line">        <span class="comment">//现在必须要在后面加上 as [Any]（这个在Swift3.0的时候还不需要的）</span></div><div class="line">        <span class="keyword">let</span> array3 = [<span class="string">"Feyddy"</span>,<span class="number">1</span>,<span class="type">NSValue</span>(cgPoint: p)] <span class="keyword">as</span> [<span class="type">Any</span>]</div><div class="line">        <span class="built_in">print</span>(array3)</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//遍历数组</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">arrayTraverse</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> array = [<span class="string">"feyddy"</span>,<span class="string">"crise"</span>,<span class="string">"dirk"</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//1.按照下标遍历</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------按照下标遍历--------"</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;array.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="built_in">print</span>(array[i])</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//2.遍历元素</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------遍历元素--------"</span>)</div><div class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> array &#123;</div><div class="line">            <span class="built_in">print</span>(s)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//3.enum block 遍历，同时遍历下标和内容1</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------同时遍历下标和内容1--------"</span>)</div><div class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> array.enumerated() &#123;</div><div class="line">            <span class="comment">//元组</span></div><div class="line">            <span class="built_in">print</span>(e)</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(e.offset),\(e.element)"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//4.同时遍历下标和内容2</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------同时遍历下标和内容2--------"</span>)</div><div class="line">        <span class="comment">//n为下标，s为数组的元素，这两个可以随便写</span></div><div class="line">        <span class="keyword">for</span> (n,s) <span class="keyword">in</span> array.enumerated() &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(n),\(s)"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//5.反序遍历</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------反序遍历--------"</span>)</div><div class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> array.reversed() &#123;</div><div class="line">            <span class="built_in">print</span>(e)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//6.反序遍历索引和内容</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------反序遍历索引和内容--------"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------错误的反序遍历索引和内容--------"</span>)</div><div class="line">        <span class="keyword">for</span> (n,s) <span class="keyword">in</span> array.reversed().enumerated() &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(n):\(s)"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"--------正确的的反序遍历索引和内容--------"</span>)</div><div class="line">        <span class="keyword">for</span> (n,s) <span class="keyword">in</span> array.enumerated().reversed() &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(n):\(s)"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="数组的增删改和容量"><a href="#数组的增删改和容量" class="headerlink" title="数组的增删改和容量"></a>数组的增删改和容量</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//增删改</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">arrayOperation</span><span class="params">()</span></span> &#123;</div><div class="line">       </div><div class="line">       <span class="comment">//可变数组用var</span></div><div class="line">       <span class="keyword">var</span> array = [<span class="string">"feyddy"</span>,<span class="string">"crise"</span>,<span class="string">"dirk"</span>];</div><div class="line">       </div><div class="line">       <span class="comment">//追加元素</span></div><div class="line">       array.append(<span class="string">"dog"</span>)</div><div class="line">       <span class="built_in">print</span>(array)</div><div class="line">       </div><div class="line">       </div><div class="line">       <span class="comment">//修改,通过下标定位</span></div><div class="line">       array[<span class="number">1</span>] = <span class="string">"wang"</span></div><div class="line">       <span class="built_in">print</span>(array)</div><div class="line">       </div><div class="line">       <span class="comment">//数组越界：Index out of range</span></div><div class="line">       <span class="comment">//array[4] = "xxx"</span></div><div class="line"></div><div class="line">       </div><div class="line">       <span class="comment">//删除</span></div><div class="line">       array.remove(at: <span class="number">3</span>)</div><div class="line">       <span class="built_in">print</span>(array)</div><div class="line">       </div><div class="line">       </div><div class="line">       <span class="comment">//删除全部，并且保留空间</span></div><div class="line">       array.removeAll(keepingCapacity: <span class="literal">true</span>)</div><div class="line">       <span class="built_in">print</span>(<span class="string">"\(array)\(array.capacity)"</span>)</div><div class="line">       </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组的容量</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">arrayCapacity</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="comment">//定义一个数组，指定类型存放Int的数组</span></div><div class="line">        <span class="comment">//var array: [Int]</span></div><div class="line">        </div><div class="line">        <span class="comment">//给数组初始化</span></div><div class="line">        <span class="comment">//array = [Int]()</span></div><div class="line">        </div><div class="line">        <span class="comment">//以上两句代码可以合并成一句</span></div><div class="line">        <span class="keyword">var</span> array = [<span class="type">Int</span>]()</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"初始容量\(array.capacity)"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">8</span> &#123;</div><div class="line">            array.append(i)<span class="comment">//插入时如果容量不够了，容量就*2</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(array)容量\(array.capacity)"</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="数组的合并"><a href="#数组的合并" class="headerlink" title="数组的合并"></a>数组的合并</h4><p><strong>注意：</strong>要合并数组的两个数组内的元素的类型必须一致</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组的合并</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">arrayMerge</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> array = [<span class="string">"feyddy"</span>,<span class="string">"crise"</span>,<span class="string">"dirk"</span>];</div><div class="line">        <span class="keyword">let</span> array2 = [<span class="string">"linlin"</span>,<span class="string">"chenchen"</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//将array2的内容合并到array上</span></div><div class="line">        <span class="comment">//注意：要合并数组的两个数组内的元素的类型必须一致</span></div><div class="line">        array += array2</div><div class="line">        <span class="built_in">print</span>(array)</div><div class="line">        </div><div class="line">        <span class="comment">//如果要合并一个元素不一样数组</span></div><div class="line"><span class="comment">//        var array3: [NSObject] = ["feyddy" as NSObject,"crise" as NSObject,"dirk" as NSObject];</span></div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h4><h6 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字典的定义</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dictionaryDefine</span><span class="params">()</span></span>  &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//KEY:VALUE   -&gt;  [String:Any]</span></div><div class="line">        <span class="keyword">let</span> dict = [<span class="string">"name"</span>:<span class="string">"Feyddy"</span>,<span class="string">"age"</span>:<span class="number">25</span>] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>];</div><div class="line">        <span class="built_in">print</span>(dict)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//定义字典数组-提示  这种格式在开发中使用的最多</span></div><div class="line">        <span class="keyword">let</span> array = [</div><div class="line">            [<span class="string">"name"</span>:<span class="string">"Feyddy"</span>,</div><div class="line">            <span class="string">"age"</span>:<span class="number">25</span>,</div><div class="line">            <span class="string">"sex"</span>:<span class="string">"M"</span>],</div><div class="line">            [<span class="string">"name"</span>:<span class="string">"dirk"</span>,</div><div class="line">             <span class="string">"age"</span>:<span class="number">55</span>,</div><div class="line">             <span class="string">"sex"</span>:<span class="string">"M"</span>],</div><div class="line">            [<span class="string">"name"</span>:<span class="string">"Chen"</span>,</div><div class="line">             <span class="string">"age"</span>:<span class="number">18</span>,</div><div class="line">             <span class="string">"sex"</span>:<span class="string">"F"</span>],</div><div class="line">        ]</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(array)</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h6 id="字典的增删改"><a href="#字典的增删改" class="headerlink" title="字典的增删改"></a>字典的增删改</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字典的增删改</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dictionaryOperation</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//可变 var / 不可变 let</span></div><div class="line">        <span class="keyword">var</span> dict = [<span class="string">"name"</span>:<span class="string">"Feyddy"</span>,<span class="string">"age"</span>: <span class="number">25</span>] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//新增 - 如果key不存在就是新增</span></div><div class="line">        dict[<span class="string">"sex"</span>] = <span class="string">"M"</span></div><div class="line">        <span class="built_in">print</span>(dict)</div><div class="line">        </div><div class="line">        <span class="comment">//修改--字典中通过key取值的，key是唯一的</span></div><div class="line">        <span class="comment">//key存在就是修改</span></div><div class="line">        dict[<span class="string">"name"</span>] = <span class="string">"linlin"</span></div><div class="line">        <span class="built_in">print</span>(dict)</div><div class="line">        </div><div class="line">        <span class="comment">//删除 - 直接给定KEY</span></div><div class="line">        <span class="comment">//字典通过KEY来定位。KEY必须可以“hash 哈希” MD5一种</span></div><div class="line">        <span class="comment">//hash 就是将字符串变成唯一的“整数”，便于查找，提高字典的遍历速度</span></div><div class="line">        dict.removeValue(forKey: <span class="string">"age"</span>)</div><div class="line">        <span class="built_in">print</span>(dict)</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h6 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字典的遍历</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dictionaryTraverse</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> dict = [<span class="string">"name"</span>:<span class="string">"Feyddy"</span>,<span class="string">"age"</span>: <span class="number">25</span>,<span class="string">"sex"</span>:<span class="string">"M"</span>] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//元组形式</span></div><div class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> dict &#123;</div><div class="line">            <span class="comment">//(key:value)</span></div><div class="line">            <span class="built_in">print</span>(e)</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(e.key):\(e.value)"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/*</span></div><div class="line">         前面是key</div><div class="line">         后面是value</div><div class="line">         */</div><div class="line">        <span class="keyword">for</span> (key,value) <span class="keyword">in</span> dict &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(key):\(value)"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h6 id="字典的合并"><a href="#字典的合并" class="headerlink" title="字典的合并"></a>字典的合并</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字典的合并</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dictionaryMerge</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> dict = [<span class="string">"name"</span>:<span class="string">"Feyddy"</span>,<span class="string">"age"</span>: <span class="number">25</span>,<span class="string">"sex"</span>:<span class="string">"M"</span>] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> dict1 = [<span class="string">"title"</span>:<span class="string">"info"</span>]</div><div class="line">        </div><div class="line">        <span class="comment">//字典不能直接相加</span></div><div class="line">        <span class="comment">//遍历dict1 依次设置</span></div><div class="line">        <span class="comment">//如果key存在，直接修改，若不存在，直接添加</span></div><div class="line">        <span class="comment">//添加的地方时无序的</span></div><div class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> dict1 &#123;</div><div class="line">            dict[e.key] = dict1[e.key]</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(dict)</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Array </tag>
            
            <tag> Dictionary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift3.0学习笔记（一）]]></title>
      <url>http://yoursite.com/2017/01/18/Swift3-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="增加文档注释"><a href="#增加文档注释" class="headerlink" title="增加文档注释"></a>增加文档注释</h4><p>单行注释(///)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///单行注释形式</span></div></pre></td></tr></table></figure>
<p>多行注释(<code>/**/</code>)：能够自动识别匹配最近的<code>*/</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*多行注释外圈</span></div><div class="line">     <span class="comment">/*</span></div><div class="line">     多行注释里圈</div><div class="line">     */</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>文档内容解释注释(option+cmd+/)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;#Description#&gt;</span></div><div class="line">    <span class="comment">///</span></div><div class="line">    <span class="comment">/// - Parameters:</span></div><div class="line">    <span class="comment">///   - application: &lt;#application description#&gt;</span></div><div class="line">    <span class="comment">///   - launchOptions: &lt;#launchOptions description#&gt;</span></div><div class="line">    <span class="comment">/// - Returns: &lt;#return value description#&gt;</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="comment">// Override point for customization after application launch.</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="xcode8常用特性"><a href="#xcode8常用特性" class="headerlink" title="xcode8常用特性"></a>xcode8常用特性</h4><ul>
<li><p>颜色选择器的显示(color+回车)</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fbv50vmjjej30f60b476j.jpg" alt=""></p>
</li>
<li><p>图片选择插件</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fbv539br39j30fl02cdg7.jpg" alt=""></p>
</li>
<li><p>MARK标记</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fbv58pkgr7j30di05h3zq.jpg" alt=""></p>
</li>
<li><p>类似于OC中的警告</p>
<ul>
<li>TODO:</li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fbv5c9lyv0j30fh0awmyy.jpg" alt=""></p>
<p>​</p>
<ul>
<li>FIXME:</li>
</ul>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fbv5cjkyalj30en08ptaa.jpg" alt=""></p>
<p>​</p>
</li>
</ul>
<h4 id="Swift的常量与变量"><a href="#Swift的常量与变量" class="headerlink" title="Swift的常量与变量"></a>Swift的常量与变量</h4><p><code>let</code>定义常量，一旦定义为常量，将不能修改</p>
<p><code>var</code>定义变量，可以直接修改</p>
<p>变量常量的类型会根据等号右侧的代码推到对应类型</p>
<p><strong>在Swift中对于类型的要求是异常严格的，任何类型之间不允许直接运算，不会做默认的隐式转换，必须有程序员直接转换。</strong></p>
<p><strong>Swift中不存在基本数据类型，都是结构体。Int也是结构体</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">10</span></div><div class="line"><span class="keyword">let</span> y = <span class="number">10.5</span></div><div class="line"><span class="built_in">print</span>(x+y)<span class="comment">//报错</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(x + <span class="type">Int</span>(y))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//或者直接在定义的时候说明类型(极少使用，一般都是自动推导)</span></div><div class="line"><span class="keyword">let</span> x1: <span class="type">Double</span> = <span class="number">10.1</span></div></pre></td></tr></table></figure>
<h4 id="可选项-Optional"><a href="#可选项-Optional" class="headerlink" title="可选项(Optional)"></a>可选项(Optional)</h4><p><strong>我们在定义一个变量或者常量的时候，一定要记得先初始化</strong></p>
<p>原始的可选项定义</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x: <span class="type">Optional</span> = <span class="number">10</span></div></pre></td></tr></table></figure>
<p>简单的定义</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> y: <span class="type">Int</span>? = <span class="number">40</span><span class="comment">//定义y是一个可选的Int类型，可能为nil，也可能为一个整数</span></div></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">Optional</span>(<span class="number">10</span>)<span class="comment">//提示这是一个可选值</span></div></pre></td></tr></table></figure>
<p><strong>不同数据类型之间不能直接运算，如果为nil，那就不是任何的数据类型了，不能参与计算的</strong></p>
<p>强行解包:从可选值中强行获取对应的非空值，如果真的是nil，就会崩溃!</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(x!+y!)</div></pre></td></tr></table></figure>
<p>所以，每个程序猿必须对!负责。少用<code>!</code></p>
<h4 id="可选值对变量和常量的不同的影响"><a href="#可选值对变量和常量的不同的影响" class="headerlink" title="可选值对变量和常量的不同的影响"></a>可选值对变量和常量的不同的影响</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///定义一个y,，没有初始化</span></div><div class="line"><span class="keyword">let</span> y: <span class="type">Int</span>?</div><div class="line"></div><div class="line"><span class="comment">//给常量赋值，初始化的工作只能做一次</span></div><div class="line">y = <span class="number">20</span></div><div class="line"><span class="comment">//两次修改，会报错</span></div><div class="line"><span class="comment">//y = 30</span></div><div class="line"><span class="built_in">print</span>(y)</div><div class="line"></div><div class="line"><span class="comment">//var 的可选值默认为nil</span></div><div class="line"><span class="comment">//let 的可选值没有默认值</span></div><div class="line"><span class="keyword">var</span> x: <span class="type">Int</span>?</div><div class="line">x = <span class="number">100</span></div><div class="line">x = <span class="number">200</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(x)</div></pre></td></tr></table></figure>
<h4 id="简单的分支"><a href="#简单的分支" class="headerlink" title="简单的分支"></a>简单的分支</h4><p>Swift要求的就是:</p>
<ul>
<li>条件不需要()</li>
<li>语句必须有{}</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">10</span></div><div class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"大了"</span>)</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"小了"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="三目"><a href="#三目" class="headerlink" title="三目"></a>三目</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">3</span></div><div class="line">x &gt; <span class="number">5</span> ? <span class="built_in">print</span>(<span class="string">"大了"</span>) : <span class="built_in">print</span>(<span class="string">"小了"</span>)</div><div class="line"></div><div class="line"><span class="comment">//下面的()表示空执行，也就是什么都不做</span></div><div class="line">x &gt; <span class="number">5</span> ? <span class="built_in">print</span>(<span class="string">"大了"</span>) : ()</div></pre></td></tr></table></figure>
<p><strong>??的使用</strong></p>
<p>??其实是一个简单的三目运算符,也是对可选值解包的一种操作方式</p>
<ul>
<li>如果有值，使用值</li>
<li>如果没值，使用??后面的值替代</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x: <span class="type">Int</span>? = <span class="literal">nil</span></div><div class="line"><span class="keyword">let</span> y: <span class="type">Int</span>? = <span class="number">10</span></div><div class="line"><span class="built_in">print</span>((x ?? <span class="number">0</span>) + y)<span class="comment">//结果就是10</span></div></pre></td></tr></table></figure>
<p>缺点就是优先级比较低，所以在使用的时候一定要加上<code>()</code></p>
<h4 id="if-let-var的连用语法（判断值）"><a href="#if-let-var的连用语法（判断值）" class="headerlink" title="if let/var的连用语法（判断值）"></a>if let/var的连用语法（判断值）</h4><p><code>if let</code> 连用，判断对象的值是否为 nil，{}内一定有值，但是不可以修改值，可以直接使用，不需要解包</p>
<p><code>if var</code>连用， 判断对象的值是否为 nil，{}内一定有值，但是可以修改值，可以直接使用，不需要解包</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name: <span class="type">String</span>? = <span class="literal">nil</span></div><div class="line"><span class="keyword">let</span> age: <span class="type">Int</span>? = <span class="number">20</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">var</span> myName = name, <span class="keyword">let</span> myAge = age &#123;</div><div class="line"></div><div class="line"><span class="comment">//进入分支后，myName可以修改，myAge不可以修改，但是两者都一定有值，不需要解包</span></div><div class="line"><span class="comment">//myName和myAge的作用于都只在&#123;&#125;</span></div><div class="line">  <span class="built_in">print</span>(myName + <span class="type">String</span>(myAge))</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Feyddy"</span> + <span class="string">"10"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="guard-守护"><a href="#guard-守护" class="headerlink" title="guard(守护)"></a>guard(守护)</h4><p><code>guard let</code> 和 <code>if let</code>正好相反</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name: <span class="type">String</span>? = <span class="string">"Feyddy"</span></div><div class="line"><span class="keyword">let</span> age: <span class="type">Int</span>? = <span class="number">20</span></div><div class="line"></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> myName = name, <span class="keyword">let</span> myAge = age <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"姓名或年龄中必有一个为nil"</span>)</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">//代码执行至此，name和age一定有值</span></div><div class="line"><span class="comment">//通常判断是否有值，会做具体的逻辑实现</span></div><div class="line"><span class="comment">//如果用if let 凭空多了一层分支，guard let 正好减少分支</span></div></pre></td></tr></table></figure>
<h4 id="if-let和guard-let的命名技巧"><a href="#if-let和guard-let的命名技巧" class="headerlink" title="if let和guard let的命名技巧"></a>if let和guard let的命名技巧</h4><p>使用同名的变量接受值，在后续使用的都是非空值，不需要解包</p>
<p><strong>这个变量不能使用var在定义一次，否则会出现重复定义的错误，所以只有在函数里面传参数的时候用</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(name: String? , age: Int?)</span></span> &#123;</div><div class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> name = name ,<span class="keyword">let</span> age = age <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      <span class="built_in">print</span>(name + <span class="type">String</span>(age))</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="在OC中的常用写法"><a href="#在OC中的常用写法" class="headerlink" title="{}在OC中的常用写法"></a>{}在OC中的常用写法</h4><ul>
<li><p>{}为了限制作用域。里面可以定义一个和上面一样的变量名而不冲突。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 100, 200, 50)];</div><div class="line">label.backgroundColor = [UIColor orangeColor];</div><div class="line">[self.view addSubview:label];</div><div class="line"></div><div class="line">&#123;</div><div class="line">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 200, 200, 50)];</div><div class="line">    label.backgroundColor = [UIColor redColor];</div><div class="line">    [self.view addSubview:label];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<ul>
<li><p>{}包装代码，()表示执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">UILabel *myLabel = (&#123;</div><div class="line">       </div><div class="line">        UILabel *labels = [[UILabel alloc] initWithFrame:CGRectMake(0, 300, 200, 50)];</div><div class="line">        labels.text = @&quot;里面的&quot;;</div><div class="line">        labels.backgroundColor = [UIColor blueColor];</div><div class="line">        </div><div class="line">        labels.textAlignment = NSTextAlignmentCenter;</div><div class="line">        </div><div class="line">        //末尾的labels会给myLabel设置数值</div><div class="line">        labels;</div><div class="line">        </div><div class="line">&#125;);</div><div class="line">    </div><div class="line">[self.view addSubview:myLabel];</div></pre></td></tr></table></figure>
</li>
<li><p>工作中看到最多的就是UITableView</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">UITableView *myTableView = (&#123;</div><div class="line">        UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 350, 300, 100) style:UITableViewStylePlain];</div><div class="line">        </div><div class="line">        //...</div><div class="line">        </div><div class="line">        </div><div class="line">        tableView;</div><div class="line">    &#125;);</div><div class="line">    [self.view addSubview:myTableView];</div></pre></td></tr></table></figure>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>相比OC中的switch用法比较扩展，不再局限于整数</p>
<p><strong>swift中的switch特点：</strong></p>
<ul>
<li>可以对任意类型的值进行分支，不在局限在整数</li>
<li>一般不需要 break</li>
<li>如果多值，使用<code>,</code></li>
<li>所有的分支至少需要一条指令，如果什么都不干才使用<code>break</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demoSwitch</span><span class="params">(num: String)</span></span> &#123;</div><div class="line">        <span class="keyword">switch</span> num &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>:</div><div class="line">            <span class="keyword">let</span> score = <span class="string">"good"</span></div><div class="line">            <span class="built_in">print</span>(score)</div><div class="line">        <span class="keyword">case</span> <span class="string">"7"</span>: <span class="keyword">break</span><span class="comment">//此时的“7”这种情况不执行任何操作，但是至少有一条命令，➕break</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>case后面加上语句</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">whereDemo</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> point = <span class="type">CGPoint</span>(x: -<span class="number">10</span>, y: <span class="number">10</span>)</div><div class="line">    <span class="keyword">switch</span> point &#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> p <span class="keyword">where</span> p.x == <span class="number">0</span> &amp;&amp; p.y == <span class="number">0</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"原点"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> p <span class="keyword">where</span> p.x == <span class="number">0</span> :</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Y轴"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> p <span class="keyword">where</span> p.y == <span class="number">0</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"X轴"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> p <span class="keyword">where</span> <span class="built_in">abs</span>(p.x) == <span class="built_in">abs</span>(p.y):<span class="comment">//abs()函数为取绝对值</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"对角线"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"其他"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>Swift3.0取消了传统的for循环语法</p>
<ul>
<li>传统的for 在swift3.0中被取消</li>
<li>i++/++i 在swift3.0中被取消</li>
</ul>
<p><strong>Swift3.0对空格的要求比较严格</strong></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">forDemo</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    <span class="comment">//变量i 在[0,5] 循环</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">5</span> &#123;</div><div class="line">        <span class="built_in">print</span>(i)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"-----------------"</span>)</div><div class="line"></div><div class="line">    <span class="comment">//变量i 在[0,5) 循环</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">5</span> &#123;</div><div class="line">        <span class="built_in">print</span>(i)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">       <span class="built_in">print</span>(<span class="string">"-----------------"</span>)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//提示：范围定义是一个固定的格式</span></div><div class="line">    <span class="comment">//CountableRange</span></div><div class="line">    <span class="keyword">let</span> r1 = <span class="number">0</span>..&lt;<span class="number">10</span></div><div class="line">    <span class="built_in">print</span>(r1)</div><div class="line"></div><div class="line">    <span class="comment">//CountableClosedRange</span></div><div class="line">    <span class="keyword">let</span> r2 = <span class="number">0</span>...<span class="number">10</span></div><div class="line">    <span class="built_in">print</span>(r2)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="反序遍历"><a href="#反序遍历" class="headerlink" title="反序遍历"></a>反序遍历</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reversedDemo</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="number">10</span>).reversed() &#123;</div><div class="line">        <span class="built_in">print</span>(i)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字符串遍历和长度的三种方法"><a href="#字符串遍历和长度的三种方法" class="headerlink" title="字符串遍历和长度的三种方法"></a>字符串遍历和长度的三种方法</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串的遍历</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">characterDemo</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//NSString 不支持以下方式遍历</span></div><div class="line">        <span class="keyword">let</span> str: <span class="type">String</span> = <span class="string">"我叫Feyddy"</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> str.characters &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="built_in">c</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串的长度</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">characterLength</span><span class="params">()</span></span>  &#123;</div><div class="line">        <span class="keyword">let</span> str = <span class="string">"Hello world Feyddy 忠林"</span></div><div class="line">        </div><div class="line">        <span class="comment">//1.返回指定编码的对应的字节数量</span></div><div class="line">        <span class="comment">//UTF8 的编码(0~4个)，每个汉字3个字节</span></div><div class="line">        <span class="built_in">print</span>(str.lengthOfBytes(using: .utf8))</div><div class="line">        </div><div class="line">        <span class="comment">//2.字符串长度 - 返回字符的个数(推荐使用)</span></div><div class="line">        <span class="built_in">print</span>(str.characters.<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//3.使用 NSString 中转</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">         str as NSString</div><div class="line">         OC中的写法就是(FeyddyTableViewCell *)[tableView ...]</div><div class="line">         Swift中可以使用  '值' as ‘类型’ 转换</div><div class="line">         */</div><div class="line">        <span class="keyword">let</span> ocStr = str <span class="keyword">as</span> <span class="type">NSString</span></div><div class="line">        <span class="built_in">print</span>(ocStr.length)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="字符串的拼接和格式化"><a href="#字符串的拼接和格式化" class="headerlink" title="字符串的拼接和格式化"></a>字符串的拼接和格式化</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串的拼接</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">appendString</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> name = <span class="string">"Feyddy"</span></div><div class="line">        <span class="keyword">let</span> age = <span class="number">25</span></div><div class="line">        <span class="keyword">let</span> title: <span class="type">String</span>? = <span class="string">"Boss"</span></div><div class="line">        <span class="keyword">let</span> point = <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">100</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//\(变量/常量)</span></div><div class="line">        <span class="comment">//拼接字符串需要注意 可选项(Optional)</span></div><div class="line">        <span class="comment">//OC中拼接point的时候:NSStringFromCGPoint(&lt;#CGPoint point#&gt;)</span></div><div class="line">        <span class="keyword">let</span> str = <span class="string">"\(name)\(age)\(title ?? "</span><span class="string">")\(point)"</span></div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(str)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//字符串的格式化</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">formatString</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> h = <span class="number">10</span></div><div class="line">        <span class="keyword">let</span> m = <span class="number">11</span></div><div class="line">        <span class="keyword">let</span> s = <span class="number">35</span></div><div class="line">        </div><div class="line">        <span class="comment">//使用格式字符串格式化</span></div><div class="line">        <span class="keyword">let</span> dataStr = <span class="type">String</span>(format: <span class="string">"%02d:%02d:%02d"</span>, h,m,s)</div><div class="line">        <span class="built_in">print</span>(dataStr)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="字符串的子串"><a href="#字符串的子串" class="headerlink" title="字符串的子串"></a>字符串的子串</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字符串的子串</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subString</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">//建议：一般使用NSString作为中转，因为Swift取子串的方法一直在改</span></div><div class="line">        <span class="comment">//更加容易理解</span></div><div class="line">        <span class="keyword">let</span> str = <span class="string">"我们一起进步"</span></div><div class="line">        </div><div class="line">        <span class="comment">//1.NSString</span></div><div class="line">        <span class="keyword">let</span> ocString = str <span class="keyword">as</span> <span class="type">NSString</span></div><div class="line">        <span class="keyword">let</span> s1 = ocString.substring(with: <span class="type">NSMakeRange</span>(<span class="number">1</span>, <span class="number">3</span>))<span class="comment">//从索引为1的位置开始往后取3个数</span></div><div class="line">        <span class="built_in">print</span>(s1)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">//2.String 的3.0 方法</span></div><div class="line">        <span class="comment">//Index</span></div><div class="line">        <span class="comment">//str.startIndex position = 0</span></div><div class="line">        <span class="comment">//str.endIndex position = str.length</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> r1 = str.substring(to: <span class="string">"一起"</span>.endIndex)</div><div class="line">        <span class="comment">//let r11 = str.substring(to: "asd".endIndex)</span></div><div class="line">        <span class="built_in">print</span>(r1)<span class="comment">//取的是“一起”（不包括“一起”）前面的所有的值，这里的“一起”和str里面的没有任何关系</span></div><div class="line">        </div><div class="line">        <span class="comment">//let r2 = str.substring(from: "一起".startIndex)</span></div><div class="line">        <span class="keyword">let</span> r22 = str.substring(from: <span class="string">"abc"</span>.startIndex)</div><div class="line">        <span class="built_in">print</span>(r22)<span class="comment">//取的是str的开始位置为(String).startIndex == 0之后的所有的值</span></div><div class="line"></div><div class="line">        </div><div class="line">        <span class="comment">//3.取范围</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> range = str.range(of: <span class="string">"一起"</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"没有找到字符串"</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//一定找到字符串</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"---------"</span>)</div><div class="line">        <span class="built_in">print</span>(range)</div><div class="line">        <span class="built_in">print</span>(str.substring(with: range))</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NSString </tag>
            
            <tag> 注释 </tag>
            
            <tag> MARK </tag>
            
            <tag> TODO </tag>
            
            <tag> FIXME </tag>
            
            <tag> 常量 </tag>
            
            <tag> 变量 </tag>
            
            <tag> 可选型 </tag>
            
            <tag> 解包 </tag>
            
            <tag> 三目 </tag>
            
            <tag> guard </tag>
            
            <tag> if let </tag>
            
            <tag> switch </tag>
            
            <tag> for </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络编程-NSURLConnection基本用法介绍]]></title>
      <url>http://yoursite.com/2017/01/17/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-NSURLConnection%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h3 id="NSURLConnection的基本使用"><a href="#NSURLConnection的基本使用" class="headerlink" title="NSURLConnection的基本使用"></a>NSURLConnection的基本使用</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>NSURLConnection 这个名字，实际上是指代的 Foundation 框架的 URL 加载系统中一系列有关联的组件：NSURLRequest、NSURLResponse、NSURLProtocol、 NSURLCache、 NSHTTPCookieStorage、NSURLCredentialStorage 以及同名类 NSURLConnection。</p>
<h4 id="NSURLConnection常用的类"><a href="#NSURLConnection常用的类" class="headerlink" title="NSURLConnection常用的类"></a><strong>NSURLConnection常用的类</strong></h4><p>1、NSURL：根据url生成的请求地址</p>
<p>2、NSURLRequest：封装的一个请求，携带发送给服务器的全部数据，里面包含一个NSURL对象，请求方法，请求头，请求体等等。。</p>
<p>3、NSMutableURLRequest：这个是NSURLRequest的子类，通过名字我们可以看出这是一个可变的对象，我们可以在这里自定义设置发送的服务器的全部数据（超市等待时间、请求方法、请求体、请求头）</p>
<p>4、NSURLResponse：服务的响应类，和NSURLRequest对象，包含服务返回的响应头部数据</p>
<p>5、NSURLConnection：负责发送请求，建立客户端和服务器的连接。发送NSURLRequest的数据给服务器，并收集来自服务器的响应头部数据NSURLResponse或者NSData</p>
<a id="more"></a>
<h4 id="NSURLConnection使用步骤"><a href="#NSURLConnection使用步骤" class="headerlink" title="NSURLConnection使用步骤"></a><strong>NSURLConnection使用步骤</strong></h4><p>1、根据url创建一个NSURL对象</p>
<p>2、根据创建的NSURL创建一个NSURLRequest对象，创建请求对象（此对象内容全部都是默认值，如：请求方法默认是GET），如果想要自定数据则创建NSMutableURLRequest对象</p>
<p>3、最后使用NSURLConnection发送创建好的NSURLRequest或者NSMutableURLRequest对象，与服务器建立链接</p>
<h6 id="非代理模式"><a href="#非代理模式" class="headerlink" title="非代理模式"></a><strong>非代理模式</strong></h6><p>非代理模式中有提供了两个方法同步请求和异步请求(block实现)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">    //1.设置访问的url地址</div><div class="line">    self.imageUrl = @&quot;http://7xt5rm.com2.z0.glb.clouddn.com/picjumbo.com_download.jpg&quot;;</div><div class="line">    //根据url生成的NSURL请求地址</div><div class="line">    NSURL *URL = [NSURL URLWithString:self.imageUrl];</div><div class="line">    //2.创建请求对象(NSMutableURLRequest)</div><div class="line">    self.request = [NSMutableURLRequest requestWithURL:URL];</div><div class="line"></div><div class="line">    //3.设置请求相关的信息</div><div class="line">    //设置请求方式，默认是GET请求</div><div class="line">    request.HTTPMethod = @&quot;GET&quot;;</div><div class="line">    //设置请求超时时间</div><div class="line">    request.timeoutInterval = 60;</div><div class="line"></div><div class="line">    //设置请求头</div><div class="line">    //request.allHTTPHeaderFields = @&#123;</div><div class="line">                                    </div><div class="line">    //                               &#125;;</div><div class="line">    //如果之前的key被设置过，则此方法会用新值覆盖旧值。</div><div class="line">    [request setValue:@&quot;User_Agent&quot; forHTTPHeaderField:@&quot;safari&quot;];</div><div class="line">    //如果之前的key被设置过，则此方法会将新值附加在旧值后，并用合适的符号分隔</div><div class="line">    //[request addValue:&lt;#(NSString *)#&gt; forHTTPHeaderField:&lt;#(NSString *)#&gt;];</div><div class="line">    //设置请求体(get方法没有)</div><div class="line"></div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">    //发送同步请求 同步请求在主线程中执行 会一直在等待服务器返回数据，会阻塞主线程的执行，如果服务器没有返回数据，那么在主线程UI会卡住不能继续执行操作</div><div class="line">    //不建议这么做</div><div class="line">    //4.构造NSURLConnection，发送请求</div><div class="line">    NSURLResponse *response = nil;</div><div class="line">    NSError *error = nil;</div><div class="line">    NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error];</div><div class="line"></div><div class="line">    //5.获取响应头信息</div><div class="line">    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;</div><div class="line">    </div><div class="line">    //获取状态码</div><div class="line">    NSInteger statusCode = httpResponse.statusCode;</div><div class="line">    NSLog(@&quot;状态码:%li&quot;, statusCode);</div><div class="line">    </div><div class="line">    //响应头</div><div class="line">    NSLog(@&quot;响应头:%@&quot;, httpResponse.allHeaderFields);</div><div class="line">    </div><div class="line">    </div><div class="line">    //6.获取响应数据信息</div><div class="line">    if (data != nil) &#123;</div><div class="line">        NSString *jsonString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</div><div class="line">        _textView.text = jsonString;</div><div class="line">        //JSON解析</div><div class="line">        NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];</div><div class="line">        NSLog(@&quot;dic:%@&quot;, dic);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NSLog(@&quot;data length = %lu&quot;,(unsigned long)data.length);</div><div class="line"></div><div class="line">    ------------------------------------------------------------------</div><div class="line"></div><div class="line">    //发送异步请求 </div><div class="line">      </div><div class="line">      </div><div class="line">    //3.设置请求体：POST请求的请求参数是放在请求体中的。</div><div class="line">    </div><div class="line">    NSString *paraText = @&quot;cinema_id=1533&quot;;</div><div class="line">    </div><div class="line">    request.HTTPBody = [paraText dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">    </div><div class="line">    //设置压缩策略</div><div class="line">    [request setValue:@&quot;gzip&quot; forHTTPHeaderField:@&quot;Accept-Encoding&quot;];</div><div class="line">    </div><div class="line">    //缓存策略</div><div class="line">    request.cachePolicy = NSURLRequestReturnCacheDataElseLoad;</div><div class="line"></div><div class="line"></div><div class="line">    //异步请求需要一个队列来负责回调代码块的执行，当获取到返回数据是，会在这个线程队列中执行代码块，这里我们使用主队列，</div><div class="line">    NSOperationQueue *queue=[NSOperationQueue mainQueue];</div><div class="line">    //异步请求传入一个^(NSURLResponse *response,NSData *data, NSError *connectionError)block代码块，当请求数据返回时，执行此代码块，此代码块有三个参数，respons响应头 data返回数据 connectionError错误代码</div><div class="line">    [NSURLConnection sendAsynchronousRequest:self.request queue:queue completionHandler:^(NSURLResponse *response,NSData *data, NSError *connectionError)&#123;</div><div class="line">       NSLog(@&quot;response = %@&quot;,response);</div><div class="line">       NSLog(@&quot;data = %@&quot;,data);</div><div class="line">       NSLog(@&quot;error = %@&quot;,connectionError);</div><div class="line">       if (connectionError) &#123;</div><div class="line">            return;</div><div class="line">        &#125;        </div><div class="line">        NSString *jsonString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</div><div class="line">        </div><div class="line">        //回到主线程更新UI.</div><div class="line">        dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">            _textView.text = jsonString;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;];</div><div class="line"></div><div class="line"></div><div class="line">//5.如何监听网络传输的进度，使用另一种发送异步请求的方式</div><div class="line">    //构建一个connection对象</div><div class="line">    NSURLConnection *connection = [NSURLConnection connectionWithRequest:request delegate:self];</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    //利用代理对象的协议方法来监听网络传输进度,所有的协议方法是在主线程被回调的，但是网络请求的过程是在多线程中处理的。</div></pre></td></tr></table></figure>
<h6 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a><strong>代理模式</strong></h6><p>使用代理模式需要实现NSURLConnectionDataDelegate协议，此协议提供了几个代理方法，涵盖了请求交互的几个步骤</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#pragma mark - NSURLConnection delegate</div><div class="line"></div><div class="line">//网络请求失败会调用的协议方法</div><div class="line">- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;网络请求失败：%@&quot;, error);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//获取到响应头时会调用的协议方法</div><div class="line">- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response &#123;</div><div class="line">    </div><div class="line">    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;</div><div class="line">    </div><div class="line">    //获取状态码</div><div class="line">    NSInteger statusCode = httpResponse.statusCode;</div><div class="line">    NSLog(@&quot;状态码:%li&quot;, statusCode);</div><div class="line">    </div><div class="line">    //响应头</div><div class="line">    NSLog(@&quot;响应头:%@&quot;, httpResponse.allHeaderFields);</div><div class="line">    </div><div class="line">    //定义NSData用来接收数据包</div><div class="line">     _receivedData = [[NSMutableData alloc] init];</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//接收数据时会调用的协议方法，此方法可能被调用多次</div><div class="line">- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data &#123;</div><div class="line">    </div><div class="line">    //将每次接收到的数据包附加在_receivedData后</div><div class="line">    [_receivedData appendData:data];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//接收数据完毕时会被调用的协议方法</div><div class="line">- (void)connectionDidFinishLoading:(NSURLConnection *)connection &#123;</div><div class="line">    //将接收到的所有数据转化为NSString</div><div class="line">    </div><div class="line">    NSString *jsonString = [[NSString alloc] initWithData:_receivedData encoding:NSUTF8StringEncoding];</div><div class="line">    </div><div class="line">    _textView.text = jsonString;</div><div class="line"></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//上传文件时调用的协议方法</div><div class="line">- (void)connection:(NSURLConnection *)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite &#123;</div><div class="line">    </div><div class="line">//    bytesWritten：本次上传数据字节数</div><div class="line">//    totalBytesWritten:累加上传数据字节数</div><div class="line">//    totalBytesExpectedToWrite :上传文件总字节数</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="音频下载"><a href="#音频下载" class="headerlink" title="音频下载"></a>音频下载</h4><p>接收500KB的数据就写入文件，释放其所占内存，以达到节约内存的目的。</p>
<p>ViewController.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface ViewController : UIViewController</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *progressLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UIProgressView *progressView;</div><div class="line">- (IBAction)startDownload:(UIButton *)sender;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;NSURLConnectionDelegate,NSURLConnectionDataDelegate&gt;</div><div class="line">&#123;</div><div class="line">    double _totalLength;//文件大小</div><div class="line">    double _receivedLength;//累加接受的数据的大小</div><div class="line">    NSMutableData *_totalData;//保存下载数据</div><div class="line">    BOOL _isLoading;//文件是否正在下载</div><div class="line">    NSString *_path;//下载文件的路径</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    _isLoading = NO;</div><div class="line">&#125;</div><div class="line">- (IBAction)startLoad:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    if (!_isLoading) &#123;</div><div class="line">        </div><div class="line">        //构造URL</div><div class="line">        NSURL *url = [NSURL URLWithString:@&quot;http://ws.stream.qqmusic.qq.com/59077847.m4a?continfo=73820346915A0B48DECCA0B4538EBAE8D0A505A652637707&amp;vkey=6601BF6508BEFF1A0B01887E58B6B38F63DB66AB2F16AFC2BB3510F0D979BADCC4F156907B95311B963170DFDDE231C33AEC78F6447259D9&amp;guid=beebe00086eb6ea85ed23db8d2d97e12f0214a04&amp;fromtag=53&amp;uin=837223065&quot;];</div><div class="line">        </div><div class="line">        //构造request</div><div class="line">        NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];</div><div class="line">        </div><div class="line">        //发送异步网络请求</div><div class="line">        [NSURLConnection connectionWithRequest:request delegate:self];</div><div class="line">        _isLoading = YES;</div><div class="line">        </div><div class="line">        //创建空文件夹来保存下载下来的数据</div><div class="line">        </div><div class="line">        //设置文件名</div><div class="line">        NSString *file = @&quot;白龙马.mp3&quot;;</div><div class="line">        //设置文件路径</div><div class="line">        _path = [NSHomeDirectory() stringByAppendingFormat:@&quot;/Documents/%@&quot;,file];</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;,_path);</div><div class="line">        </div><div class="line">        //创建空文件夹</div><div class="line">        [[NSFileManager defaultManager]createFileAtPath:_path contents:nil attributes:nil];</div><div class="line">        </div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"></div><div class="line">//把数据写入文件并到文件的末尾</div><div class="line">-(void)addFile:(NSData *)data</div><div class="line">&#123;</div><div class="line">    if (data.length ==0 || _path.length == 0) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //创建文件句柄</div><div class="line">    NSFileHandle *fileHandle = [NSFileHandle fileHandleForWritingAtPath:_path];</div><div class="line">    </div><div class="line">    //把文件位置放到文件最后</div><div class="line">    [fileHandle seekToEndOfFile];</div><div class="line">    </div><div class="line">    //写入数据</div><div class="line">    [fileHandle writeData:data];</div><div class="line">    </div><div class="line">    //关闭文件</div><div class="line">    [fileHandle closeFile];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - NSURLConnectionDelegate</div><div class="line"></div><div class="line">-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response</div><div class="line">&#123;</div><div class="line">    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;</div><div class="line">    </div><div class="line">    NSDictionary *fields = httpResponse.allHeaderFields;</div><div class="line">    </div><div class="line">    //获取下载文件大小</div><div class="line">    NSNumber *length = fields[@&quot;content-Length&quot;];</div><div class="line">    </div><div class="line">    _totalLength = [length doubleValue];</div><div class="line">    </div><div class="line">    _receivedLength = 0;//清零</div><div class="line">    </div><div class="line">    _totalData = [[NSMutableData alloc]init];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    [_totalData appendData:data];</div><div class="line">    </div><div class="line">    //通过当前下载的文件的大小来刷新显示</div><div class="line">    _receivedLength += data.length;</div><div class="line">    double progress = _receivedLength / _totalLength;</div><div class="line">    </div><div class="line">    //刷新UI</div><div class="line">    self.loadLabel.text = [NSString stringWithFormat:@&quot;%.2f%%&quot;,progress*100];</div><div class="line">    </div><div class="line">    self.progressView.progress = progress;</div><div class="line">    </div><div class="line">    //当缓冲的数据超过500KB时，写入数据</div><div class="line">    if (_totalData.length &gt; 500 * 1024) &#123;</div><div class="line">        [self addFile:_totalData];</div><div class="line">        </div><div class="line">        //释放内存</div><div class="line">        _totalData.data = nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)connectionDidFinishLoading:(NSURLConnection *)connection</div><div class="line">&#123;</div><div class="line">    //下载完后将文件保存在本地文件夹中 </div><div class="line">    [self addFile:_totalData];</div><div class="line">    </div><div class="line">    //释放内存</div><div class="line">    _totalData.data = nil;</div><div class="line">    </div><div class="line">    self.loadLabel.text = @&quot;Succeese&quot;;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h4><p>有时候数据文件比较大，我们一次不一定能够全部下载，如果之前下载了一部分，之后我们又要下载的话，在重头开始有点不太合适，这时候我们应该如何做呢。。</p>
<p>现在的下载一般是用<code>http</code>协议，<code>http</code>协议的头部有个字段<code>Range</code>，可以满足我们的需求。</p>
<p><code>Range</code>用于请求头中，指定第一个字节的位置和最后一个字节的位置，一般格式：</p>
<p><code>Range:(unit=first byte pos)-[last byte pos]</code></p>
<p>当我们暂停下载的时候我们可以在代理方法<code>- (void)connection:(NSURLConnection *)connection didReceiveData:(nonnull NSData *)data</code>中记录已下载数据的大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)connection:(NSURLConnection *)connection didReceiveData:(nonnull NSData *)data&#123;</div><div class="line">            NSLog(@&quot;接受数据中。。。。。%lu&quot;,(unsigned long)data.length);</div><div class="line">            //要把每一次接收到的数据拼接起来</div><div class="line">        [self.imageData appendData:data];</div><div class="line">        //记录已下载数据的大小</div><div class="line">        range = range + data.length;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>然后在再次下载的时候设置<code>HTTP</code>的<code>Range</code>头部,注意此时<strong>request需要是NSMutableURLRequest对象</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> //设置请求数据范围</div><div class="line">NSString *rangeValue = [NSString stringWithFormat:@&quot;bytes=%llu-&quot;, range];</div><div class="line">[self.request setValue:rangeValue forHTTPHeaderField:@&quot;Range&quot;];</div><div class="line">[self.request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];</div><div class="line">self.connection = [NSURLConnection connectionWithRequest:self.request delegate:self];</div></pre></td></tr></table></figure>
<p>下面做个完整的小demo</p>
<p>需求如下：</p>
<ol>
<li><p>内存优化</p>
<p>当下载数据量达到500KB时，就写入文件，释放内存。</p>
<p>(1)创建空文件保存下载数据。</p>
<p>(2)当下载数据量达到500K时，把数据附加到文件末尾</p>
</li>
</ol>
<ol>
<li><p>断点续传</p>
<p>（1）可以暂停下载，暂停下载时，客户端要记载下载的暂停位置，记录在本地的文件中。</p>
<p>（2）程序退出后，再次进入到此程序中，仍然能从上次下载的暂停位置开始下载。</p>
<p>（3）安全文件操作思想：一个目标目录，一个临时目录，当文件下载未完成时，保存临时文件在临时目录，直到文件下载完成，把此下载完成的临时文件剪切到目标目录。</p>
<p>目标目录：/Documents</p>
<p>临时目录：/Documents/tmp</p>
<p>（4）客户端通过设置请求头来通知服务器继续下载的起始位置</p>
<p>Range:bytes=0-499 表示下载头500个字节</p>
<p>Range:bytes=500-999 表示下载第二个500个字节</p>
<p>Range:bytes=-500 表示下载最后一个500个字节</p>
<p>Range:bytes=500- 表示下载500字节以后内容</p>
<p>Range:bytes=0-0,-1 表示下载第一个字节和最后一个字节</p>
</li>
</ol>
<p>ViewController.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface ViewController : UIViewController &lt;NSURLConnectionDelegate, NSURLConnectionDataDelegate&gt;</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *progressLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UIProgressView *progressView;</div><div class="line">- (IBAction)startDownload:(UIButton *)sender;</div><div class="line">- (IBAction)cancelDownload:(UIButton *)sender;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#define  kReceivedTotal @&quot;receivedTotal&quot;</div><div class="line">#define kTotal @&quot;total&quot;</div><div class="line">@interface ViewController () &#123;</div><div class="line">    BOOL _isDownLoading; //是否正在下载</div><div class="line">    double _totalLength; //文件大小</div><div class="line">    double _receivedLength; //累加接收的数据包大小</div><div class="line">    NSMutableData *_data; //保存下载数据</div><div class="line">    NSString *_filePath; //临时文件的路径</div><div class="line">    </div><div class="line">    //全局连接对象，用它来取消下载</div><div class="line">    NSURLConnection *_connection;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    //读取本地化的plist文件，获取已下载数据量和文件总大小</div><div class="line">    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</div><div class="line">    </div><div class="line">//    NSLog(@&quot;userDefault:%@&quot;,userDefault);</div><div class="line">    </div><div class="line">    _receivedLength = [[userDefault objectForKey:kReceivedTotal] doubleValue];</div><div class="line">    _totalLength = [[userDefault objectForKey:kTotal] doubleValue];</div><div class="line">    </div><div class="line">    if (_totalLength &gt; 0) &#123;</div><div class="line">        double progress = _receivedLength / _totalLength;</div><div class="line">        _progressLabel.text = [NSString stringWithFormat:@&quot;%.2f%%&quot;, progress * 100];</div><div class="line">        _progressView.progress = progress;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)startDownload:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    if (!_isDownLoading) &#123;</div><div class="line">        </div><div class="line">        //构造URL</div><div class="line">        NSURL *url = [NSURL URLWithString:@&quot;http://music.baidu.com/data/music/file?link=http://yinyueshiting.baidu.com/data2/music/134371896/12313247982800128.mp3?xcode=ffec71a6b8c89b0a0c0d8753917afb85&amp;song_id=123132479&quot;];</div><div class="line">        </div><div class="line">        //构造reuqest</div><div class="line">        NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];</div><div class="line">        </div><div class="line">        //通过http下载请求头来设置继续下载的位置</div><div class="line">        NSString *value = [NSString stringWithFormat:@&quot;bytes=%i-&quot;, (int)_receivedLength];</div><div class="line"></div><div class="line">        [request setValue:value forHTTPHeaderField:@&quot;Range&quot;];</div><div class="line">        </div><div class="line">        NSLog(@&quot;继续下载:%@&quot;, request.allHTTPHeaderFields);</div><div class="line">        </div><div class="line">        //发送异步网络请求</div><div class="line">        _connection = [NSURLConnection connectionWithRequest:request delegate:self];</div><div class="line">        </div><div class="line">        //此时正在下载</div><div class="line">        _isDownLoading = YES;</div><div class="line">        </div><div class="line">        //创建临时目录</div><div class="line">        _filePath = [NSHomeDirectory() stringByAppendingFormat:@&quot;/Documents/tmp/%@&quot;, @&quot;file.mp3&quot;];</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;, _filePath);</div><div class="line">        //判断临时文件是否存在，如果不存在则创建</div><div class="line">        if (![[NSFileManager defaultManager] fileExistsAtPath:_filePath]) &#123;</div><div class="line">            //先创建临时文件夹</div><div class="line">            NSString *dirPath = [NSHomeDirectory() stringByAppendingFormat:@&quot;/Documents/tmp&quot;];</div><div class="line">            </div><div class="line">            [[NSFileManager defaultManager] createDirectoryAtPath:dirPath withIntermediateDirectories:YES attributes:nil error:nil];</div><div class="line">            //创建空的临时文件</div><div class="line">            [[NSFileManager defaultManager] createFileAtPath:_filePath contents:nil attributes:nil];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)cancelDownload:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    //取消下载</div><div class="line">    [_connection cancel];</div><div class="line">    </div><div class="line">    //把数据包存入文件</div><div class="line">    [self appendFileData:_data];</div><div class="line">    //释放内存</div><div class="line">    _data.data = nil;</div><div class="line">    </div><div class="line">    [_data setData:nil];</div><div class="line">    </div><div class="line">    _isDownLoading = NO;</div><div class="line">    </div><div class="line">    //暂停时，保存已下载数据量和文件总数据量到本地，保证程序退出后下次进入仍能实现断点续传</div><div class="line">    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</div><div class="line">    [userDefault setObject:@(_receivedLength) forKey:kReceivedTotal];</div><div class="line">    [userDefault setObject:@(_totalLength) forKey:kTotal];</div><div class="line"></div><div class="line">    //把数据同步写入到plist文件</div><div class="line">    [userDefault synchronize];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//封装把数据写入文件，附加到文件的末尾的方法</div><div class="line">- (void)appendFileData:(NSData *)data &#123;</div><div class="line">    </div><div class="line">    if (data.length == 0 || _filePath.length == 0 ) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //(1)创建文件句柄</div><div class="line">    NSFileHandle *fileHandle = [NSFileHandle fileHandleForWritingAtPath:_filePath];</div><div class="line">    </div><div class="line">    //（2）把文件位置指针定位到末尾</div><div class="line">    [fileHandle seekToEndOfFile];</div><div class="line">    </div><div class="line">    //（3）写入数据</div><div class="line">    [fileHandle writeData:data];</div><div class="line">    </div><div class="line">    //(4)关闭文件</div><div class="line">    [fileHandle closeFile];</div><div class="line">    </div><div class="line">&#125;</div><div class="line">#pragma mark - NSURLConnection delegate</div><div class="line"></div><div class="line">- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response &#123;</div><div class="line">    </div><div class="line">    //获取要下载的文件的大小</div><div class="line">    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;</div><div class="line">    NSDictionary *fields = httpResponse.allHeaderFields;</div><div class="line">    </div><div class="line">    //总大小的获取仅计算一次，后面断点续传不需要计算</div><div class="line">    if (_totalLength == 0) &#123;</div><div class="line">        </div><div class="line">        NSNumber *length = fields[@&quot;Content-Length&quot;];</div><div class="line">        </div><div class="line">        _totalLength = [length doubleValue];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    //创建NSData来保存下载的数据</div><div class="line">    _data = [[NSMutableData alloc] init];</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data &#123;</div><div class="line">    </div><div class="line">    [_data appendData:data];</div><div class="line">    </div><div class="line">    //根据当前下载的数据包大小来刷新进度条和Label的显示</div><div class="line">    //double progress = _data.length / _totalLength;</div><div class="line">    _receivedLength += data.length;</div><div class="line">    </div><div class="line">    double progress = _receivedLength / _totalLength;</div><div class="line">    _progressLabel.text = [NSString stringWithFormat:@&quot;%.2f%%&quot;, progress * 100];</div><div class="line">    _progressView.progress = progress;</div><div class="line">    </div><div class="line">    //当缓冲数据包超过500K时，则写入文件</div><div class="line">    if (_data.length &gt; 500 * 1024) &#123;</div><div class="line">        </div><div class="line">        [self appendFileData:_data];</div><div class="line">        </div><div class="line">        //释放内存</div><div class="line">        [_data setData:nil];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)connectionDidFinishLoading:(NSURLConnection *)connection &#123;</div><div class="line">    </div><div class="line">    //下载完成</div><div class="line">    _isDownLoading = NO;</div><div class="line">    </div><div class="line">    [self appendFileData:_data];</div><div class="line">    //释放内存</div><div class="line">    _data.data = nil;</div><div class="line">    </div><div class="line">    self.progressLabel.text = @&quot;下载完成&quot;;</div><div class="line">    </div><div class="line">    //将下载完成的文件从临时目录剪切到目录目录</div><div class="line">    NSFileManager *manager = [NSFileManager defaultManager];</div><div class="line">    </div><div class="line">    //确定目录文件路径</div><div class="line">    NSString *targetFilePath = [NSHomeDirectory() stringByAppendingFormat:@&quot;/Documents/%@&quot;, @&quot;file.mp3&quot;];</div><div class="line">    </div><div class="line">    //判断目标文件是否存在，如果存在把旧文件删除，准备剪切操作</div><div class="line">    if ([manager fileExistsAtPath:targetFilePath]) &#123;</div><div class="line">        [manager removeItemAtPath:targetFilePath error:nil];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //剪切方法的限制：不能把已存在文件覆盖，如果此文件存在，在剪切之前需要先删除</div><div class="line">    [manager moveItemAtPath:_filePath toPath:targetFilePath error:nil];</div><div class="line">    </div><div class="line">    //下载完成时，保存已下载数据量和文件总数据量到本地</div><div class="line">    NSUserDefaults *userDefault = [NSUserDefaults standardUserDefaults];</div><div class="line">    [userDefault setObject:@(_receivedLength) forKey:kReceivedTotal];</div><div class="line">    [userDefault setObject:@(_totalLength) forKey:kTotal];</div><div class="line">    </div><div class="line">    //把数据同步写入到plist文件</div><div class="line">    [userDefault synchronize];</div><div class="line">    </div><div class="line">    //下载完成后把已下载数据量和文件总大小清零。</div><div class="line">    _receivedLength = 0;</div><div class="line">    _totalLength = 0;  </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>关于NSURLConnection的使用到这里也就结束，这里只是简单的介绍了NSURLConnection的使用，其实NSURLConnection的使用还有许多的使用细节，更深入的研究可以参考相应的文档，这里只是抛砖引玉，还请大家多多指教。。</p>
<p>其实，在 2013的WWDC上，苹果推出了NSURLConnection的继任者：NSURLSession，大有取代NSURLConnection之势，我们可以直接研究NSURLSession。</p>
<h3 id="AFNetworking的基本使用"><a href="#AFNetworking的基本使用" class="headerlink" title="AFNetworking的基本使用"></a>AFNetworking的基本使用</h3><h4 id="使用AFNetWorking请求网络的完整流程"><a href="#使用AFNetWorking请求网络的完整流程" class="headerlink" title="使用AFNetWorking请求网络的完整流程"></a>使用AFNetWorking请求网络的完整流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//1.构造URL</div><div class="line">    NSString *urlString = @&quot;https://api.weibo.com/2/statuses/home_timeline.json&quot;;</div><div class="line">    //2.构造请求对象</div><div class="line">    /*</div><div class="line">     请求参数的格式：</div><div class="line">     1.JSON--&gt;AFJSONRequestSerializer</div><div class="line">     2.XML--&gt;没有给定类，需要自己进行拼接</div><div class="line">     3.KEY=VALUE--》AFHTTPRequestSerializer 默认</div><div class="line">     */</div><div class="line">    NSDictionary *params = @&#123;</div><div class="line">                             @&quot;access_token&quot; : @&quot;2.00TSa6WDewTgPDfa63e0f0883oK2XE&quot;</div><div class="line">                             &#125;;</div><div class="line">    </div><div class="line">    //请求参数格式化对象，会根据类型拼接好给定的格式</div><div class="line">    AFHTTPRequestSerializer *requestSer = [AFHTTPRequestSerializer serializer];</div><div class="line">    </div><div class="line">    //使用请求参数格式化对象来构造一个request</div><div class="line">    NSMutableURLRequest *request = [requestSer requestWithMethod:@&quot;GET&quot; URLString:urlString parameters:params error:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">    //3.构造线程对象 AFHTTPRequestOperation--&gt;AFURLConnectionOPeration--&gt;NSOperation</div><div class="line">    AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];</div><div class="line">    </div><div class="line">    //4.设置从服务器返回到客户端数据的解析方式,默认是JSON解析</div><div class="line">    operation.responseSerializer = [AFJSONResponseSerializer serializerWithReadingOptions:NSJSONReadingMutableContainers];</div><div class="line">    </div><div class="line">    //5.网络请求事件的监听--&gt;请求成功和失败会回调的block</div><div class="line">    [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">        NSLog(@&quot;网络请求成功%@&quot;, responseObject);</div><div class="line">    &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">        NSLog(@&quot;网络请求失败%@&quot;,error);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //6.发送网络请求--&gt;把网络请求任务添加到任务队列中执行</div><div class="line">    NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">    [queue addOperation:operation];</div></pre></td></tr></table></figure>
<h4 id="使用manager对象来请求网络的方法"><a href="#使用manager对象来请求网络的方法" class="headerlink" title="使用manager对象来请求网络的方法"></a>使用manager对象来请求网络的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//1.获取请求管理对象</div><div class="line">    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">    </div><div class="line">    //2.设置请求参数格式化对象，确定请求参数以哪种格式进行传递拼接</div><div class="line">//    manager.requestSerializer = [AFHTTPRequestSerializer serializer];</div><div class="line">    </div><div class="line">    //3.设置返回数据格式化对象，确定返回数据以哪种格式进行解析</div><div class="line">//    manager.responseSerializer = [AFJSONResponseSerializer serializerWithReadingOptions:&lt;#(NSJSONReadingOptions)#&gt;]</div><div class="line">    </div><div class="line">    //4.网络申请</div><div class="line">    NSString *urlString = @&quot;https://api.weibo.com/2/statuses/update.json&quot;;</div><div class="line">    NSDictionary *params = @&#123;</div><div class="line">                             @&quot;status&quot; : @&quot;我在睡觉&quot;,</div><div class="line">                             @&quot;access_token&quot; : @&quot;2.00TSa6WDewTgPDfa63e0f0883oK2XE&quot;</div><div class="line">                             &#125;;</div><div class="line">    [manager POST:urlString parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">         NSLog(@&quot;网络请求成功%@&quot;, responseObject);</div><div class="line">    &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">        NSLog(@&quot;网络请求失败%@&quot;,error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<h4 id="对网络请求进行简单的封装"><a href="#对网络请求进行简单的封装" class="headerlink" title="对网络请求进行简单的封装"></a>对网络请求进行简单的封装</h4><p>首先创建一个继承NSObject的类FDWebDataRequest</p>
<p>FDWebDataRequest.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">@interface FDWebDataRequest : NSObject</div><div class="line"></div><div class="line">//使用NSURLConnection组件来做网络申请</div><div class="line">+ (void)requestData:(NSString *)urlString HTTPMethod:(NSString *)method  params:(NSMutableDictionary *)params completionHandle:(void(^)(id result))completionblock errorHandle:(void(^)(NSError *error))errorblock;</div><div class="line"></div><div class="line">//封装使用AFNetWorking来申请网络的方法（不上传文件）</div><div class="line">+ (void)AFRequestData:(NSString *)urlString HTTPMethod:(NSString *)method params:(NSMutableDictionary *)params completionHandle:(void(^)(id result))completionblock errorHandle:(void(^)(NSError *error))errorblock;</div><div class="line"></div><div class="line"></div><div class="line">//封装上传文件的方法:data是和文件上传相关的参数</div><div class="line">+ (void)AFRequestData:(NSString *)urlString HTTPMethod:(NSString *)method params:(NSMutableDictionary *)params data:(NSMutableDictionary *)datas completionHandle:(void(^)(id result))completionblock errorHandle:(void(^)(NSError *error))errorblock;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>FDWebDataRequest.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">#import &quot;FDWebDataRequest.h&quot;</div><div class="line">#define BaseURL @&quot;https://api.weibo.com&quot;</div><div class="line">@implementation FDWebDataRequest</div><div class="line"></div><div class="line">+ (void)requestData:(NSString *)urlString HTTPMethod:(NSString *)method params:(NSMutableDictionary *)params completionHandle:(void (^)(id))completionblock errorHandle:(void (^)(NSError *))errorblock&#123;</div><div class="line">    </div><div class="line">    //1.拼接URL</div><div class="line">    NSString *requestString = [BaseURL stringByAppendingString:urlString];</div><div class="line">    NSURL *url = [NSURL URLWithString:requestString];</div><div class="line">    </div><div class="line">    </div><div class="line">    //2.创建网络请求</div><div class="line">    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];</div><div class="line">    request.timeoutInterval = 60;</div><div class="line">    request.HTTPMethod = method;</div><div class="line">    </div><div class="line">    </div><div class="line">    //3.处理请求参数</div><div class="line">    //key1=value1&amp;key2=value2</div><div class="line">    NSMutableString *paramString = [NSMutableString string];</div><div class="line">    </div><div class="line">    NSArray *allKeys = params.allKeys;</div><div class="line">    </div><div class="line">    for (NSInteger i = 0; i &lt; params.count; i++) &#123;</div><div class="line">        NSString *key = allKeys[i];</div><div class="line">        NSString *value = params[key];</div><div class="line">        </div><div class="line">        [paramString appendFormat:@&quot;%@=%@&quot;,key,value];</div><div class="line">        </div><div class="line">        if (i &lt; params.count - 1) &#123;</div><div class="line">            [paramString appendString:@&quot;&amp;&quot;];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //4.GET和POST分别处理</div><div class="line">    if ([method isEqualToString:@&quot;GET&quot;]) &#123;</div><div class="line">        </div><div class="line">        //http://www.baidu.com?key1=value1&amp;key2=value2</div><div class="line">        //http://www.baidu.com?key0=value0&amp;key1=value1&amp;key2=value2</div><div class="line">        </div><div class="line">        NSString *seperate = url.query ? @&quot;&amp;&quot; : @&quot;?&quot;;</div><div class="line">        NSString *paramsURLString = [NSString stringWithFormat:@&quot;%@%@%@&quot;,requestString,seperate,paramString];</div><div class="line">        </div><div class="line">        //根据拼接好的URL进行修改</div><div class="line">        request.URL = [NSURL URLWithString:paramsURLString];</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    else if([method isEqualToString:@&quot;POST&quot;]) &#123;</div><div class="line">        //POST请求则把参数放在请求体里</div><div class="line">        NSData *bodyData = [paramString dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">        request.HTTPBody = bodyData;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //5.发送异步网络请求</div><div class="line">    </div><div class="line">    NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">    [NSURLConnection sendAsynchronousRequest:request queue:queue completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) &#123;</div><div class="line">        </div><div class="line">        if (connectionError) &#123;</div><div class="line">            //出现错误时回调block</div><div class="line">            errorblock(connectionError);</div><div class="line">            </div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        if (data) &#123;</div><div class="line">            </div><div class="line">            //解析JSON</div><div class="line">            NSDictionary *jsonDic = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];</div><div class="line">            </div><div class="line">            //把JSON解析后的数据返回给调用者,回调block</div><div class="line">            completionblock(jsonDic);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)AFRequestData:(NSString *)urlString HTTPMethod:(NSString *)method params:(NSMutableDictionary *)params completionHandle:(void (^)(id))completionblock errorHandle:(void (^)(NSError *))errorblock &#123;</div><div class="line">    //拼接URL</div><div class="line">    urlString = [BaseURL stringByAppendingString:urlString];</div><div class="line">    </div><div class="line">    //创建管理对象</div><div class="line">    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">    </div><div class="line">    //GET和POST分别处理</div><div class="line">    if ([method isEqualToString:@&quot;GET&quot;]) &#123;</div><div class="line">        </div><div class="line">        [manager GET:urlString parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">            completionblock(responseObject);</div><div class="line">        &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">            errorblock(error);</div><div class="line">        &#125;];</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    else if([method isEqualToString:@&quot;POST&quot;]) &#123;</div><div class="line">        [manager POST:urlString parameters:params success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">            completionblock(responseObject);</div><div class="line">        &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">            errorblock(error);</div><div class="line">            </div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用multipart-formdata协议上传文件的方法：</div><div class="line">//multipart是HTTP协议为web表单新增的上传文件的协议，数据也是放在请求体中，和普通POST的区别是参数不再是key＝value格式，因此特定的数据格式。</div><div class="line">+ (void)AFRequestData:(NSString *)urlString HTTPMethod:(NSString *)method params:(NSMutableDictionary *)params data:(NSMutableDictionary *)datas completionHandle:(void (^)(id result))completionblock errorHandle:(void (^)(NSError *error))errorblock &#123;</div><div class="line">    </div><div class="line">    //拼接URL</div><div class="line">    urlString = [BaseURL stringByAppendingString:urlString];</div><div class="line">    </div><div class="line">    //获取管理对象</div><div class="line">    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">    </div><div class="line">    </div><div class="line">    AFHTTPRequestOperation *operation = [manager POST:urlString parameters:params constructingBodyWithBlock:^(id&lt;AFMultipartFormData&gt; formData) &#123;</div><div class="line">        </div><div class="line">        //&#123;@&quot;pic&quot; : NSData(图片的二进制数据)&#125;;</div><div class="line">        </div><div class="line">        for (NSString *keyName in datas) &#123;</div><div class="line">           </div><div class="line">            //获取文件的二进制数据</div><div class="line">            NSData *data = datas[keyName];</div><div class="line">            </div><div class="line">            //需要上传的数据添加到formData中</div><div class="line">            [formData appendPartWithFileData:data name:keyName fileName:keyName mimeType:@&quot;image/jpeg&quot;];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125; success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">        </div><div class="line">        completionblock(responseObject);</div><div class="line">        </div><div class="line">    &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">        errorblock(error);</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [operation setUploadProgressBlock:^(NSUInteger bytesWritten, long long totalBytesWritten, long long totalBytesExpectedToWrite) &#123;</div><div class="line">        </div><div class="line">        CGFloat progress = totalBytesWritten / (totalBytesExpectedToWrite * 1.0);</div><div class="line">        </div><div class="line">        NSLog(@&quot;已上传：%.2f&quot;, progress);</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="下面我们对上面的音频文件进行改进"><a href="#下面我们对上面的音频文件进行改进" class="headerlink" title="下面我们对上面的音频文件进行改进"></a>下面我们对上面的音频文件进行改进</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"> - (IBAction)startDownload:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    if (!isDownloading) &#123;</div><div class="line">        NSString *urlString = @&quot;http://cc.stream.qqmusic.qq.com/50450969.m4a?continfo=F6886073E0D58C26B826A7A6F02C20ED5745045FFCFDBF2D&amp;vkey=6A1FE4B71075955312B4EED3D7413AA3F0FAFBF6B31E13897B51043BD95B754982C276870A6D94720C688006886C90F3CC4683BA537FFBCA&amp;guid=238b3707a54f96885fcf9cabb0e319cda3612706&amp;fromtag=53&amp;uin=21619272&quot;;</div><div class="line">        </div><div class="line">        //NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];</div><div class="line">        </div><div class="line">        </div><div class="line">        AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">        </div><div class="line">        //设置返回数据的解析方式为不解析</div><div class="line">        manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">        </div><div class="line">        NSString *filePath = [NSHomeDirectory() stringByAppendingFormat:@&quot;/Documents/%@&quot;, @&quot;file.m4a&quot;];</div><div class="line">        //NSLog(@&quot;%@&quot;, filePath);</div><div class="line">        </div><div class="line">        //判断文件是否存在，如果不存在则创建</div><div class="line">        if (![[NSFileManager defaultManager] fileExistsAtPath:filePath]) &#123;</div><div class="line">            [[NSFileManager defaultManager] createFileAtPath:filePath contents:nil attributes:nil];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line">        AFHTTPRequestOperation *operation = [manager GET: urlString parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) &#123;</div><div class="line">            NSLog(@&quot;下载成功&quot;);</div><div class="line">        &#125; failure:^(AFHTTPRequestOperation *operation, NSError *error) &#123;</div><div class="line">            NSLog(@&quot;下载失败&quot;);</div><div class="line">        &#125;];</div><div class="line">        </div><div class="line">        </div><div class="line">        //设置下载文件不是保存在内存，而是保存到沙盒路径下的文件中。</div><div class="line">        operation.outputStream = [NSOutputStream outputStreamToFileAtPath:filePath append:YES];</div><div class="line">        </div><div class="line">        </div><div class="line">        __weak ViewController *weakSelf = self;</div><div class="line">        [operation setDownloadProgressBlock:^(NSUInteger bytesRead, long long totalBytesRead, long long totalBytesExpectedToRead) &#123;</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            CGFloat progress = totalBytesRead / (totalBytesExpectedToRead * 1.0);</div><div class="line">            </div><div class="line">            __strong ViewController *strongSelf = weakSelf;</div><div class="line">            </div><div class="line">            strongSelf.progressView.progress = progress;</div><div class="line">            strongSelf.progressLabel.text = [NSString stringWithFormat:@&quot;%.2f%%&quot;</div><div class="line">                                       , progress * 100];</div><div class="line">            </div><div class="line">        &#125;];</div><div class="line">        </div><div class="line"></div><div class="line">        </div><div class="line">        isDownloading = YES;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>我们网络请求的时候array和dictionary无法打印中文</p>
<p>解决方法</p>
<p>通过类目（NSdictionary+Log)的形式复写dictionary的descriptionWithLocale方法，把key和value进行拼接。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (NSString *)descriptionWithLocale:(id)locale &#123;</div><div class="line">    NSMutableString *log = [NSMutableString stringWithFormat:@&quot;&#123;\n&quot;];</div><div class="line"></div><div class="line">    for (NSString *key in self) &#123;</div><div class="line"></div><div class="line">        NSString *value = self[key];</div><div class="line">        [log appendFormat:@&quot;    %@=%@; \n&quot;,key,value];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [log appendFormat:@&quot;&#125;&quot;];</div><div class="line">    return log;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NSURLConnection </tag>
            
            <tag> AFNetworking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发-音视频]]></title>
      <url>http://yoursite.com/2017/01/17/iOS%E5%BC%80%E5%8F%91-%E9%9F%B3%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<h4 id="访问手机相册"><a href="#访问手机相册" class="headerlink" title="访问手机相册"></a>访问手机相册</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//只能选择单张图片</div><div class="line">    UIImagePickerController *pickVC = [[UIImagePickerController alloc] init];</div><div class="line">    </div><div class="line">    //设置相片的来源</div><div class="line">//    UIImagePickerControllerSourceTypePhotoLibrary 来自于相册库</div><div class="line">//    UIImagePickerControllerSourceTypeCamera 来自于摄像头</div><div class="line">//    UIImagePickerControllerSourceTypeSavedPhotosAlbum 来自于默认相册</div><div class="line">    pickVC.sourceType =  UIImagePickerControllerSourceTypeSavedPhotosAlbum;</div><div class="line">    </div><div class="line">    </div><div class="line">    pickVC.delegate = self;</div><div class="line">    </div><div class="line">    </div><div class="line">    //以模态视图的形式弹出</div><div class="line">    [self presentViewController:pickVC animated:YES completion:NULL];</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当然一定要实现<code>&lt;UINavigationControllerDelegate,UIImagePickerControllerDelegate&gt;</code>这两个代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#pragma mark - UIImagePickerController 代理方法</div><div class="line">//监听图片被选择的事件</div><div class="line">- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info &#123;</div><div class="line">    NSLog(@&quot;%@&quot;, info);</div><div class="line">    //获取选择的图片</div><div class="line">    UIImage *image = info[UIImagePickerControllerOriginalImage];</div><div class="line">    </div><div class="line">    self.imgView.image = image;</div><div class="line">    </div><div class="line">    //判断照片如果来自于摄像头，则要将此图片保存至相册</div><div class="line">    if (picker.sourceType == UIImagePickerControllerSourceTypeCamera) &#123;</div><div class="line">        </div><div class="line">        //图片的保存</div><div class="line">        UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), NULL);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [picker dismissViewControllerAnimated:YES completion:NULL];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//图片保存成功调用的协议方法</div><div class="line">- (void)image: (UIImage *) image didFinishSavingWithError: (NSError *) error contextInfo: (void *) contextInfo &#123;</div><div class="line">    NSLog(@&quot;保存成功&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="访问照相机"><a href="#访问照相机" class="headerlink" title="访问照相机"></a>访问照相机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">BOOL isCamera = [UIImagePickerController isCameraDeviceAvailable:UIImagePickerControllerCameraDeviceFront | UIImagePickerControllerCameraDeviceRear];</div><div class="line">   </div><div class="line">   if (!isCamera) &#123;</div><div class="line">       </div><div class="line">       UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@&quot;提示&quot; message:@&quot;没有可用摄像头&quot; delegate:nil cancelButtonTitle:@&quot;取消&quot; otherButtonTitles:nil, nil];</div><div class="line">       [alertView show];</div><div class="line">       return;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   UIImagePickerController *pickVC = [[UIImagePickerController alloc] init];</div><div class="line"></div><div class="line">   pickVC.sourceType =  UIImagePickerControllerSourceTypeCamera;</div><div class="line">   </div><div class="line">   </div><div class="line">   pickVC.delegate = self;</div><div class="line">   </div><div class="line">   [self presentViewController:pickVC animated:YES completion:NULL];</div></pre></td></tr></table></figure>
<h4 id="音频播放"><a href="#音频播放" class="headerlink" title="音频播放"></a>音频播放</h4><p>首先导入依赖库<code>AVFoundation</code>和<code>AudioToolbox</code></p>
<p> 1.AVAudioPlayer:只能播放本地音乐。</p>
<p> 2.AVPlayer:可以播放本地音乐和网络音乐。</p>
<p> 系统声音(依赖AudioToolbox框架）：300KB–&gt;150K 对于小的声音文件（铃声，闹钟等），会直接调用系统的声音服务，不使用iOS音频播放组件处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;AVFoundation/AVFoundation.h&gt;</div><div class="line">#import &lt;AudioToolbox/AudioToolbox.h&gt;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    AVAudioPlayer *player;</div><div class="line">    AVPlayer *avPlayer;</div><div class="line">    BOOL isPlay; //控制avPlayer播放和暂停</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">//    NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;music&quot; ofType:@&quot;mp3&quot;];</div><div class="line">//    //构造网络URL</div><div class="line">//    //NSURL *url = [NSURL URLWithString:filePath];</div><div class="line">//    //构造本地URL</div><div class="line">//    NSURL *url = [NSURL fileURLWithPath:filePath];</div><div class="line">//    </div><div class="line">//    player = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">//    NSURL *url = [NSURL URLWithString:@&quot;http://218.76.27.57:8080/chinaschool_rs02/135275/153903/160861/160867/1370744550357.mp3&quot;];</div><div class="line">//    </div><div class="line">//    avPlayer = [[AVPlayer alloc] initWithURL:url];</div><div class="line">//    </div><div class="line">//    [avPlayer play];</div><div class="line">    </div><div class="line">    NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;44&quot; ofType:@&quot;caf&quot;];</div><div class="line">    NSURL *url = [NSURL fileURLWithPath:filePath];</div><div class="line">    //注册为系统声音,soundID具有有效值</div><div class="line">    SystemSoundID soundID = 0;</div><div class="line">    AudioServicesCreateSystemSoundID((__bridge CFURLRef)url, &amp;soundID);</div><div class="line">    </div><div class="line">    AudioServicesPlaySystemSound(soundID);</div><div class="line">    </div><div class="line">    //播放振动</div><div class="line">    AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)playLocal:(id)sender &#123;</div><div class="line">    UIButton *button = (UIButton *)sender;</div><div class="line">    //播放状态</div><div class="line">    if ([player isPlaying]) &#123;</div><div class="line">        [player pause];</div><div class="line">        [button setTitle:@&quot;播放本地音乐&quot; forState:UIControlStateNormal];</div><div class="line">        </div><div class="line">    &#125; else &#123; //暂停状态</div><div class="line">        [player play];</div><div class="line">        [button setTitle:@&quot;暂停&quot; forState:UIControlStateNormal];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (IBAction)playInternet:(id)sender &#123;</div><div class="line">    if (isPlay) &#123;</div><div class="line">        [avPlayer pause];</div><div class="line">    &#125; else &#123;</div><div class="line">        [avPlayer play];</div><div class="line">    &#125;</div><div class="line">    isPlay = !isPlay;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="远程控制事件"><a href="#远程控制事件" class="headerlink" title="远程控制事件"></a>远程控制事件</h4><p>  1.支持远程控制事件，让线控耳机可以控制音乐的暂停和播放</p>
<p> （1）复写canBecomeFirstResponder</p>
<p> （2）只有第一响应者才可以接收远程控制事件</p>
<p> （3）设置当前应用程序开始接收远程控制事件</p>
<p> 2.让音乐支持后台播放</p>
<p> 一般来讲支持后台运行的任务有三种：</p>
<p> （1）音乐播放</p>
<p> （2）定位</p>
<p> （3）VOIP：网络电话</p>
<p> 进行以下配置才能支持后台播放：</p>
<p> （1）在info.plist文件中加入一项:Required background modes–&gt;播放音乐</p>
<p> （2）获取AVAudioSession对象，并设置其类别为AVAudioSessionCategoryPlayback</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;AVFoundation/AVFoundation.h&gt;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    AVPlayer *_player;</div><div class="line">    BOOL _isPlay;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    //让音频会话支持后台播放,且必须在播放音频文件之前设置</div><div class="line">    [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayback error:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">    NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;music&quot; withExtension:@&quot;mp3&quot;];</div><div class="line">    </div><div class="line">    _player = [[AVPlayer alloc] initWithURL:url];</div><div class="line">    </div><div class="line">    [_player play];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//设置当前响应者具备成为第一响应者的能力</div><div class="line">- (BOOL)canBecomeFirstResponder &#123;</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    </div><div class="line">    //设置当前视图控制器为第一响应者，才能接收远程控制事件</div><div class="line">    [self becomeFirstResponder];</div><div class="line">    </div><div class="line">    //设置当前应用程序开始接收远程控制事件</div><div class="line">    [[UIApplication sharedApplication] beginReceivingRemoteControlEvents];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">    </div><div class="line">    [super viewDidDisappear:animated];</div><div class="line">    </div><div class="line">    //取消第一响应者</div><div class="line">    [self resignFirstResponder];</div><div class="line">    </div><div class="line">    //应用程序停止接收远程控制事件</div><div class="line">    [[UIApplication sharedApplication] endReceivingRemoteControlEvents];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//接收远程控制事件的方法，远程控制事件开始此方法会被触发</div><div class="line">- (void)remoteControlReceivedWithEvent:(UIEvent *)event &#123;</div><div class="line">    if (event.type == UIEventTypeRemoteControl) &#123;</div><div class="line">        switch (event.subtype) &#123;</div><div class="line">            case UIEventSubtypeRemoteControlTogglePlayPause:</div><div class="line">                if (_isPlay) &#123;</div><div class="line">                    [_player pause];</div><div class="line">                &#125; else &#123;</div><div class="line">                    [_player play];</div><div class="line">                &#125;</div><div class="line">                _isPlay = !_isPlay;</div><div class="line">                break;</div><div class="line">            case UIEventSubtypeRemoteControlNextTrack :</div><div class="line">                NSLog(@&quot;下一首&quot;);</div><div class="line">                break;</div><div class="line">            case UIEventSubtypeRemoteControlPreviousTrack :</div><div class="line">                NSLog(@&quot;上一首&quot;);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AVAudioPlayer </tag>
            
            <tag> UIImagePickerController </tag>
            
            <tag> AVAudioSession </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发技巧(二)]]></title>
      <url>http://yoursite.com/2017/01/17/iOS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h4 id="获取全局的Delegate对象，这样我们可以调用这个对象里的方法和变量"><a href="#获取全局的Delegate对象，这样我们可以调用这个对象里的方法和变量" class="headerlink" title="获取全局的Delegate对象，这样我们可以调用这个对象里的方法和变量"></a>获取全局的Delegate对象，这样我们可以调用这个对象里的方法和变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(MyAppDelegate*)[[UIApplication sharedApplication] delegate] MyMethodOrMyVariable];</div></pre></td></tr></table></figure>
<h4 id="获得程序的主Bundle"><a href="#获得程序的主Bundle" class="headerlink" title="获得程序的主Bundle"></a>获得程序的主Bundle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSBundle *bundle = [NSBundle mainBundle];</div><div class="line">/*</div><div class="line">Bundle可以理解成一种文件夹，其内容遵循特定的框架。</div><div class="line"></div><div class="line">Main Bundle一种主要用途是使用程序中的资源文件，如图片、声音、plst文件等。</div><div class="line">*/</div><div class="line">NSURL *plistURL = [bundle URLForResource:@&quot;plistFile&quot; withExtension:@&quot;plist&quot;];</div><div class="line"></div><div class="line">//上面的代码获得plistFile.plist文件的路径。</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="在程序中播放声音"><a href="#在程序中播放声音" class="headerlink" title="在程序中播放声音"></a>在程序中播放声音</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">首先在程序添加AudioToolbox：</div><div class="line"></div><div class="line">其次，在有播放声音方法的.m方法添加#import：</div><div class="line"></div><div class="line">#import</div><div class="line">*/</div><div class="line">//接下来，播放声音的代码如下：</div><div class="line"></div><div class="line">NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;soundFileName&quot; ofType:@&quot;wav&quot;];</div><div class="line"></div><div class="line">SystemSoundID soundID;</div><div class="line"></div><div class="line">AudioServicesCreateSystemSoundID ((__bridge CFURLRef)[NSURL fileURLWithPath:path], &amp;soundID);</div><div class="line"></div><div class="line">AudioServicesPlaySystemSound (soundID);</div></pre></td></tr></table></figure>
<h4 id="设置和获取类中属性值"><a href="#设置和获取类中属性值" class="headerlink" title="设置和获取类中属性值"></a>设置和获取类中属性值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[self setValue: 变量值 forKey: 变量名];</div><div class="line"></div><div class="line">[self valueForKey: 变量名];</div></pre></td></tr></table></figure>
<h4 id="让某一方法在未来某段时间之后执行"><a href="#让某一方法在未来某段时间之后执行" class="headerlink" title="让某一方法在未来某段时间之后执行"></a>让某一方法在未来某段时间之后执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self performSelector:@selector(方法名) withObject:nil afterDelay:延迟时间（s）];</div></pre></td></tr></table></figure>
<h4 id="获得设备版本号"><a href="#获得设备版本号" class="headerlink" title="获得设备版本号"></a>获得设备版本号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float version = [[[UIDevice currentDevice] systemVersion] floatValue];</div></pre></td></tr></table></figure>
<h4 id="捕捉程序关闭或者进入后台事件"><a href="#捕捉程序关闭或者进入后台事件" class="headerlink" title="捕捉程序关闭或者进入后台事件"></a>捕捉程序关闭或者进入后台事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UIApplication *app = [UIApplication sharedApplication];</div><div class="line"></div><div class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(applicationWillResignActive:) name:UIApplicationWillResignActiveNotification object:app];</div><div class="line"></div><div class="line">//applicationWillResignActive:这个方法中添加想要的操作</div></pre></td></tr></table></figure>
<h4 id="查看设备支持的字体"><a href="#查看设备支持的字体" class="headerlink" title="查看设备支持的字体"></a>查看设备支持的字体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">for (NSString *family in [UIFont familyNames]) &#123;</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;, family);</div><div class="line"></div><div class="line">for (NSString *font in [UIFont fontNamesForFamilyName:family]) &#123;</div><div class="line"></div><div class="line">NSLog(@&quot;\t%@&quot;, font);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="为UIImageView添加单击事件"><a href="#为UIImageView添加单击事件" class="headerlink" title="为UIImageView添加单击事件"></a>为UIImageView添加单击事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">imageView.userInteractionEnabled = YES;</div><div class="line"></div><div class="line">UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(yourHandlingCode:)];</div><div class="line"></div><div class="line">[imageView addGestureRecognizer:singleTap];</div></pre></td></tr></table></figure>
<h4 id="页面切换效果设置"><a href="#页面切换效果设置" class="headerlink" title="页面切换效果设置"></a>页面切换效果设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">controller.modalTransitionStyle = UIModalTransitionStyleCoverVertical;</div><div class="line"></div><div class="line">[self presentModalViewController:controller animated:YES];</div><div class="line">/*</div><div class="line">可供使用的效果：</div><div class="line"></div><div class="line">UIModalTransitionStyleCoverVertical</div><div class="line"></div><div class="line">UIModalTransitionStyleFlipHorizontal</div><div class="line"></div><div class="line">UIModalTransitionStyleCrossDissolve</div><div class="line"></div><div class="line">UIModalTransitionStylePartialCurl</div><div class="line">*/</div><div class="line">//恢复之前的页面：</div><div class="line"></div><div class="line">[self dismissModalViewControllerAnimated:YES];</div></pre></td></tr></table></figure>
<h4 id="视频、音频调取"><a href="#视频、音频调取" class="headerlink" title="视频、音频调取"></a>视频、音频调取</h4><h6 id="iOS视频播放代码（添加MediaPlayer-framework和-import）"><a href="#iOS视频播放代码（添加MediaPlayer-framework和-import）" class="headerlink" title="iOS视频播放代码（添加MediaPlayer.framework和#import）"></a>iOS视频播放代码（添加MediaPlayer.framework和#import）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">-(void)playMovie:(NSString *)fileName&#123;</div><div class="line"></div><div class="line">//视频文件路径</div><div class="line"></div><div class="line">NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:@&quot;mp4&quot;];</div><div class="line"></div><div class="line">//视频URL</div><div class="line"></div><div class="line">NSURL *url = [NSURL fileURLWithPath:path];</div><div class="line"></div><div class="line">//视频播放对象</div><div class="line"></div><div class="line">MPMoviePlayerController *movie = [[MPMoviePlayerController alloc] initWithContentURL:url];</div><div class="line"></div><div class="line">movie.controlStyle = MPMovieControlStyleFullscreen;</div><div class="line"></div><div class="line">[movie.view setFrame:self.view.bounds];</div><div class="line"></div><div class="line">movie.initialPlaybackTime = -1;</div><div class="line"></div><div class="line">[self.view addSubview:movie.view];</div><div class="line"></div><div class="line">// 注册一个播放结束的通知</div><div class="line"></div><div class="line">[[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line"></div><div class="line">selector:@selector(myMovieFinishedCallback:)</div><div class="line"></div><div class="line">name:MPMoviePlayerPlaybackDidFinishNotification</div><div class="line"></div><div class="line">object:movie];</div><div class="line"></div><div class="line">[movie play];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -------------------视频播放结束委托--------------------</div><div class="line"></div><div class="line">-(void)myMovieFinishedCallback:(NSNotification*)notify</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">//视频播放对象</div><div class="line"></div><div class="line">MPMoviePlayerController* theMovie = [notify object];</div><div class="line"></div><div class="line">//销毁播放通知</div><div class="line"></div><div class="line">[[NSNotificationCenter defaultCenter] removeObserver:self</div><div class="line"></div><div class="line">name:MPMoviePlayerPlaybackDidFinishNotification</div><div class="line"></div><div class="line">object:theMovie];</div><div class="line"></div><div class="line">[theMovie.view removeFromSuperview];</div><div class="line"></div><div class="line">// 释放视频对象</div><div class="line"></div><div class="line">[theMovie release];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="播放背景音乐，利用类进行播放"><a href="#播放背景音乐，利用类进行播放" class="headerlink" title="播放背景音乐，利用类进行播放"></a>播放背景音乐，利用类进行播放</h6><p>背景音乐播放 支持mp3格式 循环播放长音乐这种播放音乐的方式导入框架#import<avfoundation avfoundation.h=""></avfoundation></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//设置属性：必须在h文件中实例化。不知道为什么，直接在M文件中实例化，会播不出来声音。</div><div class="line">&#123;</div><div class="line">AVAudioPlayer *myBackMusic;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//.m</div><div class="line">-（void)viewDidLoad</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">NSString *musicFilePath = [[NSBundle mainBundle] pathForResource:@&quot;changan&quot; ofType:@&quot;mp3&quot;]; //创建音乐文件路径</div><div class="line"></div><div class="line">NSURL *musicURL = [[NSURL alloc] initFileURLWithPath:musicFilePath];</div><div class="line"></div><div class="line">AVAudioPlayer *thePlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:musicURL error:nil];</div><div class="line"></div><div class="line">//创建播放器</div><div class="line"></div><div class="line">myBackMusic = thePlayer; //赋值给自己定义的类变量</div><div class="line"></div><div class="line">[musicURL release];</div><div class="line"></div><div class="line">[thePlayer release];</div><div class="line"></div><div class="line">[myBackMusic prepareToPlay];</div><div class="line"></div><div class="line">[myBackMusic setVolume:1]; //设置音量大小</div><div class="line"></div><div class="line">myBackMusic.numberOfLoops = -1;//设置音乐播放次数 -1为一直循环 ，将音频播放器的numberOfLoops属性设为负数使得播放无限循环</div><div class="line"></div><div class="line">NSLog(@&quot;%f seconds played so far&quot;, audioPlayer.currentTime); //查看播放的初始时间，也就是从多少秒开始播放</div><div class="line"></div><div class="line">audioPlayer.currentTime = 10; // jump to the 10 second mark //设置播放开始的时间</div><div class="line"></div><div class="line">[myBackMusic play]; //播放</div><div class="line"></div><div class="line">[myBackMusic pause];</div><div class="line"></div><div class="line">[myBackMusic stop];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="iOS播放一段声音（添加AudioToolbox-framework和-import）"><a href="#iOS播放一段声音（添加AudioToolbox-framework和-import）" class="headerlink" title="iOS播放一段声音（添加AudioToolbox.framework和#import）"></a>iOS播放一段声音（添加AudioToolbox.framework和#import<avfoundation avfoundation.h="">）</avfoundation></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;soundFileName&quot; ofType:@&quot;wav&quot;];</div><div class="line"></div><div class="line">SystemSoundID soundID;</div><div class="line"></div><div class="line">AudioServicesCreateSystemSoundID ((__bridge CFURLRef)[NSURL fileURLWithPath:path], &amp;soundID);</div><div class="line"></div><div class="line">AudioServicesPlaySystemSound (soundID);</div></pre></td></tr></table></figure>
<h4 id="文本框输入时使当前TextField移动到弹出的键盘顶部"><a href="#文本框输入时使当前TextField移动到弹出的键盘顶部" class="headerlink" title="文本框输入时使当前TextField移动到弹出的键盘顶部"></a><strong>文本框输入时使当前TextField移动到弹出的键盘顶部</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//首先先设置TextField的代理为self，并添加&lt;UITextFieldDelegate&gt;</div><div class="line">//然后通过代理方法来处理视图的上下移动</div><div class="line"></div><div class="line">#pragma mark - TextField delegete 处理键盘弹出时视图的上下移动</div><div class="line">//键盘上移</div><div class="line">- (void)textFieldDidBeginEditing:(UITextField *)textField</div><div class="line">&#123;</div><div class="line">    CGRect frame = textField.frame;</div><div class="line">    CGFloat heights = self.view.frame.size.height;</div><div class="line">    // 当前点击textfield的坐标的Y值 + 当前点击textFiled的高度 - （屏幕高度- 键盘高度 - 键盘上tabbar高度）</div><div class="line">    // 在这一部 就是了一个 当前textfile的的最大Y值 和 键盘的最全高度的差值，用来计算整个view的偏移量</div><div class="line">    int offset = frame.origin.y + frame.size.height - ( heights - 216.0-49.0);//键盘高度216</div><div class="line">    NSTimeInterval animationDuration = 0.30f;</div><div class="line">    [UIView beginAnimations:@&quot;ResizeForKeyBoard&quot; context:nil];</div><div class="line">    [UIView setAnimationDuration:animationDuration];</div><div class="line">    float width = self.view.frame.size.width;</div><div class="line">    float height = self.view.frame.size.height;</div><div class="line">    if(offset &gt; 0)</div><div class="line">    &#123;</div><div class="line">        CGRect rect = CGRectMake(0.0f, -offset,width,height);</div><div class="line">        self.view.frame = rect;</div><div class="line">    &#125;</div><div class="line">    [UIView commitAnimations];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//屏幕恢复原样</div><div class="line">-(void)textFieldDidEndEditing:(UITextField *)textField</div><div class="line">&#123;</div><div class="line">    //滑动效果</div><div class="line">    NSTimeInterval animationDuration = 0.30f;</div><div class="line">    [UIView beginAnimations:@&quot;ResizeForKeyboard&quot; context:nil];</div><div class="line">    [UIView setAnimationDuration:animationDuration];</div><div class="line">    //恢复屏幕</div><div class="line">    self.view.frame = CGRectMake(0.0f, 0.0f, self.view.frame.size.width, self.view.frame.size.height);//64-216</div><div class="line">    [UIView commitAnimations];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//return返回</div><div class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField &#123;</div><div class="line">    [self.contentView endEditing:YES];</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断是否为正确的手机号码"><a href="#判断是否为正确的手机号码" class="headerlink" title="判断是否为正确的手机号码"></a><strong>判断是否为正确的手机号码</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 判断用户输入的手机号码是否正确</div><div class="line">- (BOOL)isMobileNumber:(NSString *)mobileNum &#123;</div><div class="line"></div><div class="line">    //    电信号段:133/153/180/181/189/177</div><div class="line">    //    联通号段:130/131/132/155/156/185/186/145/176</div><div class="line">    //    移动号段:134/135/136/137/138/139/150/151/152/157/158/159/182/183/184/187/188/147/178</div><div class="line">    //    虚拟运营商:170</div><div class="line"></div><div class="line">    NSString *MOBILE = @&quot;^1(3[0-9]|4[57]|5[0-35-9]|8[0-9]|7[06-8])\\d&#123;8&#125;$&quot;;</div><div class="line">    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, MOBILE];</div><div class="line">    return [regextestmobile evaluateWithObject:mobileNum];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">        case let .email(str):</div><div class="line">            predicateStr = &quot;^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .phoneNum(str):</div><div class="line">            predicateStr = &quot;^((13[0-9])|(15[^4,\\D]) |(17[0,0-9])|(18[0,0-9]))\\d&#123;8&#125;$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .carNum(str):</div><div class="line">            predicateStr = &quot;^[A-Za-z]&#123;1&#125;[A-Za-z_0-9]&#123;5&#125;$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .username(str):</div><div class="line">            predicateStr = &quot;^[A-Za-z0-9]&#123;6,20&#125;+$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .password(str):</div><div class="line">            predicateStr = &quot;^[a-zA-Z0-9]&#123;6,20&#125;+$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .nickname(str):</div><div class="line">            predicateStr = &quot;^[\\u4e00-\\u9fa5]&#123;4,8&#125;$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .URL(str):</div><div class="line">            predicateStr = &quot;^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)([\\/\\w \\.-]*)*\\/?$&quot;</div><div class="line">            currObject = str</div><div class="line">        case let .IP(str):</div><div class="line">            predicateStr = &quot;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&quot;</div><div class="line">            currObject = str</div><div class="line">        &#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="判断当前版本号"><a href="#判断当前版本号" class="headerlink" title="判断当前版本号"></a><strong>判断当前版本号</strong></h4><p>业务逻辑：从服务器获得最新的版本号和是否要强制更新的字段，当用户版本与服务器版本不同时，弹出警告框让用户更新，若用户点击确定则跳转到appStore下载，点击取消则判断服务器返回的强制更新字段是否有值，有则关闭app不让用户使用(当后台接口改变时会出现这种情况)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 判断版本号</div><div class="line">- (void)getVersion&#123;</div><div class="line">      //通过发送网络请求从服务器上获取最新版本号</div><div class="line">[manager GET:kGetVersion parameters:parameters progress:nil success:^(NSURLSessionDataTask * _Nonnull task, NSDictionary *responseObject) &#123;</div><div class="line">        //得到服务器版本</div><div class="line">        NSString *updataVersion = responseObject[@&quot;currVesion&quot;];</div><div class="line">        //获取当前设备中应用的版本号</div><div class="line">        NSDictionary *infoDic = [[NSBundle mainBundle] infoDictionary];</div><div class="line">        NSString *currentVersion = [infoDic objectForKey:@&quot;CFBundleShortVersionString&quot;];</div><div class="line">        //判断两个版本是否相同</div><div class="line">        if ([updataVersion compare:currentVersion options:NSNumericSearch] == NSOrderedDescending) &#123;</div><div class="line">            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&quot;更新&quot; message:@&quot;您当前版本过低，请更新&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">            UIAlertAction *update = [UIAlertAction actionWithTitle:@&quot;更新&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</div><div class="line">                //跳转到响应地址进行更新</div><div class="line">                //appID根据上传的应用取得</div><div class="line">                NSString *appID = @&quot;114XXXXXXX&quot;;</div><div class="line">                NSString *appUrl = @&quot;http://itunes.apple.com/lookup?id=&quot;;</div><div class="line">                NSString *urlStr = [NSString stringWithFormat:@&quot;%@%@&quot;, appUrl, appID];</div><div class="line">                NSURL *url = [NSURL URLWithString:urlStr];</div><div class="line">                //                    NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://%@&quot;,infoDict[@&quot;currVesionDetail&quot;]]];</div><div class="line">                [[UIApplication sharedApplication] openURL:url];</div><div class="line">            &#125;];</div><div class="line">            UIAlertAction *cancel = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) &#123;</div><div class="line">                //判断是否要强制更新</div><div class="line">                if (responseObject[@&quot;checkVesion&quot;]) &#123;</div><div class="line">                    //说明要强制更新，则杀死程序</div><div class="line">                    UIApplication *app = [UIApplication sharedApplication];</div><div class="line">                    UIWindow *window = app.keyWindow;</div><div class="line">                    [UIView animateWithDuration:1.0f animations:^&#123;</div><div class="line">                        window.alpha = 0;</div><div class="line">                        window.frame = CGRectMake(0, window.bounds.size.width, 0, 0);</div><div class="line">                    &#125; completion:^(BOOL finished) &#123;</div><div class="line">                        exit(0);</div><div class="line">                    &#125;];</div><div class="line">                    //exit(0);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">            [alert addAction:update];</div><div class="line">            [alert addAction:cancel];</div><div class="line"></div><div class="line">            [self presentViewController:alert animated:YES completion:nil];</div><div class="line">        &#125;</div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line"></div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用SDWebImage当收到内存警告时清除缓存"><a href="#使用SDWebImage当收到内存警告时清除缓存" class="headerlink" title="使用SDWebImage当收到内存警告时清除缓存"></a><strong>使用SDWebImage当收到内存警告时清除缓存</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application</div><div class="line">&#123;</div><div class="line">    SDWebImageManager *mrg = [SDWebImageManager sharedManager];</div><div class="line">    //1,取消下砸操作</div><div class="line">    [mrg cancelAll];</div><div class="line">    //2,清除内存缓存</div><div class="line">    [mrg.imageCache clearMemory];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="KVO模式监听数组的变化"><a href="#KVO模式监听数组的变化" class="headerlink" title="KVO模式监听数组的变化"></a><strong>KVO模式监听数组的变化</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad&#123;</div><div class="line">    ....</div><div class="line">    [self addObserver:self forKeyPath:@&quot;array&quot; options:NSKeyValueObservingOptionNew context:nil];</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">//这样监听是无效的</div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context&#123;</div><div class="line">    //实现监听方法</div><div class="line">&#125;</div><div class="line"></div><div class="line">//下面方法才有效</div><div class="line">//注意，方法名中inArrayAtIndex,其中Array要根据属性名和改变</div><div class="line">-(void)insertObject:(id)object inArrayAtIndex:(NSUInteger)index&#123;</div><div class="line">    //向数组中插入数据</div><div class="line">    [self.array insertObject:object atIndex:index];</div><div class="line">&#125;</div><div class="line">-(void)removeObjectFromArrayAtIndex:(NSUInteger)index&#123;</div><div class="line">    //向数组中删除数据</div><div class="line">    [self.array removeObjectAtIndex:index];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当要往数组上增加/删除数据，要通过上面两个方法，而不是直接使用self.array addObject：添加</p>
<p>更多方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void)insertArray:(NSArray *)array atIndexes:(NSIndexSet *)indexes&#123;&#125;</div><div class="line">-(void)removeArrayAtIndexes:(NSIndexSet *)indexes&#123;&#125;</div><div class="line">-(void)replaceArrayAtIndexes:(NSIndexSet*)indexes withArray:(NSArray *)array&#123;&#125;</div><div class="line">-(void)replaceObjectInArrayAtIndex:(NSUInteger)index withObject:(id)object&#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="ScrollView及其子类下拉放大头部图片"><a href="#ScrollView及其子类下拉放大头部图片" class="headerlink" title="ScrollView及其子类下拉放大头部图片"></a><strong>ScrollView及其子类下拉放大头部图片</strong></h4><p>原理:让ScrollView顶部缩进要放的headerView的高度,在拖动ScrollView时,保持headerView的y始终在原位,而高度加上偏移值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">  ...</div><div class="line">  //设置tableView的缩进</div><div class="line">  tableView.contentInset = UIEdgeInsetsMake(headerViewHeight, 0, 0, 0);</div><div class="line">  //设置headerView</div><div class="line">  imageView.frame = CGRectMake(0, -headerViewHeight, self.view.frame.size.width, headerViewHeight);</div><div class="line">  imageView.contentMode = UIViewContentModeScaleAspectFill;</div><div class="line">  //将imageView插入到tableView的最上层,盖住空白处</div><div class="line">  [self.tableView insertSubview:imageView atIndex:0];</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - delegate</div><div class="line">//偏移改变headerView大小</div><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView</div><div class="line">&#123;</div><div class="line">    CGFloat y = scrollView.contentOffset.y ; //如果有导航栏则要加上64</div><div class="line">    if (y&lt; -headerViewHeight) &#123;</div><div class="line">        CGRect frame = self.headerView.frame;</div><div class="line">        frame.origin.y = y;</div><div class="line">        frame.size.height = -y;</div><div class="line">        self.headerView.frame = frame;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断手机号码格式是否正确，利用正则表达式验证"><a href="#判断手机号码格式是否正确，利用正则表达式验证" class="headerlink" title="判断手机号码格式是否正确，利用正则表达式验证"></a><strong>判断手机号码格式是否正确，利用正则表达式验证</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isMobileNumber:(NSString *)mobileNum</div><div class="line">&#123;</div><div class="line">    if (mobileNum.length != 11)</div><div class="line">    &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 手机号码:</div><div class="line">     * 13[0-9], 14[5,7], 15[0, 1, 2, 3, 5, 6, 7, 8, 9], 17[6, 7, 8], 18[0-9], 170[0-9]</div><div class="line">     * 移动号段: 134,135,136,137,138,139,150,151,152,157,158,159,182,183,184,187,188,147,178,1705</div><div class="line">     * 联通号段: 130,131,132,155,156,185,186,145,176,1709</div><div class="line">     * 电信号段: 133,153,180,181,189,177,1700</div><div class="line">     */</div><div class="line">    NSString *MOBILE = @&quot;^1(3[0-9]|4[57]|5[0-35-9]|8[0-9]|70)\d&#123;8&#125;$&quot;;</div><div class="line">    /**</div><div class="line">     * 中国移动：China Mobile</div><div class="line">     * 134,135,136,137,138,139,150,151,152,157,158,159,182,183,184,187,188,147,178,1705</div><div class="line">     */</div><div class="line">    NSString *CM = @&quot;(^1(3[4-9]|4[7]|5[0-27-9]|7[8]|8[2-478])\d&#123;8&#125;$)|(^1705\d&#123;7&#125;$)&quot;;</div><div class="line">    /**</div><div class="line">     * 中国联通：China Unicom</div><div class="line">     * 130,131,132,155,156,185,186,145,176,1709</div><div class="line">     */</div><div class="line">    NSString *CU = @&quot;(^1(3[0-2]|4[5]|5[56]|7[6]|8[56])\d&#123;8&#125;$)|(^1709\d&#123;7&#125;$)&quot;;</div><div class="line">    /**</div><div class="line">     * 中国电信：China Telecom</div><div class="line">     * 133,153,180,181,189,177,1700</div><div class="line">     */</div><div class="line">    NSString *CT = @&quot;(^1(33|53|77|8[019])\d&#123;8&#125;$)|(^1700\d&#123;7&#125;$)&quot;;</div><div class="line">    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, MOBILE];</div><div class="line">    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CM];</div><div class="line">    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CU];</div><div class="line">    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, CT];</div><div class="line">    if (([regextestmobile evaluateWithObject:mobileNum] == YES)</div><div class="line">        || ([regextestcm evaluateWithObject:mobileNum] == YES)</div><div class="line">        || ([regextestct evaluateWithObject:mobileNum] == YES)</div><div class="line">        || ([regextestcu evaluateWithObject:mobileNum] == YES))</div><div class="line">    &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断邮箱格式是否正确，利用正则表达式验证"><a href="#判断邮箱格式是否正确，利用正则表达式验证" class="headerlink" title="判断邮箱格式是否正确，利用正则表达式验证"></a><strong>判断邮箱格式是否正确，利用正则表达式验证</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isAvailableEmail:(NSString *)email</div><div class="line">&#123;</div><div class="line">    NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,4&#125;&quot;;</div><div class="line">    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex];</div><div class="line">    return [emailTest evaluateWithObject:email];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断字符串中是否含有空格"><a href="#判断字符串中是否含有空格" class="headerlink" title="判断字符串中是否含有空格"></a><strong>判断字符串中是否含有空格</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isHaveSpaceInString:(NSString *)string&#123;</div><div class="line">    NSRange _range = [string rangeOfString:@&quot; &quot;];</div><div class="line">    if (_range.location != NSNotFound) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;else &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断字符串中是否含有中文"><a href="#判断字符串中是否含有中文" class="headerlink" title="判断字符串中是否含有中文"></a><strong>判断字符串中是否含有中文</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isHaveChineseInString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    for(NSInteger i = 0; i &lt; [string length]; i++)&#123;</div><div class="line">        int a = [string characterAtIndex:i];</div><div class="line">        if (a &gt; 0x4e00 &amp;&amp; a &lt; 0x9fff) &#123;</div><div class="line">            return YES;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断字符串是否全部为数字"><a href="#判断字符串是否全部为数字" class="headerlink" title="判断字符串是否全部为数字"></a><strong>判断字符串是否全部为数字</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isAllNum:(NSString *)string</div><div class="line">&#123;</div><div class="line">    unichar c;</div><div class="line">    for (int i=0; i&lt;string.length; i++) &#123;</div><div class="line">      c=[string characterAtIndex:i];</div><div class="line">      if (!isdigit(c)) </div><div class="line">      &#123;</div><div class="line">        return no;</div><div class="line">      &#125; </div><div class="line">    &#125;return yes;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//判断是否是纯数字</div><div class="line">+ (BOOL)isPureInteger:(NSString *)str &#123;</div><div class="line">    NSScanner *scanner = [NSScanner scannerWithString:str];</div><div class="line">    NSInteger val;</div><div class="line">    return [scanner scanInteger:&amp;val] &amp;&amp; [scanner isAtEnd];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="过滤一些特殊字符-似乎只能去除头尾的特殊字符-不准"><a href="#过滤一些特殊字符-似乎只能去除头尾的特殊字符-不准" class="headerlink" title="过滤一些特殊字符 似乎只能去除头尾的特殊字符(不准)"></a>过滤一些特殊字符 似乎只能去除头尾的特殊字符(不准)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (NSString *)filterSpecialWithString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    // 定义一个特殊字符的集合</div><div class="line">    NSCharacterSet *set = [NSCharacterSet characterSetWithCharactersInString:</div><div class="line">                   @&quot;@／：；: ;（）?「」＂、[]&#123;&#125;#%-*+=_|~＜＞$?^?&apos;@#$%^&amp;*()_+&apos;&quot;];</div><div class="line">    // 过滤字符串的特殊字符</div><div class="line">    NSString *newString = [string stringByTrimmingCharactersInSet:set];</div><div class="line">    return newString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="让iOS应用直接退出"><a href="#让iOS应用直接退出" class="headerlink" title="让iOS应用直接退出"></a>让iOS应用直接退出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (void)backOutApp &#123;</div><div class="line">    UIWindow *window = [[UIApplication sharedApplication].delegate window];</div><div class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</div><div class="line">        window.alpha = 0;</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        exit(0);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="验证身份证-本人试过-还挺准的"><a href="#验证身份证-本人试过-还挺准的" class="headerlink" title="验证身份证(本人试过,还挺准的)"></a>验证身份证(本人试过,还挺准的)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)checkIdentityCardNo:(NSString*)value &#123;</div><div class="line">    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];</div><div class="line">    NSInteger length =0;</div><div class="line">    if (!value) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125;else &#123;</div><div class="line">        length = value.length;</div><div class="line">        if (length !=15 &amp;&amp; length !=18) &#123;</div><div class="line">            return NO;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 省份代码</div><div class="line">    NSArray *areasArray =@[@&quot;11&quot;,@&quot;12&quot;, @&quot;13&quot;,@&quot;14&quot;, @&quot;15&quot;,@&quot;21&quot;, @&quot;22&quot;,@&quot;23&quot;, @&quot;31&quot;,@&quot;32&quot;, @&quot;33&quot;,@&quot;34&quot;, @&quot;35&quot;,@&quot;36&quot;, @&quot;37&quot;,@&quot;41&quot;, @&quot;42&quot;,@&quot;43&quot;, @&quot;44&quot;,@&quot;45&quot;, @&quot;46&quot;,@&quot;50&quot;, @&quot;51&quot;,@&quot;52&quot;, @&quot;53&quot;,@&quot;54&quot;, @&quot;61&quot;,@&quot;62&quot;, @&quot;63&quot;,@&quot;64&quot;, @&quot;65&quot;,@&quot;71&quot;, @&quot;81&quot;,@&quot;82&quot;, @&quot;91&quot;];</div><div class="line">    NSString *valueStart2 = [value substringToIndex:2];</div><div class="line">    BOOL areaFlag =NO;</div><div class="line">    for (NSString *areaCode in areasArray) &#123;</div><div class="line">        if ([areaCode isEqualToString:valueStart2]) &#123;</div><div class="line">            areaFlag =YES;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!areaFlag) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    NSRegularExpression *regularExpression;</div><div class="line">    NSUInteger numberofMatch;</div><div class="line">    NSInteger year =0;</div><div class="line">    switch (length) &#123;</div><div class="line">        case 15:</div><div class="line">            year = [[value substringWithRange:NSMakeRange(6,2)] integerValue] +1900;</div><div class="line">            if (year %4 ==0 || (year 0 ==0 &amp;&amp; year %4 ==0)) &#123;</div><div class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</div><div class="line">                                                                       options:NSRegularExpressionCaseInsensitive</div><div class="line">                                                                         error:nil];//测试出生日期的合法性</div><div class="line">            &#125;else &#123;</div><div class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</div><div class="line">                                                                       options:NSRegularExpressionCaseInsensitive</div><div class="line">                                                                         error:nil];//测试出生日期的合法性</div><div class="line">            &#125;</div><div class="line">            numberofMatch = [regularExpression numberOfMatchesInString:value                                                 options:NSMatchingReportProgress</div><div class="line">                           range:NSMakeRange(0, value.length)];</div><div class="line">            if(numberofMatch &gt;0) &#123;</div><div class="line">                return YES;</div><div class="line">            &#125;else &#123;</div><div class="line">                return NO;</div><div class="line">            &#125;</div><div class="line">        case 18:</div><div class="line">            year = [value substringWithRange:NSMakeRange(6,4)].intValue;</div><div class="line">            if (year %4 ==0 || (year 0 ==0 &amp;&amp; year %4 ==0)) &#123;</div><div class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot;</div><div class="line">options:NSRegularExpressionCaseInsensitive                                                                     error:nil];//测试出生日期的合法性</div><div class="line">            &#125;else &#123;</div><div class="line">                regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot;                                                                      options:NSRegularExpressionCaseInsensitive                                                                     error:nil];//测试出生日期的合法性</div><div class="line">            &#125;</div><div class="line">            numberofMatch = [regularExpression numberOfMatchesInString:value                                                 options:NSMatchingReportProgress                                                     range:NSMakeRange(0, value.length)];</div><div class="line">            if(numberofMatch &gt;0) &#123;</div><div class="line">                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;</div><div class="line">                int Y = S ;</div><div class="line">                NSString *M =@&quot;F&quot;;</div><div class="line">                NSString *JYM =@&quot;10X98765432&quot;;</div><div class="line">                M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位</div><div class="line">                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) &#123;</div><div class="line">                    return YES;// 检测ID的校验位</div><div class="line">                &#125;else &#123;</div><div class="line">                    return NO;</div><div class="line">                &#125;</div><div class="line">            &#125;else &#123;</div><div class="line">                return NO;</div><div class="line">            &#125;</div><div class="line">        default:</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="设置Label里的字符有不同的颜色"><a href="#设置Label里的字符有不同的颜色" class="headerlink" title="设置Label里的字符有不同的颜色"></a>设置Label里的字符有不同的颜色</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//可根据自己的需求进行增删改</div><div class="line">- (void)stringColorSet &#123;</div><div class="line">    NSString*string = @&quot;如何使得Label里的字符有不同的颜色？&quot;;</div><div class="line">    NSRange range = [string rangeOfString: @&quot;Label&quot;];</div><div class="line">    NSMutableAttributedString*attribute = [[NSMutableAttributedString alloc] initWithString: string];</div><div class="line">    [attribute addAttributes: @&#123;NSForegroundColorAttributeName: [UIColor redColor]&#125;range: range];</div><div class="line">    [attribute addAttributes: @&#123;NSForegroundColorAttributeName: [UIColor greenColor]&#125;range: NSMakeRange(0, range.location)];</div><div class="line">    [attribute addAttributes: @&#123;NSForegroundColorAttributeName: [UIColor cyanColor]&#125;range: NSMakeRange(range.location+ range.length, 5)];</div><div class="line">    UILabel *label = [[UILabel alloc] initWithFrame: CGRectMake(0.0f, 100.0f, 320.0f, 100.0f)];</div><div class="line">    [label setText: string];</div><div class="line">    [label setAttributedText: attribute];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="磁盘总空间大小"><a href="#磁盘总空间大小" class="headerlink" title="磁盘总空间大小"></a>磁盘总空间大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (CGFloat)diskOfAllSizeMBytes</div><div class="line">&#123;</div><div class="line">    CGFloat size = 0.0;</div><div class="line">    NSError *error;</div><div class="line">    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&amp;error];</div><div class="line">    if (error) &#123;</div><div class="line">#ifdef DEBUG</div><div class="line">        NSLog(@&quot;error: %@&quot;, error.localizedDescription);</div><div class="line">#endif</div><div class="line">    &#125;else&#123;</div><div class="line">        NSNumber *number = [dic objectForKey:NSFileSystemSize];</div><div class="line">        size = [number floatValue]/1024/1024;</div><div class="line">    &#125;</div><div class="line">    return size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="磁盘可用空间大小"><a href="#磁盘可用空间大小" class="headerlink" title="磁盘可用空间大小"></a>磁盘可用空间大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (CGFloat)diskOfFreeSizeMBytes</div><div class="line">&#123;</div><div class="line">    CGFloat size = 0.0;</div><div class="line">    NSError *error;</div><div class="line">    NSDictionary *dic = [[NSFileManager defaultManager] attributesOfFileSystemForPath:NSHomeDirectory() error:&amp;error];</div><div class="line">    if (error) &#123;</div><div class="line">#ifdef DEBUG</div><div class="line">        NSLog(@&quot;error: %@&quot;, error.localizedDescription);</div><div class="line">#endif</div><div class="line">    &#125;else&#123;</div><div class="line">        NSNumber *number = [dic objectForKey:NSFileSystemFreeSize];</div><div class="line">        size = [number floatValue]/1024/1024;</div><div class="line">    &#125;</div><div class="line">    return size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="将字符串数组按照元素首字母顺序进行排序分组"><a href="#将字符串数组按照元素首字母顺序进行排序分组" class="headerlink" title="将字符串数组按照元素首字母顺序进行排序分组"></a>将字符串数组按照元素首字母顺序进行排序分组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">+ (NSDictionary *)dictionaryOrderByCharacterWithOriginalArray:(NSArray *)array</div><div class="line">&#123;</div><div class="line">    if (array.count == 0) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    for (id obj in array) &#123;</div><div class="line">        if (![obj isKindOfClass:[NSString class]]) &#123;</div><div class="line">            return nil;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    UILocalizedIndexedCollation *indexedCollation = [UILocalizedIndexedCollation currentCollation];</div><div class="line">    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:indexedCollation.sectionTitles.count];</div><div class="line">    //创建27个分组数组</div><div class="line">    for (int i = 0; i &lt; indexedCollation.sectionTitles.count; i++) &#123;</div><div class="line">        NSMutableArray *obj = [NSMutableArray array];</div><div class="line">        [objects addObject:obj];</div><div class="line">    &#125;</div><div class="line">    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:objects.count];</div><div class="line">    //按字母顺序进行分组</div><div class="line">    NSInteger lastIndex = -1;</div><div class="line">    for (int i = 0; i &lt; array.count; i++) &#123;</div><div class="line">        NSInteger index = [indexedCollation sectionForObject:array[i] collationStringSelector:@selector(uppercaseString)];</div><div class="line">        [[objects objectAtIndex:index] addObject:array[i]];</div><div class="line">        lastIndex = index;</div><div class="line">    &#125;</div><div class="line">    //去掉空数组</div><div class="line">    for (int i = 0; i &lt; objects.count; i++) &#123;</div><div class="line">        NSMutableArray *obj = objects[i];</div><div class="line">        if (obj.count == 0) &#123;</div><div class="line">            [objects removeObject:obj];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //获取索引字母</div><div class="line">    for (NSMutableArray *obj in objects) &#123;</div><div class="line">        NSString *str = obj[0];</div><div class="line">        NSString *key = [self firstCharacterWithString:str];</div><div class="line">        [keys addObject:key];</div><div class="line">    &#125;</div><div class="line">    NSMutableDictionary *dic = [NSMutableDictionary dictionary];</div><div class="line">    [dic setObject:objects forKey:keys];</div><div class="line">    return dic;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="将字符串数组按照元素首字母顺序进行排序分组-1"><a href="#将字符串数组按照元素首字母顺序进行排序分组-1" class="headerlink" title="将字符串数组按照元素首字母顺序进行排序分组"></a>将字符串数组按照元素首字母顺序进行排序分组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">+ (NSDictionary *)dictionaryOrderByCharacterWithOriginalArray:(NSArray *)array</div><div class="line">&#123;</div><div class="line">    if (array.count == 0) &#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    for (id obj in array) &#123;</div><div class="line">        if (![obj isKindOfClass:[NSString class]]) &#123;</div><div class="line">            return nil;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    UILocalizedIndexedCollation *indexedCollation = [UILocalizedIndexedCollation currentCollation];</div><div class="line">    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:indexedCollation.sectionTitles.count];</div><div class="line">    //创建27个分组数组</div><div class="line">    for (int i = 0; i &lt; indexedCollation.sectionTitles.count; i++) &#123;</div><div class="line">        NSMutableArray *obj = [NSMutableArray array];</div><div class="line">        [objects addObject:obj];</div><div class="line">    &#125;</div><div class="line">    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:objects.count];</div><div class="line">    //按字母顺序进行分组</div><div class="line">    NSInteger lastIndex = -1;</div><div class="line">    for (int i = 0; i &lt; array.count; i++) &#123;</div><div class="line">        NSInteger index = [indexedCollation sectionForObject:array[i] collationStringSelector:@selector(uppercaseString)];</div><div class="line">        [[objects objectAtIndex:index] addObject:array[i]];</div><div class="line">        lastIndex = index;</div><div class="line">    &#125;</div><div class="line">    //去掉空数组</div><div class="line">    for (int i = 0; i &lt; objects.count; i++) &#123;</div><div class="line">        NSMutableArray *obj = objects[i];</div><div class="line">        if (obj.count == 0) &#123;</div><div class="line">            [objects removeObject:obj];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //获取索引字母</div><div class="line">    for (NSMutableArray *obj in objects) &#123;</div><div class="line">        NSString *str = obj[0];</div><div class="line">        NSString *key = [self firstCharacterWithString:str];</div><div class="line">        [keys addObject:key];</div><div class="line">    &#125;</div><div class="line">    NSMutableDictionary *dic = [NSMutableDictionary dictionary];</div><div class="line">    [dic setObject:objects forKey:keys];</div><div class="line">    return dic;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对图片进行滤镜处理"><a href="#对图片进行滤镜处理" class="headerlink" title="对图片进行滤镜处理"></a>对图片进行滤镜处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 怀旧 --&gt; CIPhotoEffectInstant                         单色 --&gt; CIPhotoEffectMono</div><div class="line">// 黑白 --&gt; CIPhotoEffectNoir                            褪色 --&gt; CIPhotoEffectFade</div><div class="line">// 色调 --&gt; CIPhotoEffectTonal                           冲印 --&gt; CIPhotoEffectProcess</div><div class="line">// 岁月 --&gt; CIPhotoEffectTransfer                        铬黄 --&gt; CIPhotoEffectChrome</div><div class="line">// CILinearToSRGBToneCurve, CISRGBToneCurveToLinear, CIGaussianBlur, CIBoxBlur, CIDiscBlur, CISepiaTone, CIDepthOfField</div><div class="line">+ (UIImage *)filterWithOriginalImage:(UIImage *)image filterName:(NSString *)name</div><div class="line">&#123;</div><div class="line">    CIContext *context = [CIContext contextWithOptions:nil];</div><div class="line">    CIImage *inputImage = [[CIImage alloc] initWithImage:image];</div><div class="line">    CIFilter *filter = [CIFilter filterWithName:name];</div><div class="line">    [filter setValue:inputImage forKey:kCIInputImageKey];</div><div class="line">    CIImage *result = [filter valueForKey:kCIOutputImageKey];</div><div class="line">    CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];</div><div class="line">    UIImage *resultImage = [UIImage imageWithCGImage:cgImage];</div><div class="line">    CGImageRelease(cgImage);</div><div class="line">    return resultImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对图片进行模糊处理"><a href="#对图片进行模糊处理" class="headerlink" title="对图片进行模糊处理"></a>对图片进行模糊处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// CIGaussianBlur ---&gt; 高斯模糊</div><div class="line">// CIBoxBlur      ---&gt; 均值模糊(Available in iOS 9.0 and later)</div><div class="line">// CIDiscBlur     ---&gt; 环形卷积模糊(Available in iOS 9.0 and later)</div><div class="line">// CIMedianFilter ---&gt; 中值模糊, 用于消除图像噪点, 无需设置radius(Available in iOS 9.0 and later)</div><div class="line">// CIMotionBlur   ---&gt; 运动模糊, 用于模拟相机移动拍摄时的扫尾效果(Available in iOS 9.0 and later)</div><div class="line">+ (UIImage *)blurWithOriginalImage:(UIImage *)image </div><div class="line">                            blurName:(NSString *)name </div><div class="line">                            radius:(NSInteger)radius</div><div class="line">&#123;</div><div class="line">    CIContext *context = [CIContext contextWithOptions:nil];</div><div class="line">    CIImage *inputImage = [[CIImage alloc] initWithImage:image];</div><div class="line">    CIFilter *filter;</div><div class="line">    if (name.length != 0) &#123;</div><div class="line">        filter = [CIFilter filterWithName:name];</div><div class="line">        [filter setValue:inputImage forKey:kCIInputImageKey];</div><div class="line">        if (![name isEqualToString:@&quot;CIMedianFilter&quot;]) &#123;</div><div class="line">            [filter setValue:@(radius) forKey:@&quot;inputRadius&quot;];</div><div class="line">        &#125;</div><div class="line">        CIImage *result = [filter valueForKey:kCIOutputImageKey];</div><div class="line">        CGImageRef cgImage = [context createCGImage:result fromRect:[result extent]];</div><div class="line">        UIImage *resultImage = [UIImage imageWithCGImage:cgImage];</div><div class="line">        CGImageRelease(cgImage);</div><div class="line">        return resultImage;</div><div class="line">    &#125;else&#123;</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="跳转到系统的相关界面"><a href="#跳转到系统的相关界面" class="headerlink" title="跳转到系统的相关界面"></a>跳转到系统的相关界面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  需要添加一个字段</div><div class="line"> *  蓝色的项目工程文件 -&gt; Info -&gt; URL Types -&gt; 添加一个 -&gt; 设置URL  Sch**** 为 prefs的url</div><div class="line">  </div><div class="line"> NSURL *url = [NSURL URLWithString:@&quot;prefs:root=WIFI&quot;];</div><div class="line"> if ([[UIApplication sharedApplication] canOpenURL:url])</div><div class="line">&#123;</div><div class="line">[[UIApplication sharedApplication] openURL:url];</div><div class="line">&#125;</div><div class="line">  </div><div class="line"> 跳转到其他的界面的字段(不全,详细看链接)</div><div class="line">About — prefs:root=General&amp;path=About  </div><div class="line"></div><div class="line">Accessibility — prefs:root=General&amp;path=ACCESSIBILITY  </div><div class="line"></div><div class="line">AirplaneModeOn— prefs:root=AIRPLANE_MODE  </div><div class="line"></div><div class="line">Auto-Lock — prefs:root=General&amp;path=AUTOLOCK  </div><div class="line"></div><div class="line">Brightness — prefs:root=Brightness  </div><div class="line"></div><div class="line">Bluetooth — prefs:root=General&amp;path=Bluetooth</div><div class="line"></div><div class="line">Date&amp; Time — prefs:root=General&amp;path=DATE_AND_TIME  </div><div class="line"></div><div class="line">FaceTime — prefs:root=FACETIME</div><div class="line"></div><div class="line">General— prefs:root=General</div><div class="line"></div><div class="line">Keyboard — prefs:root=General&amp;path=Keyboard  </div><div class="line"></div><div class="line">iCloud — prefs:root=CASTLE  iCloud </div><div class="line"></div><div class="line">Storage &amp; Backup — prefs:root=CASTLE&amp;path=STORAGE_AND_BACKUP  </div><div class="line"></div><div class="line">International — prefs:root=General&amp;path=INTERNATIONAL  </div><div class="line"></div><div class="line">Location Services — prefs:root=LOCATION_SERVICES  </div><div class="line"></div><div class="line">Music — prefs:root=MUSIC  </div><div class="line"></div><div class="line">Music Equalizer — prefs:root=MUSIC&amp;path=EQ  </div><div class="line"></div><div class="line">Music VolumeLimit— prefs:root=MUSIC&amp;path=VolumeLimit  </div><div class="line"></div><div class="line">Network — prefs:root=General&amp;path=Network  </div><div class="line"></div><div class="line">Nike + iPod — prefs:root=NIKE_PLUS_IPOD  </div><div class="line"></div><div class="line">Notes — prefs:root=NOTES  </div><div class="line"></div><div class="line">Notification — prefs:root=NOTIFICATIONS_ID  </div><div class="line"></div><div class="line">Phone — prefs:root=Phone  </div><div class="line"></div><div class="line">Photos — prefs:root=Photos  </div><div class="line"></div><div class="line">Profile — prefs:root=General&amp;path=ManagedConfigurationList  </div><div class="line"></div><div class="line">Reset — prefs:root=General&amp;path=Reset  </div><div class="line"></div><div class="line">Safari — prefs:root=Safari  Siri — prefs:root=General&amp;path=Assistant  </div><div class="line"></div><div class="line">Sounds — prefs:root=Sounds  </div><div class="line"></div><div class="line">SoftwareUpdate— prefs:root=General&amp;path=SOFTWARE_UPDATE_LINK  </div><div class="line"></div><div class="line">Store — prefs:root=STORE  </div><div class="line"></div><div class="line">Twitter — prefs:root=TWITTER  </div><div class="line"></div><div class="line">Usage — prefs:root=General&amp;path=USAGE  </div><div class="line"></div><div class="line">VPN — prefs:root=General&amp;path=Network/VPN  </div><div class="line"></div><div class="line">Wallpaper — prefs:root=Wallpaper  </div><div class="line"></div><div class="line">Wi-Fi — prefs:root=WIFI</div><div class="line"></div><div class="line">Setting—prefs:root=INTERNET_TETHERING</div><div class="line">  </div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="创建一张实时模糊效果-View-毛玻璃效果"><a href="#创建一张实时模糊效果-View-毛玻璃效果" class="headerlink" title="创建一张实时模糊效果 View (毛玻璃效果)"></a>创建一张实时模糊效果 View (毛玻璃效果)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//Avilable in iOS 8.0 and later</div><div class="line">+ (UIVisualEffectView *)effectViewWithFrame:(CGRect)frame</div><div class="line">&#123;</div><div class="line">    UIBlurEffect *effect = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];</div><div class="line">    UIVisualEffectView *effectView = [[UIVisualEffectView alloc] initWithEffect:effect];</div><div class="line">    effectView.frame = frame;</div><div class="line">    return effectView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="设置Label的行间距"><a href="#设置Label的行间距" class="headerlink" title="设置Label的行间距"></a>设置Label的行间距</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (void)setLineSpaceWithString:(UILabel *)label</div><div class="line">&#123;</div><div class="line">     </div><div class="line">    NSMutableAttributedString *attributedString =</div><div class="line">    [[NSMutableAttributedString alloc] initWithString:label.text];</div><div class="line">    NSMutableParagraphStyle *paragraphStyle =  [[NSMutableParagraphStyle alloc] init];</div><div class="line">    [paragraphStyle setLineSpacing:3];</div><div class="line">     </div><div class="line">    //调整行间距</div><div class="line">    [attributedString addAttribute:NSParagraphStyleAttributeName</div><div class="line">                             value:paragraphStyle</div><div class="line">                             range:NSMakeRange(0, [label.text length])];</div><div class="line">    label.attributedText = attributedString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="让Plain风格的TableView的区头可以”不悬停”-可以直接百度搜到"><a href="#让Plain风格的TableView的区头可以”不悬停”-可以直接百度搜到" class="headerlink" title="让Plain风格的TableView的区头可以”不悬停”(可以直接百度搜到):"></a>让Plain风格的TableView的区头可以”不悬停”(可以直接百度搜到):</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView </div><div class="line">&#123;</div><div class="line">     if(scrollView == self.myTab) &#123;</div><div class="line">         CGFloat sectionHeaderHeight = 40;</div><div class="line">         if (scrollView.contentOffset.y=0) &#123;</div><div class="line">              </div><div class="line">             scrollView.contentInset = UIEdgeInsetsMake(-scrollView.contentOffset.y, 0, 0, 0);</div><div class="line">         &#125; else if (scrollView.contentOffset.y&gt;=sectionHeaderHeight) &#123;</div><div class="line">              </div><div class="line">             scrollView.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, 0, 0);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="清理缓存功能的实现"><a href="#清理缓存功能的实现" class="headerlink" title="清理缓存功能的实现"></a>清理缓存功能的实现</h4><p>移动应用在处理网络资源时，一般都会做离线缓存处理，其中以图片缓存最为典型，其中很流行的离线缓存框架为SDWebImage。</p>
<p>但是，离线缓存会占用手机存储空间，所以缓存清理功能基本成为资讯、购物、阅读类app的标配功能。</p>
<p>下面介绍的离线缓存功能的实现，主要分为缓存文件大小的获取、删除缓存文件的实现。</p>
<h5 id="获取缓存文件的大小"><a href="#获取缓存文件的大小" class="headerlink" title="获取缓存文件的大小"></a><strong>获取缓存文件的大小</strong></h5><p>由于缓存文件存在沙箱中，我们可以通过NSFileManager API来实现对缓存文件大小的计算。</p>
<h5 id="计算单个文件大小"><a href="#计算单个文件大小" class="headerlink" title="计算单个文件大小"></a><strong>计算单个文件大小</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+(float)fileSizeAtPath:(NSString *)path&#123;</div><div class="line">    NSFileManager *fileManager=[NSFileManager defaultManager];</div><div class="line">    if([fileManager fileExistsAtPath:path])&#123;</div><div class="line">        long long size=[fileManager attributesOfItemAtPath:path error:nil].fileSize;</div><div class="line">        return size/1024.0/1024.0;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="计算目录大小"><a href="#计算目录大小" class="headerlink" title="计算目录大小"></a><strong>计算目录大小</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+(float)folderSizeAtPath:(NSString *)path&#123;</div><div class="line">    NSFileManager *fileManager=[NSFileManager defaultManager];</div><div class="line">    float folderSize;</div><div class="line">    if ([fileManager fileExistsAtPath:path]) &#123;</div><div class="line">        NSArray *childerFiles=[fileManager subpathsAtPath:path];</div><div class="line">        for (NSString *fileName in childerFiles) &#123;</div><div class="line">            NSString *absolutePath=[path stringByAppendingPathComponent:fileName];</div><div class="line">            folderSize +=[FileService fileSizeAtPath:absolutePath];</div><div class="line">        &#125;</div><div class="line">　　　　　//SDWebImage框架自身计算缓存的实现</div><div class="line">        folderSize+=[[SDImageCache sharedImageCache] getSize]/1024.0/1024.0;</div><div class="line">        return folderSize;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="清理缓存文件"><a href="#清理缓存文件" class="headerlink" title="清理缓存文件"></a><strong>清理缓存文件</strong></h5><p>同样也是利用NSFileManager API进行文件操作，SDWebImage框架自己实现了清理缓存操作，我们可以直接调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+(void)clearCache:(NSString *)path&#123;</div><div class="line">    NSFileManager *fileManager=[NSFileManager defaultManager];</div><div class="line">    if ([fileManager fileExistsAtPath:path]) &#123;</div><div class="line">        NSArray *childerFiles=[fileManager subpathsAtPath:path];</div><div class="line">        for (NSString *fileName in childerFiles) &#123;</div><div class="line">            //如有需要，加入条件，过滤掉不想删除的文件</div><div class="line">            NSString *absolutePath=[path stringByAppendingPathComponent:fileName];</div><div class="line">            [fileManager removeItemAtPath:absolutePath error:nil];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    [[SDImageCache sharedImageCache] cleanDisk];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="比较number型的数据是否相同"><a href="#比较number型的数据是否相同" class="headerlink" title="比较number型的数据是否相同"></a>比较number型的数据是否相同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSNumber *num1 = [[NSNumber alloc]initWithInt:10];</div><div class="line">NSNumber *num2 = [NSNumber numberWithInt:10];</div><div class="line">//isEqualToNumber: 比较的是对象中存储的数据</div><div class="line">BOOL isEqual = [num1 isEqualToNumber:num2];</div><div class="line">NSLog(@&quot;isEqual=%d&quot;, isEqual);</div><div class="line">    </div><div class="line">NSNumber *num = [NSNumber numberWithInt:score];</div></pre></td></tr></table></figure>
<h4 id="比较字符串的大小"><a href="#比较字符串的大小" class="headerlink" title="比较字符串的大小"></a>比较字符串的大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">NSString *str1=@&quot;xuzhonglin&quot;;</div><div class="line">NSString *str2=@&quot;sunkeqiang&quot;;</div><div class="line">NSComparisonResult result = [str1 caseInsensitiveCompare:str2];</div><div class="line">if (result == NSOrderedAscending)&#123;</div><div class="line">    NSLog(@&quot;升序，str1&lt;str2&quot;);</div><div class="line">&#125;else if(result == NSOrderedSame)&#123;</div><div class="line">    NSLog(@&quot;大小相同&quot;);</div><div class="line">&#125;else if (result == NSOrderedDescending)&#123;</div><div class="line">    NSLog(@&quot;降序，str1&gt;str2&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发技巧(一)]]></title>
      <url>http://yoursite.com/2017/01/16/iOS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="常用代码块"><a href="#常用代码块" class="headerlink" title="常用代码块"></a>常用代码块</h2><h4 id="遍历可变数组的同时删除数组元素"><a href="#遍历可变数组的同时删除数组元素" class="headerlink" title="遍历可变数组的同时删除数组元素"></a>遍历可变数组的同时删除数组元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSMutableArray *copyArray = [NSMutableArray arrayWithArray:array];   </div><div class="line">NSString *str1 = @“zhangsan”;  </div><div class="line">for (AddressPerson *perName in copyArray) &#123;  </div><div class="line">    if ([[perName name] isEqualToString:str1]) &#123;  </div><div class="line">        [array removeObject:perName];  </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="获取系统当前语言"><a href="#获取系统当前语言" class="headerlink" title="获取系统当前语言"></a><strong>获取系统当前语言</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">NSString *currentLanguage = [[NSLocale preferredLanguages] objectAtIndex:0];</div><div class="line">NSLog(@&quot;currentlanguage = %@&quot;,currentLanguage);</div><div class="line"></div><div class="line">if ([currentLanguage containsString:@&quot;zh-Hans&quot;]) &#123;</div><div class="line">    NSLog(@&quot;zh-Hans简体中文&quot;);</div><div class="line">&#125;else if ([currentLanguage containsString:@&quot;zh-Hant&quot;]) &#123;</div><div class="line">    NSLog(@&quot;zh-Hant繁体中文&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 当前所在地信息</div><div class="line">NSString *identifier = [[NSLocalecurrentLocale] localeIdentifier];</div><div class="line">NSString *displayName = [[NSLocale currentLocale] displayNameForKey:NSLocaleIdentifiervalue:identifier];</div><div class="line">NSLog(@&apos;%@&apos;, displayName);</div><div class="line">// 当前所在地的使用语言</div><div class="line">NSLocale *currentLocale = [NSLocale currentLocale];</div><div class="line">NSLog(@&apos;Language Code is %@&apos;, [currentLocale objectForKey:NSLocaleLanguageCode]);</div><div class="line">// 系统语言</div><div class="line">NSArray *arLanguages = [[NSUserDefaultsstandardUserDefaults] objectForKey:@&apos;AppleLanguages&apos;];</div><div class="line">NSString *strLang = [arLanguages objectAtIndex:0];</div><div class="line">NSLog(@&apos;LANG:%@&apos;,strLang);</div></pre></td></tr></table></figure>
<h4 id="UITableView的Group样式下顶部空白处理"><a href="#UITableView的Group样式下顶部空白处理" class="headerlink" title="UITableView的Group样式下顶部空白处理"></a><strong>UITableView的Group样式下顶部空白处理</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, 0.1)];</div><div class="line">self.tableView.tableHeaderView = view;</div></pre></td></tr></table></figure>
<h4 id="UITableView的plain样式下，取消区头停滞效果"><a href="#UITableView的plain样式下，取消区头停滞效果" class="headerlink" title="UITableView的plain样式下，取消区头停滞效果"></a><strong>UITableView的plain样式下，取消区头停滞效果</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView</div><div class="line">&#123;</div><div class="line">    CGFloat sectionHeaderHeight = sectionHead.height;</div><div class="line">    if (scrollView.contentOffset.y&lt;=sectionHeaderHeight&amp;&amp;scrollView;.contentOffset.y&gt;=0)</div><div class="line">    &#123;</div><div class="line">        scrollView.contentInset = UIEdgeInsetsMake(-scrollView.contentOffset.y, 0, 0, 0);</div><div class="line">    &#125;</div><div class="line">    else if(scrollView.contentOffset.y&gt;=sectionHeaderHeight)</div><div class="line">    &#123;</div><div class="line">        scrollView.contentInset = UIEdgeInsetsMake(-sectionHeaderHeight, 0, 0, 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取某个view所在的控制器"><a href="#获取某个view所在的控制器" class="headerlink" title="获取某个view所在的控制器"></a><strong>获取某个view所在的控制器</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (UIViewController *)viewController</div><div class="line">&#123;</div><div class="line">  UIViewController *viewController = nil;  </div><div class="line">  UIResponder *next = self.nextResponder;</div><div class="line">  while (next)</div><div class="line">  &#123;</div><div class="line">    if ([next isKindOfClass:[UIViewController class]])</div><div class="line">    &#123;</div><div class="line">      viewController = (UIViewController *)next;      </div><div class="line">      break;    </div><div class="line">    &#125;    </div><div class="line">    next = next.nextResponder;  </div><div class="line">  &#125; </div><div class="line">    return viewController;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="两种方法删除NSUserDefaults所有记录"><a href="#两种方法删除NSUserDefaults所有记录" class="headerlink" title="两种方法删除NSUserDefaults所有记录"></a><strong>两种方法删除NSUserDefaults所有记录</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">NSString *appDomain = [[NSBundle mainBundle] bundleIdentifier];</div><div class="line">[[NSUserDefaults standardUserDefaults] removePersistentDomainForName:appDomain];</div><div class="line"></div><div class="line"></div><div class="line">//方法二</div><div class="line">- (void)resetDefaults</div><div class="line">&#123;</div><div class="line">    NSUserDefaults * defs = [NSUserDefaults standardUserDefaults];</div><div class="line">    NSDictionary * dict = [defs dictionaryRepresentation];</div><div class="line">    for (id key in dict)</div><div class="line">    &#123;</div><div class="line">        [defs removeObjectForKey:key];</div><div class="line">    &#125;</div><div class="line">    [defs synchronize];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="打印系统所有已注册的字体名称"><a href="#打印系统所有已注册的字体名称" class="headerlink" title="打印系统所有已注册的字体名称"></a><strong>打印系统所有已注册的字体名称</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void enumerateFonts()</div><div class="line">&#123;</div><div class="line">    for(NSString *familyName in [UIFont familyNames])</div><div class="line">   &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,familyName);               </div><div class="line">        NSArray *fontNames = [UIFont fontNamesForFamilyName:familyName];       </div><div class="line">        for(NSString *fontName in fontNames)</div><div class="line">       &#123;</div><div class="line">            NSLog(@&quot;\t|- %@&quot;,fontName);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取图片某一点的颜色"><a href="#获取图片某一点的颜色" class="headerlink" title="获取图片某一点的颜色"></a><strong>获取图片某一点的颜色</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (UIColor*) getPixelColorAtLocation:(CGPoint)point inImage:(UIImage *)image</div><div class="line">&#123;</div><div class="line"></div><div class="line">    UIColor* color = nil;</div><div class="line">    CGImageRef inImage = image.CGImage;</div><div class="line">    CGContextRef cgctx = [self createARGBBitmapContextFromImage:inImage];</div><div class="line"></div><div class="line">    if (cgctx == NULL) &#123;</div><div class="line">        return nil; /* error */</div><div class="line">    &#125;</div><div class="line">    size_t w = CGImageGetWidth(inImage);</div><div class="line">    size_t h = CGImageGetHeight(inImage);</div><div class="line">    CGRect rect = &#123;&#123;0,0&#125;,&#123;w,h&#125;&#125;;</div><div class="line"></div><div class="line">    CGContextDrawImage(cgctx, rect, inImage);</div><div class="line">    unsigned char* data = CGBitmapContextGetData (cgctx);</div><div class="line">    if (data != NULL) &#123;</div><div class="line">        int offset = 4*((w*round(point.y))+round(point.x));</div><div class="line">        int alpha =  data[offset];</div><div class="line">        int red = data[offset+1];</div><div class="line">        int green = data[offset+2];</div><div class="line">        int blue = data[offset+3];</div><div class="line">        color = [UIColor colorWithRed:(red/255.0f) green:(green/255.0f) blue:</div><div class="line">                 (blue/255.0f) alpha:(alpha/255.0f)];</div><div class="line">    &#125;</div><div class="line">    CGContextRelease(cgctx);</div><div class="line">    if (data) &#123;</div><div class="line">        free(data);</div><div class="line">    &#125;</div><div class="line">    return color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a><strong>字符串反转</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//第一种：</div><div class="line">- (NSString *)reverseWordsInString:(NSString *)str</div><div class="line">&#123;    </div><div class="line">    NSMutableString *newString = [[NSMutableString alloc] initWithCapacity:str.length];</div><div class="line">    for (NSInteger i = str.length - 1; i &gt;= 0 ; i --)</div><div class="line">    &#123;</div><div class="line">        unichar ch = [str characterAtIndex:i];       </div><div class="line">        [newString appendFormat:@&quot;%c&quot;, ch];    </div><div class="line">    &#125;    </div><div class="line">     return newString;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//第二种：</div><div class="line">- (NSString*)reverseWordsInString:(NSString*)str</div><div class="line">&#123;    </div><div class="line">     NSMutableString *reverString = [NSMutableString stringWithCapacity:str.length];    </div><div class="line">     [str enumerateSubstringsInRange:NSMakeRange(0, str.length) options:NSStringEnumerationReverse | NSStringEnumerationByComposedCharacterSequences  usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) &#123; </div><div class="line">          [reverString appendString:substring];                         </div><div class="line">      &#125;];    </div><div class="line">     return reverString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="禁止锁屏"><a href="#禁止锁屏" class="headerlink" title="禁止锁屏"></a><strong>禁止锁屏</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//第一种</div><div class="line">[UIApplication sharedApplication].idleTimerDisabled = YES;</div><div class="line">//第二种</div><div class="line">[[UIApplication sharedApplication] setIdleTimerDisabled:YES];</div></pre></td></tr></table></figure>
<h4 id="模态推出透明界面"><a href="#模态推出透明界面" class="headerlink" title="模态推出透明界面"></a><strong>模态推出透明界面</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">UIViewController *vc = [[UIViewController alloc] init];</div><div class="line">UINavigationController *na = [[UINavigationController alloc] initWithRootViewController:vc];</div><div class="line"></div><div class="line">if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8.0)</div><div class="line">&#123;</div><div class="line">     na.modalPresentationStyle = UIModalPresentationOverCurrentContext;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">     self.modalPresentationStyle=UIModalPresentationCurrentContext;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[self presentViewController:na animated:YES completion:nil];</div></pre></td></tr></table></figure>
<h4 id="iOS跳转到App-Store下载应用评分"><a href="#iOS跳转到App-Store下载应用评分" class="headerlink" title="iOS跳转到App Store下载应用评分"></a><strong>iOS跳转到App Store下载应用评分</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;itms-apps://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;id=APPID&quot;]];</div></pre></td></tr></table></figure>
<h4 id="手动更改iOS状态栏的颜色"><a href="#手动更改iOS状态栏的颜色" class="headerlink" title="手动更改iOS状态栏的颜色"></a><strong>手动更改iOS状态栏的颜色</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)setStatusBarBackgroundColor:(UIColor *)color</div><div class="line">&#123;</div><div class="line">    UIView *statusBar = [[[UIApplication sharedApplication] valueForKey:@&quot;statusBarWindow&quot;] valueForKey:@&quot;statusBar&quot;];</div><div class="line"></div><div class="line">    if ([statusBar respondsToSelector:@selector(setBackgroundColor:)])</div><div class="line">    &#123;</div><div class="line">        statusBar.backgroundColor = color;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断当前ViewController是push还是present的方式显示"><a href="#判断当前ViewController是push还是present的方式显示" class="headerlink" title="判断当前ViewController是push还是present的方式显示"></a><strong>判断当前ViewController是push还是present的方式显示</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NSArray *viewcontrollers=self.navigationController.viewControllers;</div><div class="line"></div><div class="line">if (viewcontrollers.count &gt; 1)</div><div class="line">&#123;</div><div class="line">    if ([viewcontrollers objectAtIndex:viewcontrollers.count - 1] == self)</div><div class="line">    &#123;</div><div class="line">        //push方式</div><div class="line">       [self.navigationController popViewControllerAnimated:YES];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">    //present方式</div><div class="line">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取实际使用的LaunchImage图片"><a href="#获取实际使用的LaunchImage图片" class="headerlink" title="获取实际使用的LaunchImage图片"></a><strong>获取实际使用的LaunchImage图片</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (NSString *)getLaunchImageName</div><div class="line">&#123;</div><div class="line">    CGSize viewSize = self.window.bounds.size;</div><div class="line">    // 竖屏    </div><div class="line">    NSString *viewOrientation = @&quot;Portrait&quot;;  </div><div class="line">    NSString *launchImageName = nil;    </div><div class="line">    NSArray* imagesDict = [[[NSBundle mainBundle] infoDictionary] valueForKey:@&quot;UILaunchImages&quot;];</div><div class="line">    for (NSDictionary* dict in imagesDict)</div><div class="line">    &#123;</div><div class="line">        CGSize imageSize = CGSizeFromString(dict[@&quot;UILaunchImageSize&quot;]);</div><div class="line">        if (CGSizeEqualToSize(imageSize, viewSize) &amp;&amp; [viewOrientation isEqualToString:dict[@&quot;UILaunchImageOrientation&quot;]])</div><div class="line">        &#123;</div><div class="line">            launchImageName = dict[@&quot;UILaunchImageName&quot;];        </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">    return launchImageName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="iOS在当前屏幕获取第一响应"><a href="#iOS在当前屏幕获取第一响应" class="headerlink" title="iOS在当前屏幕获取第一响应"></a><strong>iOS在当前屏幕获取第一响应</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIWindow * keyWindow = [[UIApplication sharedApplication] keyWindow];</div><div class="line">UIView * firstResponder = [keyWindow performSelector:@selector(firstResponder)];</div></pre></td></tr></table></figure>
<h4 id="判断对象是否遵循了某协议"><a href="#判断对象是否遵循了某协议" class="headerlink" title="判断对象是否遵循了某协议"></a><strong>判断对象是否遵循了某协议</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ([self.selectedController conformsToProtocol:@protocol(RefreshPtotocol)])</div><div class="line">&#123;</div><div class="line">     [self.selectedController performSelector:@selector(onTriggerRefresh)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断view是不是指定视图的子视图"><a href="#判断view是不是指定视图的子视图" class="headerlink" title="判断view是不是指定视图的子视图"></a><strong>判断view是不是指定视图的子视图</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL isView = [textView isDescendantOfView:self.view];</div></pre></td></tr></table></figure>
<h4 id="NSArray-快速求总和-最大值-最小值-和-平均值"><a href="#NSArray-快速求总和-最大值-最小值-和-平均值" class="headerlink" title="NSArray 快速求总和 最大值 最小值 和 平均值"></a><strong>NSArray 快速求总和 最大值 最小值 和 平均值</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSArray *array = [NSArray arrayWithObjects:@&quot;2.0&quot;, @&quot;2.3&quot;, @&quot;3.0&quot;, @&quot;4.0&quot;, @&quot;10&quot;, nil];</div><div class="line">CGFloat sum = [[array valueForKeyPath:@&quot;@sum.floatValue&quot;] floatValue];</div><div class="line">CGFloat avg = [[array valueForKeyPath:@&quot;@avg.floatValue&quot;] floatValue];</div><div class="line">CGFloat max =[[array valueForKeyPath:@&quot;@max.floatValue&quot;] floatValue];</div><div class="line">CGFloat min =[[array valueForKeyPath:@&quot;@min.floatValue&quot;] floatValue];</div><div class="line">NSLog(@&quot;%f\n%f\n%f\n%f&quot;,sum,avg,max,min);</div></pre></td></tr></table></figure>
<h4 id="修改UITextField中Placeholder的文字颜色"><a href="#修改UITextField中Placeholder的文字颜色" class="headerlink" title="修改UITextField中Placeholder的文字颜色"></a><strong>修改UITextField中Placeholder的文字颜色</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[textField setValue:[UIColor redColor] forKeyPath:@&quot;_placeholderLabel.textColor&quot;];</div></pre></td></tr></table></figure>
<h4 id="获取一个类的所有子类"><a href="#获取一个类的所有子类" class="headerlink" title="获取一个类的所有子类"></a><strong>获取一个类的所有子类</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">+ (NSArray *) allSubclasses</div><div class="line">&#123;</div><div class="line">    Class myClass = [self class];</div><div class="line">    NSMutableArray *mySubclasses = [NSMutableArray array];</div><div class="line">    unsigned int numOfClasses;</div><div class="line">    Class *classes = objc_copyClassList(&amp;numOfClasses;);</div><div class="line">    for (unsigned int ci = 0; ci &lt; numOfClasses; ci++)</div><div class="line">    &#123;</div><div class="line">        Class superClass = classes[ci];</div><div class="line">        do&#123;</div><div class="line">            superClass = class_getSuperclass(superClass);</div><div class="line">        &#125; while (superClass &amp;&amp; superClass != myClass);</div><div class="line"></div><div class="line">        if (superClass)</div><div class="line">        &#123;</div><div class="line">            [mySubclasses addObject: classes[ci]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    free(classes);</div><div class="line">    return mySubclasses;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="阿拉伯数字转中文格式"><a href="#阿拉伯数字转中文格式" class="headerlink" title="阿拉伯数字转中文格式"></a><strong>阿拉伯数字转中文格式</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">+(NSString *)translation:(NSString *)arebic</div><div class="line">&#123;  </div><div class="line">    NSString *str = arebic;</div><div class="line">    NSArray *arabic_numerals = @[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;,@&quot;5&quot;,@&quot;6&quot;,@&quot;7&quot;,@&quot;8&quot;,@&quot;9&quot;,@&quot;0&quot;];</div><div class="line">    NSArray *chinese_numerals = @[@&quot;一&quot;,@&quot;二&quot;,@&quot;三&quot;,@&quot;四&quot;,@&quot;五&quot;,@&quot;六&quot;,@&quot;七&quot;,@&quot;八&quot;,@&quot;九&quot;,@&quot;零&quot;];</div><div class="line">    NSArray *digits = @[@&quot;个&quot;,@&quot;十&quot;,@&quot;百&quot;,@&quot;千&quot;,@&quot;万&quot;,@&quot;十&quot;,@&quot;百&quot;,@&quot;千&quot;,@&quot;亿&quot;,@&quot;十&quot;,@&quot;百&quot;,@&quot;千&quot;,@&quot;兆&quot;];</div><div class="line">    NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:chinese_numerals forKeys:arabic_numerals];</div><div class="line"></div><div class="line">    NSMutableArray *sums = [NSMutableArray array];</div><div class="line">    for (int i = 0; i &lt; str.length; i ++) &#123;</div><div class="line">        NSString *substr = [str substringWithRange:NSMakeRange(i, 1)];</div><div class="line">        NSString *a = [dictionary objectForKey:substr];</div><div class="line">        NSString *b = digits[str.length -i-1];</div><div class="line">        NSString *sum = [a stringByAppendingString:b];</div><div class="line">        if ([a isEqualToString:chinese_numerals[9]])</div><div class="line">        &#123;</div><div class="line">            if([b isEqualToString:digits[4]] || [b isEqualToString:digits[8]])</div><div class="line">            &#123;</div><div class="line">                sum = b;</div><div class="line">                if ([[sums lastObject] isEqualToString:chinese_numerals[9]])</div><div class="line">                &#123;</div><div class="line">                    [sums removeLastObject];</div><div class="line">                &#125;</div><div class="line">            &#125;else</div><div class="line">            &#123;</div><div class="line">                sum = chinese_numerals[9];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if ([[sums lastObject] isEqualToString:sum])</div><div class="line">            &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [sums addObject:sum];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NSString *sumStr = [sums componentsJoinedByString:@&quot;&quot;];</div><div class="line">    NSString *chinese = [sumStr substringToIndex:sumStr.length-1];</div><div class="line">    NSLog(@&quot;%@&quot;,str);</div><div class="line">    NSLog(@&quot;%@&quot;,chinese);</div><div class="line">    return chinese;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="取消UICollectionView的隐式动画"><a href="#取消UICollectionView的隐式动画" class="headerlink" title="取消UICollectionView的隐式动画"></a><strong>取消UICollectionView的隐式动画</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">[UIView performWithoutAnimation:^&#123;</div><div class="line">    [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];</div><div class="line">&#125;];</div><div class="line"></div><div class="line">//方法二</div><div class="line">[UIView animateWithDuration:0 animations:^&#123;</div><div class="line">    [collectionView performBatchUpdates:^&#123;</div><div class="line">        [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];</div><div class="line">    &#125; completion:nil];</div><div class="line">&#125;];</div><div class="line"></div><div class="line">//方法三</div><div class="line">[UIView setAnimationsEnabled:NO];</div><div class="line">[self.trackPanel performBatchUpdates:^&#123;</div><div class="line">    [collectionView reloadItemsAtIndexPaths:@[[NSIndexPath indexPathForItem:index inSection:0]]];</div><div class="line">&#125; completion:^(BOOL finished) &#123;</div><div class="line">    [UIView setAnimationsEnabled:YES];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h4 id="判断邮箱格式是否正确的代码"><a href="#判断邮箱格式是否正确的代码" class="headerlink" title="判断邮箱格式是否正确的代码"></a><strong>判断邮箱格式是否正确的代码</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-(BOOL)isValidateEmail:(NSString *)email</div><div class="line"></div><div class="line">　　&#123;</div><div class="line"></div><div class="line">　　NSString *emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;;</div><div class="line"></div><div class="line">　　NSPredicate *emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES%@&quot;,emailRegex];</div><div class="line"></div><div class="line">　　return [emailTest evaluateWithObject:email];</div><div class="line"></div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h4 id="iOS中UITextField的字数限制"><a href="#iOS中UITextField的字数限制" class="headerlink" title="iOS中UITextField的字数限制"></a><strong>iOS中UITextField的字数限制</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//在viewDidLoad中注册&lt;UITextFieldTextDidChangeNotification&gt;通知</div><div class="line">[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(textFiledEditChanged:) </div><div class="line">          name:@&quot;UITextFieldTextDidChangeNotification&quot; object:myTextField];</div><div class="line">//实现监听方法</div><div class="line">#pragma mark - Notification Method</div><div class="line">-(void)textFieldEditChanged:(NSNotification *)obj</div><div class="line">&#123;</div><div class="line">    UITextField *textField = (UITextField *)obj.object;</div><div class="line">    NSString *toBeString = textField.text;</div><div class="line"></div><div class="line">    //获取高亮部分</div><div class="line">    UITextRange *selectedRange = [textField markedTextRange];</div><div class="line">    UITextPosition *position = [textField positionFromPosition:selectedRange.start offset:0];</div><div class="line"></div><div class="line">    // 没有高亮选择的字，则对已输入的文字进行字数统计和限制</div><div class="line">    if (!position)</div><div class="line">    &#123;</div><div class="line">        if (toBeString.length &gt; MAX_STARWORDS_LENGTH)</div><div class="line">        &#123;</div><div class="line">            NSRange rangeIndex = [toBeString rangeOfComposedCharacterSequenceAtIndex:MAX_STARWORDS_LENGTH];</div><div class="line">            if (rangeIndex.length == 1)</div><div class="line">            &#123;</div><div class="line">                textField.text = [toBeString substringToIndex:MAX_STARWORDS_LENGTH];</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                NSRange rangeRange = [toBeString rangeOfComposedCharacterSequencesForRange:NSMakeRange(0, MAX_STARWORDS_LENGTH)];</div><div class="line">                textField.text = [toBeString substringWithRange:rangeRange];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="GCD定时器"><a href="#GCD定时器" class="headerlink" title="GCD定时器"></a><strong>GCD定时器</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);</div><div class="line">dispatch_source_set_timer(timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行</div><div class="line">dispatch_source_set_event_handler(timer, ^&#123;</div><div class="line">    //倒计时结束，关闭</div><div class="line">    dispatch_source_cancel(timer); </div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">dispatch_resume(timer);</div></pre></td></tr></table></figure>
<h4 id="图片上绘制文字"><a href="#图片上绘制文字" class="headerlink" title="图片上绘制文字"></a><strong>图片上绘制文字</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (UIImage *)imageWithTitle:(NSString *)title fontSize:(CGFloat)fontSize</div><div class="line">&#123;</div><div class="line">    //画布大小</div><div class="line">    CGSize size=CGSizeMake(self.size.width,self.size.height);</div><div class="line">    //创建一个基于位图的上下文</div><div class="line">    UIGraphicsBeginImageContextWithOptions(size,NO,0.0);//opaque:NO  scale:0.0</div><div class="line"></div><div class="line">    [self drawAtPoint:CGPointMake(0.0,0.0)];</div><div class="line"></div><div class="line">    //文字居中显示在画布上</div><div class="line">    NSMutableParagraphStyle* paragraphStyle = [[NSParagraphStyle defaultParagraphStyle] mutableCopy];</div><div class="line">    paragraphStyle.lineBreakMode = NSLineBreakByCharWrapping;</div><div class="line"></div><div class="line">    paragraphStyle.alignment=NSTextAlignmentCenter;//文字居中</div><div class="line"></div><div class="line">    //计算文字所占的size,文字居中显示在画布上</div><div class="line">    CGSize sizeText=[title boundingRectWithSize:self.size options:NSStringDrawingUsesLineFragmentOrigin</div><div class="line">                                     attributes:@&#123;NSFontAttributeName:[UIFont systemFontOfSize:fontSize]&#125;context:nil].size;</div><div class="line">    CGFloat width = self.size.width;</div><div class="line">    CGFloat height = self.size.height;</div><div class="line"></div><div class="line">    CGRect rect = CGRectMake((width-sizeText.width)/2, (height-sizeText.height)/2, sizeText.width, sizeText.height);</div><div class="line">    //绘制文字</div><div class="line">    [title drawInRect:rect withAttributes:@&#123; NSFontAttributeName:[UIFont systemFontOfSize:fontSize],NSForegroundColorAttributeName:[ UIColor whiteColor],NSParagraphStyleAttributeName:paragraphStyle&#125;];</div><div class="line"></div><div class="line">    //返回绘制的新图形</div><div class="line">    UIImage *newImage= UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">    UIGraphicsEndImageContext();</div><div class="line">    return newImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="查找一个视图的所有子视图"><a href="#查找一个视图的所有子视图" class="headerlink" title="查找一个视图的所有子视图"></a><strong>查找一个视图的所有子视图</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (NSMutableArray *)allSubViewsForView:(UIView *)view</div><div class="line">&#123;</div><div class="line">    NSMutableArray *array = [NSMutableArray arrayWithCapacity:0];</div><div class="line">    for (UIView *subView in view.subviews)</div><div class="line">    &#123;</div><div class="line">        [array addObject:subView];</div><div class="line">        if (subView.subviews.count &gt; 0)</div><div class="line">        &#123;</div><div class="line">            [array addObjectsFromArray:[self allSubViewsForView:subView]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return array;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="计算文件大小"><a href="#计算文件大小" class="headerlink" title="计算文件大小"></a><strong>计算文件大小</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//文件大小</div><div class="line">- (long long)fileSizeAtPath:(NSString *)path</div><div class="line">&#123;</div><div class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</div><div class="line"></div><div class="line">    if ([fileManager fileExistsAtPath:path])</div><div class="line">    &#123;</div><div class="line">        long long size = [fileManager attributesOfItemAtPath:path error:nil].fileSize;</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//文件夹大小</div><div class="line">- (long long)folderSizeAtPath:(NSString *)path</div><div class="line">&#123;</div><div class="line">    NSFileManager *fileManager = [NSFileManager defaultManager];</div><div class="line"></div><div class="line">    long long folderSize = 0;</div><div class="line"></div><div class="line">    if ([fileManager fileExistsAtPath:path])</div><div class="line">    &#123;</div><div class="line">        NSArray *childerFiles = [fileManager subpathsAtPath:path];</div><div class="line">        for (NSString *fileName in childerFiles)</div><div class="line">        &#123;</div><div class="line">            NSString *fileAbsolutePath = [path stringByAppendingPathComponent:fileName];</div><div class="line">            if ([fileManager fileExistsAtPath:fileAbsolutePath])</div><div class="line">            &#123;</div><div class="line">                long long size = [fileManager attributesOfItemAtPath:fileAbsolutePath error:nil].fileSize;</div><div class="line">                folderSize += size;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return folderSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UIView的设置部分圆角"><a href="#UIView的设置部分圆角" class="headerlink" title="UIView的设置部分圆角"></a><strong>UIView的设置部分圆角</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CGRect rect = view.bounds;</div><div class="line">CGSize radio = CGSizeMake(30, 30);//圆角尺寸</div><div class="line">UIRectCorner corner = UIRectCornerTopLeft|UIRectCornerTopRight;//这只圆角位置</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:corner cornerRadii:radio];</div><div class="line">CAShapeLayer *masklayer = [[CAShapeLayer alloc]init];//创建shapelayer</div><div class="line">masklayer.frame = view.bounds;</div><div class="line">masklayer.path = path.CGPath;//设置路径</div><div class="line">view.layer.mask = masklayer;</div></pre></td></tr></table></figure>
<h4 id="计算字符串字符长度，一个汉字算两个字符"><a href="#计算字符串字符长度，一个汉字算两个字符" class="headerlink" title="计算字符串字符长度，一个汉字算两个字符"></a><strong>计算字符串字符长度，一个汉字算两个字符</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//方法一：</div><div class="line">- (int)convertToInt:(NSString*)strtemp</div><div class="line">&#123;</div><div class="line">    int strlength = 0;</div><div class="line">    char* p = (char*)[strtemp cStringUsingEncoding:NSUnicodeStringEncoding];</div><div class="line">    for (int i=0 ; i&lt;[strtemp lengthOfBytesUsingEncoding:NSUnicodeStringEncoding] ;i++)</div><div class="line">    &#123;</div><div class="line">        if (*p)</div><div class="line">        &#123;</div><div class="line">            p++;</div><div class="line">            strlength++;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            p++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return strlength;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//方法二：</div><div class="line">-(NSUInteger) unicodeLengthOfString: (NSString *) text</div><div class="line">&#123;</div><div class="line">    NSUInteger asciiLength = 0;</div><div class="line">    for (NSUInteger i = 0; i &lt; text.length; i++)</div><div class="line">    &#123;</div><div class="line">        unichar uc = [text characterAtIndex: i];</div><div class="line">        asciiLength += isascii(uc) ? 1 : 2;</div><div class="line">    &#125;</div><div class="line">    return asciiLength;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="防止滚动视图手势覆盖侧滑手势"><a href="#防止滚动视图手势覆盖侧滑手势" class="headerlink" title="防止滚动视图手势覆盖侧滑手势"></a><strong>防止滚动视图手势覆盖侧滑手势</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[scrollView.panGestureRecognizer requireGestureRecognizerToFail:self.navigationController.interactivePopGestureRecognizer];</div></pre></td></tr></table></figure>
<h4 id="去掉导航栏返回的标题"><a href="#去掉导航栏返回的标题" class="headerlink" title="去掉导航栏返回的标题"></a><strong>去掉导航栏返回的标题</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIBarButtonItem appearance]setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60)forBarMetrics:UIBarMetricsDefault];</div></pre></td></tr></table></figure>
<h4 id="字符串中是否含有中文"><a href="#字符串中是否含有中文" class="headerlink" title="字符串中是否含有中文"></a><strong>字符串中是否含有中文</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)checkIsChinese:(NSString *)string</div><div class="line">&#123;</div><div class="line">    for (int i=0; i&lt;string.length; i++)</div><div class="line">    &#123;</div><div class="line">        unichar ch = [string characterAtIndex:i];</div><div class="line">        if (0x4E00 &lt;= ch  &amp;&amp; ch &lt;= 0x9FA5)</div><div class="line">        &#123;</div><div class="line">            return YES;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="dispatch-group的使用"><a href="#dispatch-group的使用" class="headerlink" title="dispatch_group的使用"></a><strong>dispatch_group的使用</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t dispatchGroup = dispatch_group_create();</div><div class="line">    dispatch_group_enter(dispatchGroup);</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;第一个请求完成&quot;);</div><div class="line">        dispatch_group_leave(dispatchGroup);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_enter(dispatchGroup);</div><div class="line"></div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(10 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;第二个请求完成&quot;);</div><div class="line">        dispatch_group_leave(dispatchGroup);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    dispatch_group_notify(dispatchGroup, dispatch_get_main_queue(), ^()&#123;</div><div class="line">        NSLog(@&quot;请求完成&quot;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h4 id="UITextField每四位加一个空格，实现代理"><a href="#UITextField每四位加一个空格，实现代理" class="headerlink" title="UITextField每四位加一个空格，实现代理"></a><strong>UITextField每四位加一个空格，实现代理</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    // 四位加一个空格</div><div class="line">    if ([string isEqualToString:@&quot;&quot;])</div><div class="line">    &#123;</div><div class="line">        // 删除字符</div><div class="line">        if ((textField.text.length - 2) % 5 == 0)</div><div class="line">        &#123;</div><div class="line">            textField.text = [textField.text substringToIndex:textField.text.length - 1];</div><div class="line">        &#125;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        if (textField.text.length % 5 == 0)</div><div class="line">        &#123;</div><div class="line">            textField.text = [NSString stringWithFormat:@&quot;%@ &quot;, textField.text];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取手机安装的应用"><a href="#获取手机安装的应用" class="headerlink" title="获取手机安装的应用"></a><strong>获取手机安装的应用</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Class c =NSClassFromString(@&quot;LSApplicationWorkspace&quot;);</div><div class="line">id s = [(id)c performSelector:NSSelectorFromString(@&quot;defaultWorkspace&quot;)];</div><div class="line">NSArray *array = [s performSelector:NSSelectorFromString(@&quot;allInstalledApplications&quot;)];</div><div class="line">for (id item in array)</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;applicationIdentifier&quot;)]);</div><div class="line">    NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;bundleVersion&quot;)]);</div><div class="line">    NSLog(@&quot;%@&quot;,[item performSelector:NSSelectorFromString(@&quot;shortVersionString&quot;)]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="应用内打开系统设置界面"><a href="#应用内打开系统设置界面" class="headerlink" title="应用内打开系统设置界面"></a><strong>应用内打开系统设置界面</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">//iOS8之后</div><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString]];</div><div class="line">//如果App没有添加权限，显示的是设定界面。如果App有添加权限（例如通知），显示的是App的设定界面。</div><div class="line"></div><div class="line">//iOS8之前</div><div class="line">//先添加一个url type，在代码中调用如下代码,即可跳转到设置页面的对应项</div><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;prefs:root=WIFI&quot;]];</div><div class="line"></div><div class="line">/*</div><div class="line">可选值如下：</div><div class="line">About — prefs:root=General&amp;path=About</div><div class="line">Accessibility — prefs:root=General&amp;path=ACCESSIBILITY</div><div class="line">Airplane Mode On — prefs:root=AIRPLANE_MODE</div><div class="line">Auto-Lock — prefs:root=General&amp;path=AUTOLOCK</div><div class="line">Brightness — prefs:root=Brightness</div><div class="line">Bluetooth — prefs:root=General&amp;path=Bluetooth</div><div class="line">Date &amp; Time — prefs:root=General&amp;path=DATE_AND_TIME</div><div class="line">FaceTime — prefs:root=FACETIME</div><div class="line">General — prefs:root=General</div><div class="line">Keyboard — prefs:root=General&amp;path=Keyboard</div><div class="line">iCloud — prefs:root=CASTLE</div><div class="line">iCloud Storage &amp; Backup — prefs:root=CASTLE&amp;path=STORAGE_AND_BACKUP</div><div class="line">International — prefs:root=General&amp;path=INTERNATIONAL</div><div class="line">Location Services — prefs:root=LOCATION_SERVICES</div><div class="line">Music — prefs:root=MUSIC</div><div class="line">Music Equalizer — prefs:root=MUSIC&amp;path=EQ</div><div class="line">Music Volume Limit — prefs:root=MUSIC&amp;path=VolumeLimit</div><div class="line">Network — prefs:root=General&amp;path=Network</div><div class="line">Nike + iPod — prefs:root=NIKE_PLUS_IPOD</div><div class="line">Notes — prefs:root=NOTES</div><div class="line">Notification — prefs:root=NOTIFICATI*****_ID</div><div class="line">Phone — prefs:root=Phone</div><div class="line">Photos — prefs:root=Photos</div><div class="line">Profile — prefs:root=General&amp;path=ManagedConfigurationList</div><div class="line">Reset — prefs:root=General&amp;path=Reset</div><div class="line">Safari — prefs:root=Safari</div><div class="line">Siri — prefs:root=General&amp;path=Assistant</div><div class="line">Sounds — prefs:root=Sounds</div><div class="line">Software Update — prefs:root=General&amp;path=SOFTWARE_UPDATE_LINK</div><div class="line">Store — prefs:root=STORE</div><div class="line">Twitter — prefs:root=TWITTER</div><div class="line">Usage — prefs:root=General&amp;path=USAGE</div><div class="line">VPN — prefs:root=General&amp;path=Network/VPN</div><div class="line">Wallpaper — prefs:root=Wallpaper</div><div class="line">Wi-Fi — prefs:root=WIFI</div><div class="line">  */</div></pre></td></tr></table></figure>
<h4 id="动画暂停再开始"><a href="#动画暂停再开始" class="headerlink" title="动画暂停再开始"></a><strong>动画暂停再开始</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-(void)pauseLayer:(CALayer *)layer</div><div class="line">&#123;</div><div class="line">    CFTimeInterval pausedTime = [layer convertTime:CACurrentMediaTime() fromLayer:nil];</div><div class="line">    layer.speed = 0.0;</div><div class="line">    layer.timeOffset = pausedTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)resumeLayer:(CALayer *)layer</div><div class="line">&#123;</div><div class="line">    CFTimeInterval pausedTime = [layer timeOffset];</div><div class="line">    layer.speed = 1.0;</div><div class="line">    layer.timeOffset = 0.0;</div><div class="line">    layer.beginTime = 0.0;</div><div class="line">    CFTimeInterval timeSincePause = [layer convertTime:CACurrentMediaTime() fromLayer:nil] - pausedTime;</div><div class="line">    layer.beginTime = timeSincePause;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="iOS版中数字的格式化"><a href="#iOS版中数字的格式化" class="headerlink" title="iOS版中数字的格式化"></a><strong>iOS版中数字的格式化</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//通过NSNumberFormatter，同样可以设置NSNumber输出的格式。例如如下代码：</div><div class="line">NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];</div><div class="line">formatter.numberStyle = NSNumberFormatterDecimalStyle;</div><div class="line">NSString *string = [formatter stringFromNumber:[NSNumber numberWithInt:123456789]];</div><div class="line">NSLog(@&quot;Formatted number string:%@&quot;,string);</div><div class="line">//输出结果为：[1223:403] Formatted number string:123,456,789</div><div class="line"></div><div class="line">//其中NSNumberFormatter类有个属性numberStyle，它是一个枚举型，设置不同的值可以输出不同的数字格式。该枚举包括：</div><div class="line">typedef NS_ENUM(NSUInteger, NSNumberFormatterStyle) &#123;</div><div class="line">    NSNumberFormatterNoStyle = kCFNumberFormatterNoStyle,</div><div class="line">    NSNumberFormatterDecimalStyle = kCFNumberFormatterDecimalStyle,</div><div class="line">    NSNumberFormatterCurrencyStyle = kCFNumberFormatterCurrencyStyle,</div><div class="line">    NSNumberFormatterPercentStyle = kCFNumberFormatterPercentStyle,</div><div class="line">    NSNumberFormatterScientificStyle = kCFNumberFormatterScientificStyle,</div><div class="line">    NSNumberFormatterSpellOutStyle = kCFNumberFormatterSpellOutStyle</div><div class="line">&#125;;</div><div class="line">//各个枚举对应输出数字格式的效果如下：其中第三项和最后一项的输出会根据系统设置的语言区域的不同而不同。</div><div class="line">[1243:403] Formatted number string:123456789</div><div class="line">[1243:403] Formatted number string:123,456,789</div><div class="line">[1243:403] Formatted number string:￥123,456,789.00</div><div class="line">[1243:403] Formatted number string:-539,222,988%</div><div class="line">[1243:403] Formatted number string:1.23456789E8</div><div class="line">[1243:403] Formatted number string:一亿二千三百四十五万六千七百八十九</div></pre></td></tr></table></figure>
<h4 id="如何获取的WebView所有的图片地址"><a href="#如何获取的WebView所有的图片地址" class="headerlink" title="如何获取的WebView所有的图片地址"></a><strong>如何获取的WebView所有的图片地址</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//UIWebView</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    //这里是js，主要目的实现对url的获取</div><div class="line">    static  NSString * const jsGetImages =</div><div class="line">    @&quot;function getImages()&#123;\</div><div class="line">    var objs = document.getElementsByTagName(\&quot;img\&quot;);\</div><div class="line">    var imgScr = &apos;&apos;;\</div><div class="line">    for(var i=0;i&lt;objs.length;i++)&#123;\</div><div class="line">    imgScr = imgScr + objs[i].src + &apos;+&apos;;\</div><div class="line">    &#125;;\</div><div class="line">    return imgScr;\</div><div class="line">    &#125;;&quot;;</div><div class="line"></div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsGetImages];//注入js方法</div><div class="line">    NSString *urlResult = [webView stringByEvaluatingJavaScriptFromString:@&quot;getImages()&quot;];</div><div class="line">    NSArray *urlArray = [NSMutableArray arrayWithArray:[urlResult componentsSeparatedByString:@&quot;+&quot;]];</div><div class="line">    //urlResurlt 就是获取到得所有图片的url的拼接；mUrlArray就是所有Url的数组</div><div class="line">&#125;</div><div class="line"></div><div class="line">//WKWebView</div><div class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123;</div><div class="line">    static  NSString * const jsGetImages =</div><div class="line">    @&quot;function getImages()&#123;\</div><div class="line">    var objs = document.getElementsByTagName(\&quot;img\&quot;);\</div><div class="line">    var imgScr = &apos;&apos;;\</div><div class="line">    for(var i=0;i&lt;objs.length;i++)&#123;\</div><div class="line">    imgScr = imgScr + objs[i].src + &apos;+&apos;;\</div><div class="line">    &#125;;\</div><div class="line">    return imgScr;\</div><div class="line">    &#125;;&quot;;</div><div class="line"></div><div class="line">    [webView evaluateJavaScript:jsGetImages completionHandler:nil];</div><div class="line">    [webView evaluateJavaScript:@&quot;getImages()&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,result);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取到的WebView的高度"><a href="#获取到的WebView的高度" class="headerlink" title="获取到的WebView的高度"></a><strong>获取到的WebView的高度</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGFloat height = [[self.webView stringByEvaluatingJavaScriptFromString:@&quot;document.body.offsetHeight&quot;] floatValue];</div></pre></td></tr></table></figure>
<h4 id="导航栏变为纯透明"><a href="#导航栏变为纯透明" class="headerlink" title="导航栏变为纯透明"></a><strong>导航栏变为纯透明</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//第一种方法</div><div class="line">//导航栏纯透明</div><div class="line">[self.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault];</div><div class="line">//去掉导航栏底部的黑线</div><div class="line">self.navigationBar.shadowImage = [UIImage new];</div><div class="line"></div><div class="line">//第二种方法</div><div class="line">[[self.navigationBar subviews] objectAtIndex:0].alpha = 0;</div></pre></td></tr></table></figure>
<h4 id="tabBar变为纯透明"><a href="#tabBar变为纯透明" class="headerlink" title="tabBar变为纯透明"></a><strong>tabBar变为纯透明</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[self.tabBar setBackgroundImage:[UIImage new]];</div><div class="line">self.tabBar.shadowImage = [UIImage new];</div></pre></td></tr></table></figure>
<h4 id="navigationBar根据滑动距离的渐变色实现"><a href="#navigationBar根据滑动距离的渐变色实现" class="headerlink" title="navigationBar根据滑动距离的渐变色实现"></a><strong>navigationBar根据滑动距离的渐变色实现</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//第一种</div><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView</div><div class="line">&#123;</div><div class="line">    CGFloat offsetToShow = 200.0;//滑动多少就完全显示</div><div class="line">    CGFloat alpha = 1 - (offsetToShow - scrollView.contentOffset.y) / offsetToShow;</div><div class="line">    [[self.navigationController.navigationBar subviews] objectAtIndex:0].alpha = alpha;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//第二种</div><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView</div><div class="line">&#123;</div><div class="line">    CGFloat offsetToShow = 200.0;</div><div class="line">    CGFloat alpha = 1 - (offsetToShow - scrollView.contentOffset.y) / offsetToShow;</div><div class="line"></div><div class="line">    [self.navigationController.navigationBar setShadowImage:[UIImage new]];</div><div class="line">    [self.navigationController.navigationBar setBackgroundImage:[self imageWithColor:[[UIColor orangeColor]colorWithAlphaComponent:alpha]] forBarMetrics:UIBarMetricsDefault];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//生成一张纯色的图片</div><div class="line">- (UIImage *)imageWithColor:(UIColor *)color</div><div class="line">&#123;</div><div class="line">    CGRect rect = CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);</div><div class="line">    UIGraphicsBeginImageContext(rect.size);</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    CGContextSetFillColorWithColor(context, [color CGColor]);</div><div class="line">    CGContextFillRect(context, rect);</div><div class="line">    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">    UIGraphicsEndImageContext();</div><div class="line"></div><div class="line">    return theImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用宏"><a href="#常用宏" class="headerlink" title="常用宏"></a>常用宏</h2><h4 id="尺寸宏"><a href="#尺寸宏" class="headerlink" title="尺寸宏"></a>尺寸宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#define StatusBar_HEIGHT 20</div><div class="line"></div><div class="line">#define NavigationBar_HEIGHT 44</div><div class="line"></div><div class="line">#define NavigationBarIcon 20</div><div class="line"></div><div class="line">#define TabBar_HEIGHT 49</div><div class="line"></div><div class="line">#define TabBarIcon 30</div><div class="line"></div><div class="line">#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)</div><div class="line"></div><div class="line">#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)</div></pre></td></tr></table></figure>
<h4 id="打印宏"><a href="#打印宏" class="headerlink" title="打印宏"></a>打印宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//替换NSLog来使用，debug模式下可以打印很多方法名，行信息。</div><div class="line">#ifdef DEBUG</div><div class="line">#   define DLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</div><div class="line">#else  </div><div class="line">#   define DLog(...)  </div><div class="line">#endif</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//直接替换NSLog</div><div class="line">#if DEBUG  </div><div class="line">#define NSLog(FORMAT, ...) fprintf(stderr,&quot;\nfunction:%s line:%d content:%s\n&quot;, __FUNCTION__, __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);  </div><div class="line">#else  </div><div class="line">#define NSLog(FORMAT, ...) nil  </div><div class="line">#endif</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//DEBUG  模式下打印日志,当前行以及弹出一个警告</div><div class="line">#ifdef DEBUG</div><div class="line">#   define ULog(fmt, ...)  &#123; UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&quot;%s\n [Line %d] &quot;, __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:fmt, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@&quot;Ok&quot; otherButtonTitles:nil]; [alert show]; &#125;</div><div class="line">#else</div><div class="line">#   define ULog(...)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#define ITTDEBUG</div><div class="line">#define ITTLOGLEVEL_INFO     10</div><div class="line">#define ITTLOGLEVEL_WARNING  3</div><div class="line">#define ITTLOGLEVEL_ERROR    1</div><div class="line"></div><div class="line">#ifndef ITTMAXLOGLEVEL</div><div class="line"></div><div class="line">#ifdef DEBUG</div><div class="line">#define ITTMAXLOGLEVEL ITTLOGLEVEL_INFO</div><div class="line">#else</div><div class="line">#define ITTMAXLOGLEVEL ITTLOGLEVEL_ERROR</div><div class="line">#endif</div><div class="line"></div><div class="line">#endif</div><div class="line"></div><div class="line">// The general purpose logger. This ignores logging levels.</div><div class="line">#ifdef ITTDEBUG</div><div class="line">#define ITTDPRINT(xx, ...)  NSLog(@&quot;%s(%d): &quot; xx, __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)</div><div class="line">#else</div><div class="line">#define ITTDPRINT(xx, ...)  ((void)0)</div><div class="line">#endif</div><div class="line"></div><div class="line">// Prints the current method&apos;s name.</div><div class="line">#define ITTDPRINTMETHODNAME() ITTDPRINT(@&quot;%s&quot;, __PRETTY_FUNCTION__)</div><div class="line"></div><div class="line">// Log-level based logging macros.</div><div class="line">#if ITTLOGLEVEL_ERROR &lt;= ITTMAXLOGLEVEL</div><div class="line">#define ITTDERROR(xx, ...)  ITTDPRINT(xx, ##__VA_ARGS__)</div><div class="line">#else</div><div class="line">#define ITTDERROR(xx, ...)  ((void)0)</div><div class="line">#endif</div><div class="line"></div><div class="line">#if ITTLOGLEVEL_WARNING &lt;= ITTMAXLOGLEVEL</div><div class="line">#define ITTDWARNING(xx, ...)  ITTDPRINT(xx, ##__VA_ARGS__)</div><div class="line">#else</div><div class="line">#define ITTDWARNING(xx, ...)  ((void)0)</div><div class="line">#endif</div><div class="line"></div><div class="line">#if ITTLOGLEVEL_INFO &lt;= ITTMAXLOGLEVEL</div><div class="line">#define ITTDINFO(xx, ...)  ITTDPRINT(xx, ##__VA_ARGS__)</div><div class="line">#else</div><div class="line">#define ITTDINFO(xx, ...)  ((void)0)</div><div class="line">#endif</div><div class="line"></div><div class="line">#ifdef ITTDEBUG</div><div class="line">#define ITTDCONDITIONLOG(condition, xx, ...) &#123; if ((condition)) &#123; \</div><div class="line">ITTDPRINT(xx, ##__VA_ARGS__); \</div><div class="line">&#125; \</div><div class="line">&#125; ((void)0)</div><div class="line">#else</div><div class="line">#define ITTDCONDITIONLOG(condition, xx, ...) ((void)0)</div><div class="line">#endif</div><div class="line"></div><div class="line">#define ITTAssert(condition, ...)                                       \</div><div class="line">do &#123;                                                                      \</div><div class="line">if (!(condition)) &#123;                                                     \</div><div class="line">[[NSAssertionHandler currentHandler]                                  \</div><div class="line">handleFailureInFunction:[NSString stringWithUTF8String:__PRETTY_FUNCTION__] \</div><div class="line">file:[NSString stringWithUTF8String:__FILE__]  \</div><div class="line">lineNumber:__LINE__                                  \</div><div class="line">description:__VA_ARGS__];                             \</div><div class="line">&#125;                                                                       \</div><div class="line">&#125; while(0)</div></pre></td></tr></table></figure>
<h4 id="系统宏"><a href="#系统宏" class="headerlink" title="系统宏"></a>系统宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//获取版本</div><div class="line">#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]</div><div class="line">#define CurrentSystemVersion [[UIDevice currentDevice] systemVersion]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//获取当前语言</div><div class="line">#define CurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//判断是真机还是模拟器  </div><div class="line">#if TARGET_OS_IPHONE  </div><div class="line">//iPhone Device  </div><div class="line">#endif  </div><div class="line">  </div><div class="line">#if TARGET_IPHONE_SIMULATOR  </div><div class="line">//iPhone Simulator  </div><div class="line">#endif</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//检查系统版本</div><div class="line">#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)</div><div class="line">#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)</div><div class="line">#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</div><div class="line">#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</div><div class="line">#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)</div></pre></td></tr></table></figure>
<h4 id="内存宏"><a href="#内存宏" class="headerlink" title="内存宏"></a>内存宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//使用ARC和不使用ARC</div><div class="line">#if __has_feature(objc_arc)</div><div class="line">//compiling with ARC</div><div class="line">#else</div><div class="line">// compiling without ARC</div><div class="line">#endif</div><div class="line"></div><div class="line">#pragma mark - common functions</div><div class="line">#define RELEASE_SAFELY(__POINTER) &#123; [__POINTER release]; __POINTER = nil; &#125;</div><div class="line"></div><div class="line">//释放一个对象</div><div class="line">#define SAFE_DELETE(P) if(P) &#123; [P release], P = nil; &#125;</div><div class="line"></div><div class="line">#define SAFE_RELEASE(x) [x release];x=nil</div></pre></td></tr></table></figure>
<h4 id="图片宏"><a href="#图片宏" class="headerlink" title="图片宏"></a>图片宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//读取本地图片</div><div class="line">#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]</div><div class="line"></div><div class="line">//定义UIImage对象</div><div class="line">#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]</div><div class="line"></div><div class="line">//定义UIImage对象</div><div class="line">//#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer]]</div><div class="line"></div><div class="line">//前两种宏性能高，省内存</div><div class="line">//第三个没有必要使用，因为我们可以使用Xcode的插件</div></pre></td></tr></table></figure>
<h4 id="颜色宏"><a href="#颜色宏" class="headerlink" title="颜色宏"></a>颜色宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// rgb颜色转换（16进制-&gt;10进制）</div><div class="line">#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</div><div class="line"></div><div class="line">//带有RGBA的颜色设置</div><div class="line">#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]</div><div class="line"></div><div class="line">// 获取RGB颜色</div><div class="line">#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</div><div class="line">#define RGB(r,g,b) RGBA(r,g,b,1.0f)</div><div class="line"></div><div class="line">//背景色</div><div class="line">#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]</div><div class="line"></div><div class="line">//清除背景色</div><div class="line">#define CLEARCOLOR [UIColor clearColor]</div><div class="line"></div><div class="line">#pragma mark - color functions</div><div class="line">#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]</div><div class="line">#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]</div></pre></td></tr></table></figure>
<h4 id="其他宏"><a href="#其他宏" class="headerlink" title="其他宏"></a>其他宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//方正黑体简体字体定义</div><div class="line">#define FONT(F) [UIFont fontWithName:@&quot;FZHTJW--GB1-0&quot; size:F]</div><div class="line"></div><div class="line">//定义一个API</div><div class="line">#define APIURL                @&quot;http://xxxxx/&quot;</div><div class="line">//登陆API</div><div class="line">#define APILogin              [APIURL stringByAppendingString:@&quot;Login&quot;]</div><div class="line"></div><div class="line">//设置View的tag属性</div><div class="line">#define VIEWWITHTAG(_OBJECT, _TAG)    [_OBJECT viewWithTag : _TAG]</div><div class="line">//程序的本地化,引用国际化的文件</div><div class="line">#define MyLocal(x, ...) NSLocalizedString(x, nil)</div><div class="line"></div><div class="line">//G－C－D</div><div class="line">#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</div><div class="line">#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</div><div class="line"></div><div class="line">//NSUserDefaults 实例化</div><div class="line">#define USER_DEFAULT [NSUserDefaults standardUserDefaults]</div><div class="line"></div><div class="line"></div><div class="line">//由角度获取弧度 有弧度获取角度</div><div class="line">#define degreesToRadian(x) (M_PI * (x) / 180.0)</div><div class="line">#define radianToDegrees(radian) (radian*180.0)/(M_PI)</div></pre></td></tr></table></figure>
<h4 id="单例宏"><a href="#单例宏" class="headerlink" title="单例宏"></a>单例宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \</div><div class="line">\</div><div class="line">static classname *shared##classname = nil; \</div><div class="line">\</div><div class="line">+ (classname *)shared##classname \</div><div class="line">&#123; \</div><div class="line">@synchronized(self) \</div><div class="line">&#123; \</div><div class="line">if (shared##classname == nil) \</div><div class="line">&#123; \</div><div class="line">shared##classname = [[self alloc] init]; \</div><div class="line">&#125; \</div><div class="line">&#125; \</div><div class="line">\</div><div class="line">return shared##classname; \</div><div class="line">&#125; \</div><div class="line">\</div><div class="line">+ (id)allocWithZone:(NSZone *)zone \</div><div class="line">&#123; \</div><div class="line">@synchronized(self) \</div><div class="line">&#123; \</div><div class="line">if (shared##classname == nil) \</div><div class="line">&#123; \</div><div class="line">shared##classname = [super allocWithZone:zone]; \</div><div class="line">return shared##classname; \</div><div class="line">&#125; \</div><div class="line">&#125; \</div><div class="line">\</div><div class="line">return nil; \</div><div class="line">&#125; \</div><div class="line">\</div><div class="line">- (id)copyWithZone:(NSZone *)zone \</div><div class="line">&#123; \</div><div class="line">return self; \</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h4 id="CGRect"><a href="#CGRect" class="headerlink" title="CGRect"></a><strong>CGRect</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGRectFromString(&lt;#NSString *string#&gt;)//有字符串恢复出矩形CGRectInset(&lt;#CGRect rect#&gt;, &lt;#CGFloat dx#&gt;, &lt;#CGFloat dy#&gt;)//创建较小或者较大的矩形CGRectIntersectsRect(&lt;#CGRect rect1#&gt;, &lt;#CGRect rect2#&gt;)//判断两巨星是否交叉，是否重叠CGRectZero//高度和宽度为零的，位于（0，0）的矩形常量</div></pre></td></tr></table></figure>
<h4 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a><strong>隐藏状态栏</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[UIApplicationsharedApplication]setStatusBarHidden:&lt;#(BOOL)#&gt; withAnimation:&lt;#(UIStatusBarAnimation)#&gt;//隐藏状态栏</div></pre></td></tr></table></figure>
<h4 id="自动适应父视图大小"><a href="#自动适应父视图大小" class="headerlink" title="自动适应父视图大小"></a><strong>自动适应父视图大小</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.view.autoresizesSubviews=YES;</div><div class="line">self.view.autoresizingMask=UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleHeight;</div></pre></td></tr></table></figure>
<h4 id="UITableView的一些方法"><a href="#UITableView的一些方法" class="headerlink" title="UITableView的一些方法"></a><strong>UITableView的一些方法</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//缩进级别设置为行号，row越大，缩进越多</div><div class="line">  -(NSInteger)tableView:(UITableView*)tableView indentationLevelForRowAtIndexPath:(NSIndexPath*)indexPath&#123;NSIntegerrow=indexPath.row;returnrow;&#125;</div></pre></td></tr></table></figure>
<h4 id="把plist文件中的数据赋给数组"><a href="#把plist文件中的数据赋给数组" class="headerlink" title="把plist文件中的数据赋给数组"></a><strong>把plist文件中的数据赋给数组</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString*path=[[NSBundlemainBundle]pathForResource:@&quot;States&quot;ofType:@&quot;plist&quot;];</div><div class="line">NSArray*array=[NSArrayarrayWithContentsOfFile:path];</div></pre></td></tr></table></figure>
<h4 id="获取触摸的点"><a href="#获取触摸的点" class="headerlink" title="获取触摸的点"></a><strong>获取触摸的点</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(CGPoint)locationInView:(UIView*)view;-(CGPoint)previousLocationInView:(UIView*)view;</div></pre></td></tr></table></figure>
<h4 id="获取触摸的属性"><a href="#获取触摸的属性" class="headerlink" title="获取触摸的属性"></a><strong>获取触摸的属性</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property(nonatomic,readonly)NSTimeIntervaltimestamp;</div><div class="line">@property(nonatomic,readonly)UITouchPhasephase;</div><div class="line">@property(nonatomic,readonly)NSUIntegertapCount;</div></pre></td></tr></table></figure>
<h4 id="从plist中获取数据赋给字典"><a href="#从plist中获取数据赋给字典" class="headerlink" title="从plist中获取数据赋给字典"></a><strong>从plist中获取数据赋给字典</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString*plistPath=[[NSBundlemainBundle]pathForResource:@&quot;book&quot;ofType:@&quot;plist&quot;];</div><div class="line">NSDictionary*dictionary=[NSDictionarydictionaryWithContentsOfFile:plistPath];</div></pre></td></tr></table></figure>
<h4 id="NSUserDefaults注意事项"><a href="#NSUserDefaults注意事项" class="headerlink" title="NSUserDefaults注意事项"></a><strong>NSUserDefaults注意事项</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//设置完了以后如果存储的东西比较重要的话，一定要同步一下[[NSUserDefaultsstandardUserDefaults]synchronize];</div></pre></td></tr></table></figure>
<h4 id="获取Documents目录"><a href="#获取Documents目录" class="headerlink" title="获取Documents目录"></a><strong>获取Documents目录</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString*documentsDirectory=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES)[0];</div></pre></td></tr></table></figure>
<h4 id="获取tmp目录"><a href="#获取tmp目录" class="headerlink" title="获取tmp目录"></a><strong>获取tmp目录</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString*tmpPath=NSTemporaryDirectory();</div></pre></td></tr></table></figure>
<h4 id="利用Safari打开一个链接"><a href="#利用Safari打开一个链接" class="headerlink" title="利用Safari打开一个链接"></a><strong>利用Safari打开一个链接</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSURL*url=[NSURLURLWithString:@&quot;http://baidu.com&quot;];[[UIApplicationsharedApplication]openURL:url];</div></pre></td></tr></table></figure>
<h4 id="利用UIWebView显示pdf文件，网页等等"><a href="#利用UIWebView显示pdf文件，网页等等" class="headerlink" title="利用UIWebView显示pdf文件，网页等等"></a><strong>利用UIWebView显示pdf文件，网页等等</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">UIWebView *webView = [[UIWebView alloc]initWithFrame:self.view.bounds];</div><div class="line"></div><div class="line">webView.delegate = self;</div><div class="line"></div><div class="line">webView.scalesPageToFit = YES;</div><div class="line"></div><div class="line">webView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;</div><div class="line"></div><div class="line">[webView setAllowsInlineMediaPlayback:YES];</div><div class="line"></div><div class="line">[self.view addSubview:webView];</div><div class="line"></div><div class="line">NSString *pdfPath = [[NSBundle mainBundle] pathForResource:@&quot;book&quot; ofType:@&quot;pdf&quot;];</div><div class="line"></div><div class="line">NSURL *url = [NSURL fileURLWithPath:pdfPath];</div><div class="line"></div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:url cachePolicy:(NSURLRequestUseProtocolCachePolicy) timeoutInterval:5];</div></pre></td></tr></table></figure>
<h4 id="UIWebView和html的简单交互"><a href="#UIWebView和html的简单交互" class="headerlink" title="UIWebView和html的简单交互"></a><strong>UIWebView和html的简单交互</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">myWebView=[[UIWebViewalloc]initWithFrame:self.view.bounds];</div><div class="line">[myWebView loadRequest:[NSURLRequestrequestWithURL:[NSURLURLWithString:@&quot;http://www.baidu.com&quot;]]];</div><div class="line">NSError*error;</div><div class="line">NSString*errorString=[NSStringstringWithFormat:@&quot;AnError Occurred;</div><div class="line">%@&quot;,error];[myWebView loadHTMLString:errorString baseURL:nil];</div><div class="line"> //页面跳转了以后，停止载入</div><div class="line">-(void)viewWillDisappear:(BOOL)animated&#123;</div><div class="line">  if(myWebView.isLoading)&#123;</div><div class="line">   [myWebView stopLoading];</div><div class="line">&#125;</div><div class="line">    myWebView.delegate=nil;   [UIApplicationsharedApplication].networkActivityIndicatorVisible=NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="汉字转码"><a href="#汉字转码" class="headerlink" title="汉字转码"></a><strong>汉字转码</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString*oriString=@&quot;\u67aa\u738b&quot;;</div><div class="line">NSString*escapedString=[oriString stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div></pre></td></tr></table></figure>
<h4 id="处理键盘通知"><a href="#处理键盘通知" class="headerlink" title="处理键盘通知"></a><strong>处理键盘通知</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">先注册通知，然后实现具体当键盘弹出来要做什么，键盘收起来要做什么</div><div class="line">  -(void)registerForKeyboardNotifications&#123;</div><div class="line">  keyboardShown=NO;//标记当前键盘是没有显示的</div><div class="line">  [[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(keyboardWasShown:)name:UIKeyboardWillShowNotificationobject:nil];[[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(keyboardWasHidden:)name:UIKeyboardDidHideNotificationobject:nil];</div><div class="line">&#125;//键盘显示要做什么</div><div class="line">-(void)keyboardWasShown:(NSNotification*)notification&#123;</div><div class="line">  if(keyboardShown)&#123;</div><div class="line">    return;</div><div class="line">  &#125;</div><div class="line">  NSDictionary*info=[notification userInfo];</div><div class="line">  NSValue*aValue=[info objectForKey:UIKeyboardFrameBeginUserInfoKey];</div><div class="line">  CGSizekeyboardSize=[aValueCGRectValue].size;</div><div class="line">  CGRectviewFrame=scrollView.frame;</div><div class="line">  viewFrame.size.height=keyboardSize.height;</div><div class="line">  CGRecttextFieldRect=activeField.frame;</div><div class="line">  [scrollView scrollRectToVisible:textFieldRect animated:YES];</div><div class="line">  keyboardShown=YES;</div><div class="line">&#125;</div><div class="line">-(void)keyboardWasHidden:(NSNotification*)notification&#123;</div><div class="line">  NSDictionary*info=[notification userInfo];</div><div class="line">  NSValue*aValue=[info objectForKey:UIKeyboardFrameEndUserInfoKey];</div><div class="line">  CGSizekeyboardSize=[aValueCGRectValue].size;</div><div class="line">  CGRectviewFrame=scrollView.frame;</div><div class="line">  viewFrame.size.height+=keyboardSize.height;</div><div class="line">  scrollView.frame=viewFrame;</div><div class="line">  keyboardShown=NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="点击键盘的next按钮，在不同的textField之间换行"><a href="#点击键盘的next按钮，在不同的textField之间换行" class="headerlink" title="点击键盘的next按钮，在不同的textField之间换行"></a><strong>点击键盘的next按钮，在不同的textField之间换行</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-(BOOL)textFieldShouldReturn:(UITextField*)textField&#123;</div><div class="line">  if([textField returnKeyType]!=UIReturnKeyDone)</div><div class="line">  &#123;</div><div class="line">    NSIntegernextTag=[textField tag]+1;</div><div class="line">    UIView*nextTextField=[self.tableView viewWithTag:nextTag];</div><div class="line">    [nextTextField becomeFirstResponder];</div><div class="line">  &#125;else&#123;</div><div class="line">    [textField resignFirstResponder];</div><div class="line">  &#125;</div><div class="line">  return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="设置日期格式"><a href="#设置日期格式" class="headerlink" title="设置日期格式"></a><strong>设置日期格式</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dateFormatter=[[NSDateFormatteralloc]init];</div><div class="line">dateFormatter.locale=[NSLocalecurrentLocale];</div><div class="line">dateFormatter.calendar=[NSCalendarautoupdatingCurrentCalendar];</div><div class="line">dateFormatter.timeZone=[NSTimeZonedefaultTimeZone];</div><div class="line">dateFormatter.dateStyle=NSDateFormatterShortStyle;</div><div class="line">  NSLog(@&quot;%@&quot;,[dateFormatter stringFromDate:[NSDatedate]]);</div></pre></td></tr></table></figure>
<h4 id="加载大量图片的时候，可以使用"><a href="#加载大量图片的时候，可以使用" class="headerlink" title="加载大量图片的时候，可以使用"></a><strong>加载大量图片的时候，可以使用</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString*imagePath=[[NSBundlemainBundle]pathForResource:@&quot;icon&quot;ofType:@&quot;png&quot;];</div><div class="line">UIImage*myImage=[UIImageimageWithContentsOfFile:imagePath];</div></pre></td></tr></table></figure>
<h4 id="有时候在iPhone游戏中，既要播放背景音乐，同时又要播放比如枪的开火音效"><a href="#有时候在iPhone游戏中，既要播放背景音乐，同时又要播放比如枪的开火音效" class="headerlink" title="有时候在iPhone游戏中，既要播放背景音乐，同时又要播放比如枪的开火音效"></a><strong>有时候在iPhone游戏中，既要播放背景音乐，同时又要播放比如枪的开火音效</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString*musicFilePath=[[NSBundlemainBundle]pathForResource:@&quot;xx&quot;ofType:@&quot;wav&quot;];</div><div class="line">NSURL*musicURL=[NSURL fileURLWithPath:musicFilePath];</div><div class="line">AVAudioPlayer*musicPlayer=[[AVAudioPlayeralloc]initWithContentsOfURL:musicURL error:nil];[musicPlayer prepareToPlay];</div><div class="line">musicPlayer.volume=1;</div><div class="line">musicPlayer.numberOfLoops=-1;//-1表示一直循环</div></pre></td></tr></table></figure>
<h4 id="从通讯录中读取电话号码，去掉数字之间的"><a href="#从通讯录中读取电话号码，去掉数字之间的" class="headerlink" title="从通讯录中读取电话号码，去掉数字之间的-"></a><strong>从通讯录中读取电话号码，去掉数字之间的-</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NSString*originalString=@&quot;(123)123123abc&quot;;</div><div class="line">NSMutableString*strippedString=[NSMutableStringstringWithCapacity:originalString.length];</div><div class="line">NSScanner*scanner=[NSScannerscannerWithString:originalString];</div><div class="line">NSCharacterSet*numbers=[NSCharacterSetcharacterSetWithCharactersInString:@&quot;0123456789&quot;];</div><div class="line">while([scanner isAtEnd]==NO)</div><div class="line">&#123;</div><div class="line">  NSString*buffer;</div><div class="line">  if([scanner scanCharactersFromSet:numbers intoString:&amp;buffer])</div><div class="line">  &#123;</div><div class="line">    [strippedString appendString:buffer];</div><div class="line">  &#125;else&#123;</div><div class="line">    scanner.scanLocation=[scanner scanLocation]+1;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">NSLog(@&quot;%@&quot;,strippedString);</div></pre></td></tr></table></figure>
<h4 id="正则判断：字符串只包含字母和数字"><a href="#正则判断：字符串只包含字母和数字" class="headerlink" title="正则判断：字符串只包含字母和数字"></a><strong>正则判断：字符串只包含字母和数字</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSString*myString=@&quot;Letter1234&quot;;</div><div class="line">NSString*regex=@&quot;[a-z][A-Z][0-9]&quot;;</div><div class="line">NSPredicate*predicate=[NSPredicatepredicateWithFormat:@&quot;SELF MATCHES %@&quot;,regex];</div><div class="line">if([predicate evaluateWithObject:myString])&#123;</div><div class="line">  //implement</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="设置UITableView的滚动条颜色"><a href="#设置UITableView的滚动条颜色" class="headerlink" title="设置UITableView的滚动条颜色"></a><strong>设置UITableView的滚动条颜色</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.tableView.indicatorStyle=UIScrollViewIndicatorStyleWhite;</div><div class="line"></div><div class="line">/*网络编程 开发web等网络应用程序的时候，需要确认网络环境，连接情况等信息。如果没有处理它们，是不会通过apple的审查的。 系统自带的网络检查是原生的，AFNetworking也为我们添加了相关检测机制，所以这个直接在介绍AFNetworking的时候详解吧。*/</div></pre></td></tr></table></figure>
<h4 id="使用NSURLConnection下载数据"><a href="#使用NSURLConnection下载数据" class="headerlink" title="使用NSURLConnection下载数据"></a><strong>使用NSURLConnection下载数据</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//1.创建对象</div><div class="line">  NSMutableURLRequest*request=[NSMutableURLRequestrequestWithURL:[NSURLURLWithString:@&quot;http://www.baidu.com&quot;]];[NSURLConnectionconnectionWithRequest:requestdelegate:self];</div><div class="line">//2.NSURLConnectiondelegate委托方法</div><div class="line">-(void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response&#123;&#125;</div><div class="line">-(void)connection:(NSURLConnection*)connection didReceiveData:(NSData*)data&#123;&#125;</div><div class="line">-(void)connection:(NSURLConnection*)connection didFailWithError:(NSError*)error&#123;&#125;</div><div class="line">-(void)connectionDidFinishLoading:(NSURLConnection*)connection&#123;&#125;</div><div class="line">//3.实现委托方法</div><div class="line">-(void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response&#123;</div><div class="line">  self.receiveData.length=0;//先清空数据</div><div class="line">&#125;</div><div class="line">-(void)connection:(NSURLConnection*)connection didReceiveData:(NSData*)data&#123;</div><div class="line">  [self.receiveData appendData:data];</div><div class="line">&#125;</div><div class="line">-(void)connection:(NSURLConnection*)connection didFailWithError:(NSError*)error&#123;</div><div class="line">  //错误处理</div><div class="line">&#125;</div><div class="line">-(void)connectionDidFinishLoading:(NSURLConnection*)connection&#123;</div><div class="line">  [UIApplicationsharedApplication].networkActivityIndicatorVisible=NO;</div><div class="line">  NSString*returnString=[[NSStringalloc]initWithData:self.receiveData encoding:NSUTF8StringEncoding];</div><div class="line">  firstTimeDownloaded=YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="读取一般性文件"><a href="#读取一般性文件" class="headerlink" title="读取一般性文件"></a><strong>读取一般性文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-(void)readFromTXT&#123;NSString*tmp;NSArray*lines;//将文件转化为一行一行的</div><div class="line">                   lines=[[NSStringstringWithContentsOfFile:@&quot;testFileReadLines.txt&quot;]componentsSeparatedByString:@&quot;\n&quot;];</div><div class="line"> NSEnumerator*nse=[lines objectEnumerator];//读取&lt;&gt;里的内容</div><div class="line"> while(tmp==[nse nextObject])&#123;</div><div class="line">   NSString*stringBetweenBrackets=nil;</div><div class="line">   NSScanner*scanner=[NSScannerscannerWithString:tmp];</div><div class="line">   [scanner scanUpToString:@&quot;&lt;&quot;intoString:nil];</div><div class="line">   [scanner scanString:@&quot;&lt;&quot;intoString:nil];</div><div class="line">   [scanner scanUpToString:@&quot;&gt;&quot;intoString:&amp;stringBetweenBrackets];</div><div class="line">   NSLog(@&quot;%@&quot;,[stringBetweenBrackets description]);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="调用电话，短信，邮件"><a href="#调用电话，短信，邮件" class="headerlink" title="调用电话，短信，邮件"></a><strong>调用电话，短信，邮件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplicationsharedApplication]openURL:[NSURLURLWithString:@&quot;mailto:apple@mac.com?Subject=hello&quot;]];sms://调用短信tel://调用电话itms://打开MobileStore.app</div></pre></td></tr></table></figure>
<h4 id="获取版本信息"><a href="#获取版本信息" class="headerlink" title="获取版本信息"></a><strong>获取版本信息</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIDevice*myDevice=[UIDevicecurrentDevice];</div><div class="line">NSString*systemVersion=myDevice.systemVersion;</div></pre></td></tr></table></figure>
<h4 id="UIWebView的使用"><a href="#UIWebView的使用" class="headerlink" title="UIWebView的使用"></a><strong>UIWebView的使用</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">webView.delegate = self;</div><div class="line"></div><div class="line">(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType &#123;</div><div class="line"></div><div class="line">NSURL *url = request.URL;</div><div class="line"></div><div class="line">NSString *urlStirng = url.absoluteString;</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;,urlStirng);</div><div class="line"></div><div class="line">return YES;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="NSNotificationCenter带参数发送"><a href="#NSNotificationCenter带参数发送" class="headerlink" title="NSNotificationCenter带参数发送"></a><strong>NSNotificationCenter带参数发送</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MPMoviePlayerController*theMovie=[[MPMoviePlayerControlleralloc]initWithContentURL:[NSURL fileURLWithPath:moviePath]];[[NSNotificationCenterdefaultCenter]addObserver:selfselector:@selector(myMovieFinishedCallback:)name:MPMoviePlayerPlaybackDidFinishNotificationobject:theMovie];</div><div class="line">[theMovie play];</div><div class="line">-(void)myMovieFinishedCallback:(NSNotification*)aNotification</div><div class="line">&#123;</div><div class="line">  MPMoviePlayerController*theMovie=[aNotificationobject];[[NSNotificationCenterdefaultCenter]removeObserver:selfname:MPMoviePlayerPlaybackDidFinishNotificationobject:theMovie];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="延迟一段时间执行某个函数"><a href="#延迟一段时间执行某个函数" class="headerlink" title="延迟一段时间执行某个函数"></a><strong>延迟一段时间执行某个函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[selfperformSelector:@selector(dismissModal)withObject:selfafterDelay:1.0];</div></pre></td></tr></table></figure>
<h4 id="用NSDateFormatter调整时间格式代码"><a href="#用NSDateFormatter调整时间格式代码" class="headerlink" title="用NSDateFormatter调整时间格式代码"></a><strong>用NSDateFormatter调整时间格式代码</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSDateFormatter*dateFormatter=[[NSDateFormatteralloc]init];</div><div class="line">dateFormatter.dateFormat=@&quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class="line">NSString*currentDateStr=[dateFormatter stringFromDate:[NSDatedate]];</div></pre></td></tr></table></figure>
<h4 id="iPhone-更改键盘右下角按键的-type"><a href="#iPhone-更改键盘右下角按键的-type" class="headerlink" title="iPhone 更改键盘右下角按键的 type"></a><strong>iPhone 更改键盘右下角按键的 type</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SearchBar*mySearchBar=[[UISearchBaralloc]init];</div><div class="line">mySearchBar.frame=CGRectMake(0,0,self.view.bounds.size.width,44);</div><div class="line">mySearchBar.placeholder=@&quot;placeholderString&quot;;</div><div class="line">mySearchBar.delegate=self;</div><div class="line">[self.view addSubview:mySearchBar];</div><div class="line">UITextField*searchField=[[mySearchBar subviews]lastObject];</div><div class="line">searchField.returnKeyType=UIReturnKeyDone;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用代码块 </tag>
            
            <tag> 常用宏 </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程和GCD]]></title>
      <url>http://yoursite.com/2017/01/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8CGCD/</url>
      <content type="html"><![CDATA[<h5 id="使用NSThread来操作多线程"><a href="#使用NSThread来操作多线程" class="headerlink" title="使用NSThread来操作多线程"></a>使用NSThread来操作多线程</h5><p>不说废话直接上代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> 使用NSThread来操作多线程</div><div class="line"> */</div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">//    //主线程中的循环打印任务1</div><div class="line">//    for (int j = 0; j &lt; 50; j++) &#123;</div><div class="line">//        </div><div class="line">//        NSLog(@&quot;主线程1:%i&quot;, j);</div><div class="line">//    </div><div class="line">//    &#125;</div><div class="line">    </div><div class="line">//    //1.创建一个线程对象,可以获取线程对象，指定线程名优先级等，灵活处理。</div><div class="line">//    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(thread:) object:@&quot;multiThread1&quot;];</div><div class="line">//    thread.name = @&quot;multiThread1&quot;;</div><div class="line">//    </div><div class="line">//    //开启多线程，程序开始有了一条新的执行路径</div><div class="line">//    [thread start];</div><div class="line">    </div><div class="line">     //2.创建一个线程对象，并且直接启动此线程</div><div class="line">    //[NSThread detachNewThreadSelector:@selector(thread:) toTarget:self withObject:@&quot;multiThread1&quot;];</div><div class="line">    //3.创建一个线程对象，并且直接启动此线程</div><div class="line">    [self performSelectorInBackground:@selector(thread:) withObject:@&quot;multiThread1&quot;];</div><div class="line"></div><div class="line">    </div><div class="line">    //主线程中的循环打印任务2</div><div class="line">    for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;主线程2:%i&quot;, i);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//多线程的入口方法</div><div class="line">- (void)thread:(NSString *)threadName &#123;</div><div class="line">    </div><div class="line">    //获取当前线程对象</div><div class="line">    NSThread *thread = [NSThread currentThread];</div><div class="line">    NSLog(@&quot;多线程:%@&quot;, thread);</div><div class="line">    </div><div class="line">    //当前线程分配的堆栈大小:512K</div><div class="line">    NSLog(@&quot;多线程stackSize:%li&quot;, thread.stackSize);</div><div class="line">    </div><div class="line">        for (int j = 0; j &lt; 50; j++) &#123;</div><div class="line">    </div><div class="line">            NSLog(@&quot;%@:%i&quot;, threadName, j);</div><div class="line">            </div><div class="line">//            if(j % 10 == 0) &#123;</div><div class="line">//                //线程睡眠</div><div class="line">//                [NSThread sleepForTimeInterval:1];</div><div class="line">//            &#125;</div><div class="line">            </div><div class="line">//            if (j == 10) &#123;</div><div class="line">//                </div><div class="line">//                //线程退出的方法</div><div class="line">//                [NSThread exit];</div><div class="line">//</div><div class="line">//            &#125;</div><div class="line">            &#125;</div><div class="line">    </div><div class="line">    //判断当前线程是否为主线程</div><div class="line">    if (![NSThread isMainThread]) &#123;</div><div class="line">        NSLog(@&quot;当前线程不是主线程&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="线程同步解决方案"><a href="#线程同步解决方案" class="headerlink" title="线程同步解决方案"></a>线程同步解决方案</h5><p>ViewController.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface ViewController : UIViewController</div><div class="line"></div><div class="line">//atomic--&gt;给多线程加锁</div><div class="line">//nonatomic--&gt;不加锁</div><div class="line">@property(atomic, copy)NSString *name;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    int tickets; //剩余票数</div><div class="line">    NSCondition *condition; //线程代码加锁的处理类</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    tickets = 50;</div><div class="line">    condition = [[NSCondition alloc] init];</div><div class="line">    </div><div class="line">    [self performSelectorInBackground:@selector(saleTickets:) withObject:@&quot;thread1&quot;];</div><div class="line">    [self performSelectorInBackground:@selector(saleTickets:) withObject:@&quot;thread2&quot;];</div><div class="line">    [self performSelectorInBackground:@selector(saleTickets:) withObject:@&quot;thread3&quot;];</div><div class="line">&#125;</div><div class="line">//多线程访问共享资源会产生数据不同步的问题。</div><div class="line">//解决方案：给共享资源所在的代码加锁，当一个线程在访问此段代码时，会把这段代码锁住，其它线程无法操作这段代码。</div><div class="line">//加锁后会保证数据同步，但是会影响性能，实际开发中，要根据具体的需要进行加锁处理。</div><div class="line"></div><div class="line">- (void)saleTickets:(NSString *)name &#123;</div><div class="line">    while (true) &#123;</div><div class="line">        //加锁</div><div class="line">        [condition lock];</div><div class="line">        if (tickets &gt; 0) &#123;</div><div class="line">            if ([name isEqualToString:@&quot;thread1&quot;]) &#123;</div><div class="line">                [NSThread sleepForTimeInterval:2];</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                [NSThread sleepForTimeInterval:0.1];</div><div class="line">            &#125;</div><div class="line">            tickets--;</div><div class="line">            NSLog(@&quot;%@卖了一张车票，剩余票数为%i&quot;, name, tickets);</div><div class="line">        &#125;</div><div class="line">        //解锁</div><div class="line">        [condition unlock];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setName:(NSString *)name &#123;</div><div class="line">    </div><div class="line">    if (_name != name) &#123;</div><div class="line">        </div><div class="line">        [condition lock];</div><div class="line">        _name = [name copy];</div><div class="line">        [condition unlock];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="NSOperationQueue任务队列处理多线程"><a href="#NSOperationQueue任务队列处理多线程" class="headerlink" title="NSOperationQueue任务队列处理多线程"></a>NSOperationQueue任务队列处理多线程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    NSInvocationOperation *op2;</div><div class="line">    NSInvocationOperation *op1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">    //1.创建任务队列</div><div class="line">    NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">    </div><div class="line">    //5.(1)设置任务队列的并发数</div><div class="line">    queue.maxConcurrentOperationCount = 1;</div><div class="line">    </div><div class="line">    //2.创建任务对象</div><div class="line">    op1 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(thread1:) object:@&quot;operation1&quot;];</div><div class="line">    op2 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(thread2:) object:@&quot;operation2&quot;];</div><div class="line">    </div><div class="line">    //5(2）设置任务执行的优先级</div><div class="line">    //如果当前队列正常运行，则优先级别不起作用</div><div class="line">    op1.queuePriority = NSOperationQueuePriorityVeryLow;</div><div class="line">    op2.queuePriority = NSOperationQueuePriorityHigh;</div><div class="line">    </div><div class="line">    //5（3）任务完成时调用的block</div><div class="line">    op2.completionBlock = ^&#123;</div><div class="line">        NSLog(@&quot;任务2执行完毕&quot;);</div><div class="line">        </div><div class="line">    &#125;;</div><div class="line">    //暂停执行队列中的任务，再添加任务，此时会按照任务的优先级别来执行任务。</div><div class="line">    queue.suspended = YES;</div><div class="line">    </div><div class="line">    //4.将任务对象添加到任务队列中。任务队列就会给此任务绑定一个线程开始执行。</div><div class="line">    [queue addOperation:op1];</div><div class="line">    [queue addOperation:op2];</div><div class="line">    </div><div class="line">    //把任务队列唤醒</div><div class="line">    queue.suspended = NO;</div><div class="line">    //6.创建任务对象，并将任务对象添加到任务队列的另一种方式</div><div class="line">    [queue addOperationWithBlock:^&#123;</div><div class="line">        //block中的代码就可以理解一个任务的入口方法</div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;block-thread:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    //3.主线程中的打印任务</div><div class="line">    for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">        NSLog(@&quot;mainThread:%i&quot;, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//多线程的入口方法</div><div class="line">- (void)thread1:(NSString *)name &#123;</div><div class="line">    for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">        NSLog(@&quot;%@：%i&quot;, name, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)thread2:(NSString *)name &#123;</div><div class="line">    for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">        </div><div class="line">//        if (i == 25) &#123;</div><div class="line">//            //如果当前任务在执行状态，此方法无作用</div><div class="line">//            [op1 cancel];</div><div class="line">//            //如果当前任务没有执行，此方法的作用是把任务从队列中移除</div><div class="line">//            //cancel只是更新了任务对象的一个属性isCancelled＝YES。</div><div class="line">//            </div><div class="line">//        &#125;</div><div class="line">        NSLog(@&quot;%@：%i&quot;, name, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="自定义任务类"><a href="#自定义任务类" class="headerlink" title="自定义任务类"></a>自定义任务类</h5><p>MyOperation.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface MyOperation : NSOperation</div><div class="line"></div><div class="line">@property(nonatomic, copy)NSString *mask;</div><div class="line"></div><div class="line">- (instancetype)initWithName:(NSString *)mask;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>MyOperation.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#import &quot;MyOperation.h&quot;</div><div class="line"></div><div class="line">@implementation MyOperation</div><div class="line"></div><div class="line">- (instancetype)initWithName:(NSString *)mask &#123;</div><div class="line">    </div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        </div><div class="line">        _mask = mask;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//自定义任务类时，必须在类中重写main方法，此方法执行此任务的入口方法</div><div class="line">- (void)main &#123;</div><div class="line">    </div><div class="line">    //多线程创建的实例对象是不会加入到主线程的自动释放池中的，可能会导致内存泄露。</div><div class="line">    //需要在多线程的入口方法中加入自动释放池。</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</div><div class="line">            //cancel方法的作用只是改变了isCancelled的状态，不会马上取消当前任务。会在未来的某个时刻，在main方法中检查isCancelled状态时退出当前操作。</div><div class="line">            if (self.isCancelled) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            NSLog(@&quot;%@:%i&quot;, self.mask, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后再主控制器中实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;MyOperation.h&quot;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    MyOperation *_op1;</div><div class="line">    MyOperation *_op2;</div><div class="line">    NSOperationQueue *_queue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">    _queue = [[NSOperationQueue alloc] init];</div><div class="line">    </div><div class="line">    _op1 = [[MyOperation alloc] initWithName:@&quot;myOp1&quot;];</div><div class="line">    _op2 = [[MyOperation alloc] initWithName:@&quot;myOp2&quot;];</div><div class="line">    </div><div class="line">    _queue.maxConcurrentOperationCount = 2;</div><div class="line">    </div><div class="line">    [_queue addOperation:_op1];</div><div class="line">    [_queue addOperation:_op2];</div><div class="line">    </div><div class="line">    _op1.completionBlock = ^&#123;</div><div class="line">        NSLog(@&quot;任务1结束了----------------&quot;);</div><div class="line">    &#125;;</div><div class="line">    _op2.completionBlock = ^&#123;</div><div class="line">        NSLog(@&quot;任务2结束了----------------&quot;);</div><div class="line">    &#125;;</div><div class="line">    //[self performSelector:@selector(afterDelay) withObject:nil afterDelay:0.1];</div><div class="line">    [self performSelector:@selector(cancelAllTasks) withObject:nil afterDelay:0.5];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)afterDelay &#123;</div><div class="line">    [_op1 cancel]; //isCancelled--&gt;YES</div><div class="line">    </div><div class="line">    //如果任务没有开始执行，则取消，如果任务开始执行了，则需要在当前任务类的main方法中手动去判断isCancelled属性是否为YES，如果为YES,则退出当前操作。</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)cancelAllTasks &#123;</div><div class="line">    </div><div class="line">    //取消当前队列中的所有任务</div><div class="line">    [_queue cancelAllOperations];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="GCD的基本使用"><a href="#GCD的基本使用" class="headerlink" title="GCD的基本使用"></a>GCD的基本使用</h5><p>1.GCD的本质就是定义想要执行的任务，并把任务追加到适当的Dispatch Queue中。</p>
<p> 2.Dispatch Queue就是执行处理的等待队列，使用block语法来追加任务到队列中，队列按照先进先出的原则处理任务。</p>
<p> 分为两种：</p>
<p> （1）串行队列：所有的任务排队执行，按照添加到队列中的顺序执行。可能只会开启一个线程。</p>
<p> （2）并行队列：所有任务并发执行。可能开启多个线程。并行队列并发的线程数量取决当前系统的状态，GCD会根据当前操作系统中CPU的核数，CPU的负荷，状态来确定并发数量。</p>
<p> （3）主队列（串行队列）：其中只有一个主线程在运行。</p>
<p> 3.两种追加任务的方式：同步追加和异步追加</p>
<p> （1）异步追加：可能会开启新的线程来执行新任务。</p>
<p> 1&gt;dispatch_async函数的特点：追加任务立即返回，执行下面的代码。</p>
<p> 2&gt;追加到串行队列：新任务排队执行。</p>
<p> 3&gt;追加到并行队列：并发执行新任务。</p>
<p> （2）同步追加：在当前线程执行新任务，一般来讲不会开启新线程。</p>
<p> 1&gt;dispatch_sync函数的特点：会一直等待，等待到当前的新任务添加到队列并且执行完毕才能返回，继续执行下面的代码。</p>
<p> 2&gt;必须等到追加的队列中所有的前面排队的任务执行完成后，才能把新任务追加到队列中，并且执行。</p>
<p> 4.分为四种情况来解释GCD的基本操作</p>
<p> （1）向并行队列中异步添加任务（最常用）</p>
<p> （2）向串行队列中异步添加任务</p>
<p> （3）向并行队列中同步添加任务</p>
<p> （4）向串行队列中同步添加任务</p>
<p>下面直接上代码：</p>
<p>ViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    //[self concurrentAndAsync];</div><div class="line">    //[self serialAndAsync];</div><div class="line">    [self concurrentAndSync];</div><div class="line">    //[self serialAndSync];</div><div class="line">    [self mainQueuePrintTask];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)mainQueuePrintTask &#123;</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; 200; i++) &#123;</div><div class="line">        NSLog(@&quot;主线程任务:%i&quot;, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//(4) 向串行队列中同步添加任务</div><div class="line">- (void)serialAndSync &#123;</div><div class="line">    </div><div class="line">    //创建一个串行队列</div><div class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;huiwen&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">    //向串行队列中同步的添加任务</div><div class="line">    dispatch_sync(queue, ^&#123;</div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;同步任务1:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    dispatch_sync(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;同步任务2:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//（3）向并行队列中同步添加任务</div><div class="line">- (void)concurrentAndSync &#123;</div><div class="line">    </div><div class="line">    //获取系统提供的并行队列：一般来讲不会创建新的并行队列</div><div class="line">    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">    </div><div class="line">    //同步添加任务</div><div class="line">    dispatch_sync(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;同步任务1:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_sync(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;同步任务2:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// （2）向串行队列中异步添加任务</div><div class="line">- (void)serialAndAsync &#123;</div><div class="line">    </div><div class="line">    //创建一个串行队列</div><div class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;huiwen&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">    //向串行队列中异步的添加任务</div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;异步任务1:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;异步任务2:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    /*</div><div class="line">    主线程中有三个任务：异步添加任务1，异步添加任务2，打印任务</div><div class="line">    先执行异步添加任务1，dispatch_asyc不做任何等待，立即执行主线程中下面的任务。要把任务添加串行队列中，要等待串行队列中排队的任务执行完成新任务才能被添加且执行。此时串行队列无排队任务，新任务1立即添加执行（绑定一个新的多线程）。</div><div class="line">    主线程执行异步添加任务2，dispatch_asyc不做任何等待，立即执行主线程中下面的任务。要把任务添加串行队列中，要等待串行队列中排队的任务执行完成新任务才能被添加且执行。此时串行队列有排队新任务1在执行，新任务2需要等待新任务1执行完毕后才能添加到串行队列中并执行。因此没有开启新线程执行新任务2，而是和新任务1在同一个线程中执行。</div><div class="line">    主线程中的打印任务。</div><div class="line">    两条路径，新任务1和新任务2在多线程中有顺序的运行，主线程中的打印任务和它们并发执行。</div><div class="line">    */</div><div class="line">&#125;</div><div class="line"></div><div class="line">//（1）向并行队列中异步添加任务（最常用）</div><div class="line">- (void)concurrentAndAsync &#123;</div><div class="line">    </div><div class="line">    //获取系统提供的并行队列：一般来讲不会创建新的并行队列</div><div class="line">    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">    </div><div class="line">    //向并行队列中异步添加两个任务</div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;异步任务1:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">            NSLog(@&quot;异步任务2:%i&quot;, i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    /*</div><div class="line">    主线程中有三个任务：异步添加任务1，异步添加任务2，打印任务</div><div class="line">    先执行异步添加任务1，dispatch_asyc不做任何等待，立即添加任务到并行队列中，新任务1立即执行（开启新线程1），与此同时，主线程中继续执行dispatch_async下面的代码。</div><div class="line">    异步添加任务2，dispatch_asyc不做任何等待，立即添加任务到并行队列中，新任务2立即执行（开启新线程2），与此同时，主线程中继续执行dispatch_async下面的代码。</div><div class="line">    主线程中执行打印任务。</div><div class="line">    三个线程，三条程序执行的路径，并行。因此三个打印任务是并发执行的。</div><div class="line">    */</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="GCD可以运用到遍历数组中"><a href="#GCD可以运用到遍历数组中" class="headerlink" title="GCD可以运用到遍历数组中"></a>GCD可以运用到遍历数组中</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">    //遍历数组的方式</div><div class="line">    //1.普通遍历</div><div class="line">    //2.快速遍历</div><div class="line">    </div><div class="line">    NSArray *array = @[@1,@2,@3,@4,@5,@6,@7,@8,@9];</div><div class="line">//    </div><div class="line">//    for (NSNumber *object in array) &#123;</div><div class="line">//        </div><div class="line">//        NSLog(@&quot;%@&quot;,object);</div><div class="line">//        </div><div class="line">//    &#125;</div><div class="line">    </div><div class="line">    //3.枚举器遍历</div><div class="line">//    [array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) &#123;</div><div class="line">//        </div><div class="line">//        NSLog(@&quot;%@&quot;, obj);</div><div class="line">//        </div><div class="line">//        if (idx == 5) &#123;</div><div class="line">//            *stop = YES;</div><div class="line">//        &#125;</div><div class="line">//        </div><div class="line">//        </div><div class="line">//    &#125;];</div><div class="line">//    </div><div class="line">//    NSDictionary *dic = @&#123;@&quot;hello&quot; : @&quot;world&quot;,</div><div class="line">//                          @&quot;hi&quot;: @&quot;hate&quot;</div><div class="line">//                          </div><div class="line">//                          &#125;;</div><div class="line">//    [dic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) &#123;</div><div class="line">//        NSLog(@&quot;%@:%@&quot;, key, obj);</div><div class="line">//    &#125;];</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">//     BOOL isStop = NO;</div><div class="line">//    </div><div class="line">//    for (int index = 0; index &lt; array.count; index++) &#123;</div><div class="line">//        block(array[index], index, &amp;isStop);</div><div class="line">//        </div><div class="line">//        if (isStop) &#123;</div><div class="line">//            break;</div><div class="line">//        &#125;</div><div class="line">//        </div><div class="line">//        </div><div class="line">//    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //4. 用队列异步操作数组，进行数组的遍历</div><div class="line">    //操作无序的，把访问每一个元素的任务异步添加到并行队列，并发执行。这样的操作非常高效。</div><div class="line">    dispatch_queue_t gloableQueue = dispatch_get_global_queue(0, 0);</div><div class="line">    </div><div class="line">    dispatch_apply(array.count, gloableQueue, ^(size_t index) &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;%lu:%@&quot;, index, array[index]);</div><div class="line">        </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h5 id="同步追加产生的死锁"><a href="#同步追加产生的死锁" class="headerlink" title="同步追加产生的死锁"></a>同步追加产生的死锁</h5><ol>
<li><p>同步追加任务到主队列产生死锁</p>
</li>
<li><p>如何从多线程中回到主线程中去更新UI</p>
<p><strong>GCD使用总结：</strong></p>
<ol>
<li><p>向并行队列异步添加会开启一条新线程。</p>
</li>
<li><p>向串行队列异步添加可能会开启一条新线程。</p>
</li>
<li><p>同步添加不会开启一条新线程。</p>
</li>
<li><p>向主队列同步追加任务很容易产生死锁。</p>
</li>
<li><p>大任务的处理一般使用多线程完成，如网络申请，大文件的操作以及数据库操作。但是如果多线程中任务完成，需要更新UI,则必须回到主线程更新UI。</p>
</li>
<li><p>需要回到主线程更新UI时，可以使用同步追加或者异步追加，具体使用哪种追加方式，需要根据实际情况判断，如果多线程中的其它任务需要等到更新UI之后才进行，则使用同步追加，如果没有特殊需求，则两种方式都可以进行。</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">//    [self addSyncTaskToMainQueue];</div><div class="line">//    [self mainQueuePrintTask];</div><div class="line">    </div><div class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">        //网络申请</div><div class="line">        //网络申请图片成功后要更新UI,将图片显示在界面上。</div><div class="line">        //更新UI的动作要在主线程完成，需要添加任务到主队列。</div><div class="line">        dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">            </div><div class="line">            //        UIImageView *imageView;</div><div class="line">            //</div><div class="line">            //        imageView.image = image;</div><div class="line">            </div><div class="line">            NSLog(@&quot;GCD主线程&quot;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        NSLog(@&quot;GCD多线程&quot;);</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)mainQueuePrintTask &#123;</div><div class="line">    for (int i = 0; i &lt; 50; i++) &#123;</div><div class="line">        NSLog(@&quot;主线程打印任务:%i&quot;, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)addSyncTaskToMainQueue &#123;</div><div class="line">    </div><div class="line">    //获取主队列</div><div class="line">    dispatch_queue_t mainQueue = dispatch_get_main_queue();</div><div class="line">    </div><div class="line">    //向主队列中同步追加任务,产生死锁</div><div class="line">    //同步追加时，dispatch_sync函数在一直等待block任务添加到主队列中并执行，不添加不执行完毕无法继续下面的代码。</div><div class="line">    //而同步追加的特点是必须等到当前队列中所有的任务全部执行完毕才能追加到队列中，因此互相等待，造成死锁。</div><div class="line">    //异步追加，可以正常运行，因为dispathc_async函数不需要等待。</div><div class="line">    dispatch_async(mainQueue, ^&#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;主线程block任务&quot;);</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="多线程下载图片"><a href="#多线程下载图片" class="headerlink" title="多线程下载图片"></a>多线程下载图片</h5><p>我们自定义一个UIImageView的扩展：UIImageView+ImageRequest</p>
<p>UIImageView+ImageRequest.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface UIImageView (ImageRequest)</div><div class="line"></div><div class="line">- (void)setImageWithURL:(NSURL *)url;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>UIImageView+ImageRequest.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#import &quot;UIImageView+ImageRequest.h&quot;</div><div class="line"></div><div class="line">@implementation UIImageView (ImageRequest)</div><div class="line"></div><div class="line">- (void)setImageWithURL:(NSURL *)url &#123;</div><div class="line">    </div><div class="line">//    NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">//    </div><div class="line">//    UIImage *image = [UIImage imageWithData:data];</div><div class="line">//    </div><div class="line">//    self.image = image;</div><div class="line">    </div><div class="line">    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        </div><div class="line">        //下载图片数据任务在多线程中处理</div><div class="line">            NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">        </div><div class="line">            UIImage *image = [UIImage imageWithData:data];</div><div class="line">        </div><div class="line">        //更新UI要在主线程中处理</div><div class="line">        dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">            self.image = image;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后在主控制器中实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;UIImageView+ImageRequest.h&quot;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    NSMutableArray *imgViews;</div><div class="line">    BOOL isLoad;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    imgViews = [NSMutableArray array];</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">        </div><div class="line">        for (int j = 0; j &lt; 3 ; j++) &#123;</div><div class="line">            UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(110*j, 110*i+20, 105, 105)];</div><div class="line">            </div><div class="line">            imageView.backgroundColor = [UIColor orangeColor];</div><div class="line">            [self.view addSubview:imageView];</div><div class="line">            </div><div class="line">            [imgViews addObject:imageView];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    isLoad = NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    if (!isLoad) &#123;</div><div class="line">        for (UIImageView *imageView in imgViews) &#123;</div><div class="line">            NSString *urlString = @&quot;https://ww3.sinaimg.cn/large/006y8lVagw1fbrqb5ry15j303c03cwee.jpg&quot;;</div><div class="line">            NSURL *url = [NSURL URLWithString:urlString];</div><div class="line">            //网络加载，将imageView显示的图片设置为网络加载图片</div><div class="line">            [imageView setImageWithURL:url];</div><div class="line">        &#125;</div><div class="line">        isLoad = YES;</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h5 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h5><p>不说废话，直接上demo是我的风格：</p>
<p>AdressBook.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface AdressBook : NSObject</div><div class="line"></div><div class="line">@property(nonatomic,assign)NSUInteger phone;</div><div class="line">@property(nonatomic,copy)NSString *name;</div><div class="line">//...</div><div class="line"></div><div class="line"></div><div class="line">//单例的类方法</div><div class="line">+ (AdressBook *)shareInstance;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>AdressBook.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">#import &quot;AdressBook.h&quot;</div><div class="line"></div><div class="line">static AdressBook *instance = nil;</div><div class="line"></div><div class="line">@implementation AdressBook</div><div class="line"></div><div class="line">+ (AdressBook *)shareInstance &#123;</div><div class="line">    </div><div class="line">//    AdressBook *book = [[AdressBook alloc] init];</div><div class="line">//    return [book autorelease];</div><div class="line">    </div><div class="line">//    if (instance == nil) &#123;</div><div class="line">//        instance = [[self alloc] init];</div><div class="line">//    &#125;</div><div class="line">//</div><div class="line">//    return instance;</div><div class="line">    </div><div class="line">    //API:当dispatch_once函数被调用多次时，block中的代码只被执行一次,onceToken是记录是否是第一次执行标记（令牌）</div><div class="line">    //GCD的接口可以保证线程安全。</div><div class="line">    static dispatch_once_t onceTocken = 0;</div><div class="line">    </div><div class="line">    dispatch_once(&amp;onceTocken, ^&#123;</div><div class="line">        </div><div class="line">        instance = [[self alloc] init];</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return instance;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//+ (instancetype)alloc &#123;</div><div class="line">//    </div><div class="line">//    [self allocWithZone:&lt;#(struct _NSZone *)#&gt;];</div><div class="line">//</div><div class="line"></div><div class="line">//&#125;</div><div class="line"></div><div class="line"></div><div class="line">//allo分配内存的工作是自动调用allocWithZone完成的，如果要实现单例则需要复写allocWithZone</div><div class="line">//实现一些限制方法，限制这个类始终只能创建一个对象，并且此对象不能销毁</div><div class="line">+ (id)allocWithZone:(struct _NSZone *)zone &#123;</div><div class="line"> </div><div class="line">    if (instance == nil) &#123;</div><div class="line">        instance = [super allocWithZone:zone];</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//此方法是调用copy方法之后调用的</div><div class="line">- (id)copyWithZone:(NSZone *)zone &#123;</div><div class="line">    </div><div class="line">    //正常实现是新创建对象，作为复制的副本对象</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (oneway void)release &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)autorelease &#123;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)retain &#123;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSUInteger)retainCount &#123;</div><div class="line">    return UINT_MAX;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> NSThread </tag>
            
            <tag> NSOperationQueue </tag>
            
            <tag> GCD </tag>
            
            <tag> 单例 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CALayer的基本使用]]></title>
      <url>http://yoursite.com/2017/01/13/CALayer%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="CALayer和UIView的区别"><a href="#CALayer和UIView的区别" class="headerlink" title="CALayer和UIView的区别"></a>CALayer和UIView的区别</h4><p>1.UIView是UIKit的(只能iOS使用)，CALayer是QuartzCore的(iOS和mac os通用)</p>
<p>2.UIView继承UIResponder,CALayer继承NSObject,UIView比CALayer多了一个事件处理的功能，也就是说，CALayer不能处理用户的触摸事件，而UIView可以</p>
<p>3.UIView来自CALayer，是CALayer的高层实现和封装，UIView的所有特性来源于CALayer支持</p>
<p>4.CABasicAnimation，CAAnimation，CAKeyframeAnimation等动画类都需要加到CALayer上</p>
<p>其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层</p>
<p>在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层</p>
<a id="more"></a>
<h4 id="CALayer的基本属性"><a href="#CALayer的基本属性" class="headerlink" title="CALayer的基本属性"></a>CALayer的基本属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//圆角半径</div><div class="line">view.layer.cornerRadius = 50;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//阴影</div><div class="line">view.layer.shadowColor = [UIColor lightGrayColor].CGColor;</div><div class="line">view.layer.shadowOffset = CGSizeMake(10, 10);</div><div class="line">view.layer.shadowOpacity = 1;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//边框</div><div class="line">view.layer.borderColor = [UIColor redColor].CGColor;</div><div class="line">view.layer.borderWidth = 3;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//仅表示给父层倒圆角,子层无相关设置</div><div class="line">//imgView.layer.cornerRadius = 100;</div><div class="line">//表示子层随父层一起变化</div><div class="line">//imgView.layer.masksToBounds = YES;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//阴影效果不能和maskToBounds一起设置</div><div class="line">imgView.layer.shadowColor = [UIColor lightGrayColor].CGColor;</div><div class="line">imgView.layer.shadowOffset = CGSizeMake(10, 10);</div><div class="line">imgView.layer.shadowOpacity = 1;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//3D形变</div><div class="line">//旋转效果：1为顺时针，-1为逆时针</div><div class="line">//imgView.layer.transform = CATransform3DMakeRotation(M_PI/2, 0, 0, 1);</div><div class="line"></div><div class="line">//KVC来设置形变效果,可以进行效果叠加</div><div class="line">[imgView.layer setValue:@-100 forKeyPath:@&quot;transform.translation&quot;];</div><div class="line"></div><div class="line">[imgView.layer setValue:@M_PI_4 forKeyPath:@&quot;transform.rotation.z&quot;];</div></pre></td></tr></table></figure>
<p>详细请见下图：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fbrogj5e92j20lr0nxn3c.jpg" alt=""></p>
<h4 id="创建CALayer来显示内容"><a href="#创建CALayer来显示内容" class="headerlink" title="创建CALayer来显示内容"></a>创建CALayer来显示内容</h4><p><code>CALayer</code>不能接收点击事件，只能显示界面，它的出现只是为了提高动画的执行效率，父类是<code>NSObject</code>。</p>
<p><code>UIView的</code>父类是<code>UIResponder</code>，可以接收事件，并且参与到事件响应者链中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> //1.创建图层</div><div class="line">    CALayer *myLayer = [CALayer layer];</div><div class="line">    </div><div class="line">    //2.添加到self.view的rootLayer上才能显示</div><div class="line">    [self.view.layer addSublayer:myLayer];</div><div class="line">    </div><div class="line">    //3.设置属性</div><div class="line">    myLayer.bounds = CGRectMake(0, 0, 200, 200);</div><div class="line">    </div><div class="line">    myLayer.backgroundColor = [UIColor redColor].CGColor;</div><div class="line">    </div><div class="line">    myLayer.position = CGPointMake(100, 100);</div><div class="line">    </div><div class="line">    </div><div class="line">    //锚点的取值是0-1之间的值,默认值为0.5，0.5</div><div class="line">    //锚点决定了当前层和postion之间的相对位置</div><div class="line">    myLayer.anchorPoint = CGPointMake(0.5, 0.5);</div><div class="line">    </div><div class="line">    </div><div class="line">    //当层进行3D形变时，会以锚点为轴进行放大缩小以及旋转</div><div class="line">    [myLayer setValue:@-M_PI_4 forKeyPath:@&quot;transform.rotation.z&quot;];</div><div class="line">    </div><div class="line">    UIImage *image =[UIImage imageNamed:@&quot;ali.jpg&quot;];</div><div class="line">    </div><div class="line">    //把图片作为当前层的显示内容</div><div class="line">    myLayer.contents = (id)image.CGImage;</div><div class="line">    //myLayer.contents =  (__bridge id _Nullable)([UIImage imageNamed:@&quot;ali.jpg&quot;].CGImage);</div><div class="line"></div><div class="line">//内容模式，类似于UIImageView的contentMode。默认是填充整个区域 kCAGravityResize</div><div class="line">//kCAGravityResizeAspectFill 这个会向左边靠 贴到view的边边上</div><div class="line">//kCAGravityResizeAspect 这个好像就是按比例了 反正是长方形</div><div class="line">myLayer.contentsGravity = kCAGravityResizeAspect;</div></pre></td></tr></table></figure>
<h4 id="CALayer的隐式动画属性"><a href="#CALayer的隐式动画属性" class="headerlink" title="CALayer的隐式动画属性"></a>CALayer的隐式动画属性</h4><p>非rootLayer才有存在隐式动画。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController () &#123;</div><div class="line">    CALayer *myLayer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">    myLayer = [CALayer layer];</div><div class="line">    myLayer.bounds = CGRectMake(0, 0, 100, 100);</div><div class="line">    myLayer.backgroundColor = [UIColor orangeColor].CGColor;</div><div class="line">    </div><div class="line">    [self.view.layer addSublayer:myLayer];</div><div class="line">    </div><div class="line">    myLayer.position = CGPointMake(100, 100);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    </div><div class="line">    UITouch *touch = [touches anyObject];</div><div class="line">    </div><div class="line">    CGPoint p = [touch locationInView:self.view];</div><div class="line">    </div><div class="line">    //开始动画,动画事务性的处理</div><div class="line">    [CATransaction begin];</div><div class="line">    //关闭CALayer的隐式动画效果</div><div class="line">    [CATransaction setDisableActions:YES];</div><div class="line">    </div><div class="line">    //修改图层的显示位置</div><div class="line">    myLayer.position = p;</div><div class="line">    </div><div class="line">    </div><div class="line">    NSInteger size = arc4random_uniform(50) + 50;</div><div class="line">    myLayer.bounds = CGRectMake(0, 0, size, size);</div><div class="line">    myLayer.opacity = arc4random_uniform(10)/10.0;</div><div class="line">    </div><div class="line">    //提交动画效果</div><div class="line">    [CATransaction commit];</div><div class="line">    </div><div class="line">//    [UIView beginAnimations:&lt;#(NSString *)#&gt; context:&lt;#(void *)#&gt;];</div><div class="line">//    [UIView commitAnimations];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在CALayer上绘图"><a href="#在CALayer上绘图" class="headerlink" title="在CALayer上绘图"></a>在CALayer上绘图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">CALayer *layer = [CALayer layer];</div><div class="line">layer.bounds = CGRectMake(0, 0, 200, 200);</div><div class="line">layer.backgroundColor = [UIColor grayColor].CGColor;</div><div class="line">layer.position = CGPointMake(100, 100);</div><div class="line"></div><div class="line">[self.view.layer addSublayer:layer];</div><div class="line"></div><div class="line">//设置图层的代理对象，调用代理对象的相关协议方法进行内容的绘制</div><div class="line">//不能把self.view作为当前层的代理，因为它已经是rootLayer的代理，再次设置会出问题：self.view.layer.delegate = self.view;</div><div class="line"></div><div class="line">layer.delegate = self;</div><div class="line"></div><div class="line">//必须发送此消息，才能触发当前层代理对象绘图协议方法的调用</div><div class="line">[layer setNeedsDisplay];</div></pre></td></tr></table></figure>
<p>然后实现代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#pragma mark - CALayer delegate</div><div class="line">- (void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx &#123;</div><div class="line">    </div><div class="line">    //NSLog(@&quot;%@&quot;, layer);</div><div class="line">    //用UIKit提供的方法进行绘制无法实现绘制</div><div class="line">    //此协议方法是CALayer的协议方法，为了避免CA框架和UIKit耦合，UIKit提供的方法在此处无效，因为在此处使用UIKit函数无法获取到context。</div><div class="line">//    [[UIColor blueColor] setFill];</div><div class="line">//    </div><div class="line">//    UIRectFill(CGRectMake(50, 50, 100, 100));</div><div class="line">    </div><div class="line">    //只能使用CG框架提供的接口进行绘制</div><div class="line">    CGContextAddRect(ctx, CGRectMake(50, 50, 100, 100));</div><div class="line">    CGContextSetRGBFillColor(ctx, 0, 0, 1, 1);</div><div class="line">    </div><div class="line">    CGContextDrawPath(ctx, kCGPathFill);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们通过CALayer来创建一个UIView,说明UIView,CALayer,图形上下文之间的关系</p>
<p>在一个UIView的子类中实现下面的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class="line">    if (self = [super initWithFrame:frame]) &#123;</div><div class="line">    </div><div class="line">        //在UIView的构造方法中做了如下设置，把当前UIView的Layer属性的delegate设置为当前UIView对象。</div><div class="line">       //self.layer.delegate = self;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// Only override drawRect: if you perform custom drawing.</div><div class="line">// An empty implementation adversely affects performance during animation.</div><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    // Drawing code</div><div class="line">    </div><div class="line">//    NSLog(@&quot;%@&quot;, self);</div><div class="line">//    NSLog(@&quot;%@&quot;, self.layer.delegate);</div><div class="line">    </div><div class="line">    </div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    </div><div class="line">    //在drawRect:方法中获取的context就是CALayer准备好的context传入协议方法中的context。</div><div class="line">     NSLog(@&quot;%p&quot;, context);</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)drawLayer:(CALayer *)layer inContext:(CGContextRef)ctx &#123;</div><div class="line">     NSLog(@&quot;%p&quot;, ctx);</div><div class="line">    </div><div class="line">    //必须调用父类的协议方法，因为在UIView的此协议方法中会自动调用drawRect:进行绘制，如果不调用则drawRect:不会被调用。</div><div class="line">    [super drawLayer:layer inContext:ctx];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CALayer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Quartz 2D的基本使用]]></title>
      <url>http://yoursite.com/2017/01/13/Quartz-2D%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="什么是Quartz2D"><a href="#什么是Quartz2D" class="headerlink" title="什么是Quartz2D?"></a>什么是Quartz2D?</h4><p>Quartz 2D是一个二维绘图引擎，同时支持iOS和Mac系统</p>
<ul>
<li>Quartz 2D能完成的工作<ul>
<li>绘制图形 : 线条\三角形\矩形\圆\弧\贝塞尔曲线等</li>
<li>绘制文字</li>
<li>绘制\生成图片(图像)</li>
<li>读取\生成PDF</li>
<li>截图\裁剪图片</li>
<li>自定义UI控件</li>
</ul>
</li>
</ul>
<h4 id="Quartz2D在iOS开发中的价值"><a href="#Quartz2D在iOS开发中的价值" class="headerlink" title="Quartz2D在iOS开发中的价值:"></a>Quartz2D在iOS开发中的价值:</h4><ul>
<li>绘制一些系统UIKit框架中不好展示的内容，例如饼图</li>
<li>自定义一些控件</li>
<li>不添加UI控件的情况下，使UI内容更丰富</li>
<li>……</li>
</ul>
<a id="more"></a>
<p><strong>iOS中，大部分控件都是Quartz2D绘制出来的</strong></p>
<h4 id="图形上下文"><a href="#图形上下文" class="headerlink" title="图形上下文"></a>图形上下文</h4><p><strong>图形上下文就相当于画布，不同类型的画布就是决定着画得内容将展示在哪里</strong></p>
<ul>
<li>Quartz2D提供了以下几种类型的Graphics Context：<br>◦ Bitmap Graphics Context 位图上下文，在这个上下文上绘制或者渲染的内容，可以获取成图片（需要主动创建一个位图上下文来使用，使用完毕，一定要销毁）<br>◦ PDF Graphics Context<br>◦ Window Graphics Context<br>◦ Layer Graphics Context 图层上下文，针对UI控件的上下文<br>◦ Printer Graphics Context</li>
</ul>
<h4 id="drawRect"><a href="#drawRect" class="headerlink" title="drawRect:"></a>drawRect:</h4><p>为什么要实现drawRect:方法才能绘图到view上？<br>因为在drawRect:方法中才能取得跟view相关联的图形上下文</p>
<p>drawRect:中取得的上下文，然后就可以绘制东西到view上</p>
<p>View内部有个layer（图层）属性，drawRect:方法中取得的是一个Layer Graphics Context，因此，绘制的东西其实是绘制到view的layer上去了</p>
<p><strong>View之所以能显示东西，完全是因为它内部的layer</strong></p>
<h4 id="drawRect-方法的调用？"><a href="#drawRect-方法的调用？" class="headerlink" title="drawRect:方法的调用？"></a>drawRect:方法的调用？</h4><p>• 当view第一次显示到屏幕上时，系统会创建好一个跟当前view相关的Layer上下文<br>• 系统会通过此上下文，在drawRect:方法中绘制好当前view的内容<br>• 主动让view重绘内容的时候，调用setNeedsDisplay或者setNeedsDisplayInRect:。我们主动调用drawRect:方法是无效的。<br>• 调用view的setNeedsDisplay或者setNeedsDisplayInRect:时。<br>• 注意：setNeedsDisplay和setNeedsDisplayInRect:方法调用后，屏幕并不是立即刷新，而是会在下一次刷新屏幕的时候把绘制的内容显示出来。</p>
<p>也正是系统会在调用这个方法之前创建一个与该view相关的上下文，才让我们可以在drawRect:方法中绘制。注意：在其他地方拿不到view相关的上下文，所以不能实现绘制。</p>
<h4 id="自定义view"><a href="#自定义view" class="headerlink" title="自定义view"></a>自定义view</h4><p>如何利用Quartz2D绘制东西到view上？<br>• 首先，得有图形上下文，因为它能保存绘图信息，并且决定着绘制到什么地方去<br>• 其次，那个图形上下文必须跟view相关联，才能将内容绘制到view上面</p>
<h5 id="自定义view的步骤"><a href="#自定义view的步骤" class="headerlink" title="自定义view的步骤:"></a>自定义view的步骤:</h5><p>1   新建一个类，继承自UIView<br>2   实现- (void)drawRect:(CGRect)rect方法，然后在这个方法中<br>3   取得跟当前view相关联的图形上下文<br>4   绘制相应的图形内容<br>5   利用图形上下文将绘制的所有内容渲染显示到view上面</p>
<h4 id="常用拼接路径函数"><a href="#常用拼接路径函数" class="headerlink" title="常用拼接路径函数"></a>常用拼接路径函数</h4><p>• 新建一个起点<br><code>void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)</code><br>• 添加新的线段到某个点<br><code>void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)</code><br>• 添加一个矩形<br><code>void CGContextAddRect(CGContextRef c, CGRect rect)</code><br>• 添加一个椭圆<br><code>void CGContextAddEllipseInRect(CGContextRef context, CGRect rect)</code><br>• 添加一个圆弧<br><code>void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)</code></p>
<h4 id="常用绘制路径函数"><a href="#常用绘制路径函数" class="headerlink" title="常用绘制路径函数"></a>常用绘制路径函数</h4><p>• Mode参数决定绘制的模式<br><code>void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)</code><br>• 绘制空心路径<br><code>void CGContextStrokePath(CGContextRef c)</code><br>• 绘制实心路径<br><code>void CGContextFillPath(CGContextRef c)</code><br><strong>提示：一般以CGContextDraw、CGContextStroke、CGContextFill开头的函数，都是用来绘制路径的</strong></p>
<h4 id="图形上下文栈的操作"><a href="#图形上下文栈的操作" class="headerlink" title="图形上下文栈的操作"></a>图形上下文栈的操作</h4><p>• 将当前的上下文copy一份,保存到栈顶(那个栈叫做”图形上下文栈”)<br><code>void CGContextSaveGState(CGContextRef c)</code><br>• 将栈顶的上下文出栈,替换掉当前的上下文<br><code>void CGContextRestoreGState(CGContextRef c)</code></p>
<h3 id="矩阵操作"><a href="#矩阵操作" class="headerlink" title="矩阵操作"></a>矩阵操作</h3><p>利用矩阵操作，能让绘制到上下文中的所有路径一起发生变化<br>• 缩放<br><code>void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)</code><br>• 旋转<br><code>void CGContextRotateCTM(CGContextRef c, CGFloat angle)</code><br>• 平移<br><code>void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)</code></p>
<h3 id="绘图的核心步骤："><a href="#绘图的核心步骤：" class="headerlink" title="绘图的核心步骤："></a>绘图的核心步骤：</h3><p>1   获得上下文<br>2   绘制/拼接绘图路径<br>3   将路径添加到上下文<br>4   渲染上下文<br><strong>记住：所有的绘图，都是这个步骤，即使使用贝塞尔路径，也只是对这个步骤进行了封装。对于绘图而言，拿到上下文很关键。</strong></p>
<h4 id="贝塞尔路径"><a href="#贝塞尔路径" class="headerlink" title="贝塞尔路径"></a>贝塞尔路径</h4><p>就是UIKit框架中，对绘图的封装。实际操作起来，使用贝塞尔路径，更为方便。<br>• 用法与CGContextRef类似，但是oc对其进行了封装，更加面向对象。<br>• 常用的方法：<br>◦ 返回一个描述椭圆的路径:<br><code>+ (UIBezierPath *)bezierPathWithOvalInRect:(CGRect)rect;</code><br>◦ 设置起始点:<br><code>- (void)moveToPoint:(CGPoint)point;</code><br>◦ 添加直线到一点:<br><code>- (void)addLineToPoint:(CGPoint)point;</code><br>◦ 三次贝塞尔曲线：<br><code>- (void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2;</code></p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcjw1fbozfmu0u4g3097049dfm.gif" alt=""></p>
<ul>
<li>贝塞尔曲线:<br><code>- (void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint;</code></li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcjw1fbp6pzowv2g30cu057mwz.gif" alt=""></p>
<ul>
<li><p>绘制圆弧:<br><code>- (void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise;</code><br><img src="https://ww1.sinaimg.cn/large/006tKfTcjw1fbp6so1lv1j309u08sgll.jpg" alt=""></p>
</li>
<li><p>封闭闭路径:<code>- (void)closePath;</code></p>
</li>
</ul>
<h3 id="接下来针对上面讲的一些内容，我们来做几个小demo。上代码："><a href="#接下来针对上面讲的一些内容，我们来做几个小demo。上代码：" class="headerlink" title="接下来针对上面讲的一些内容，我们来做几个小demo。上代码："></a>接下来针对上面讲的一些内容，我们来做几个小demo。上代码：</h3><p>下面的都是在drawRect方法里面实现的。</p>
<ul>
<li><p>绘制线条</p>
</li>
<li><p>绘制线条的第一种方式：创建路径，将线条添加到路径上，再把路径添加到图形上下文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">//1.获取当前的图形上下文</div><div class="line"></div><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line"></div><div class="line">// .创建一条绘制的路径，此路径为可变的路径</div><div class="line"></div><div class="line">CGMutablePathRef path = CGPathCreateMutable();</div><div class="line"></div><div class="line">//3.起始点</div><div class="line"></div><div class="line">CGPathMoveToPoint(path, NULL, 50, 50);</div><div class="line"></div><div class="line">CGPathAddLineToPoint(path, NULL, 100, 100);</div><div class="line"></div><div class="line">CGPathAddLineToPoint(path, NULL, 50, 100);</div><div class="line"></div><div class="line">//4.关闭路径</div><div class="line"></div><div class="line">CGPathCloseSubpath(path); </div><div class="line"></div><div class="line">//5.把路径添加到图形上下文，才能显示在界面上。  </div><div class="line"></div><div class="line">CGContextAddPath(context, path);</div><div class="line"></div><div class="line">//6.设置图形上下文的属性（如线条的颜色宽度等）</div><div class="line"></div><div class="line">CGContextSetRGBStrokeColor(context, 254/255.0, 201/255.0, 22/255.0, 1);</div><div class="line"></div><div class="line">CGContextSetRGBFillColor(context, 1, 0, 0, 1);</div><div class="line"></div><div class="line">CGContextSetLineWidth(context, 3.0);</div><div class="line"></div><div class="line">//7.绘制</div><div class="line"></div><div class="line">CGContextDrawPath(context, kCGPathFillStroke);  </div><div class="line"></div><div class="line">//8.释放路径</div><div class="line"></div><div class="line">CGPathRelease(path);</div></pre></td></tr></table></figure>
</li>
<li><p>绘制线条的第二种方式：直接将线条绘制到图形上下文上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//获取当前的图形上下文</div><div class="line"></div><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line"></div><div class="line">CGPoint points[] = &#123;&#123;50,50&#125;, &#123;200,200&#125;, &#123;50,200&#125;, &#123;50,50&#125;&#125;;</div><div class="line"></div><div class="line">//直接将线条添加到图形上下文</div><div class="line">CGContextAddLines(context, points, 4);</div><div class="line"></div><div class="line">//设置图形上下文的属性</div><div class="line">[[UIColor redColor] setStroke];</div><div class="line">[[UIColor blueColor] setFill];</div><div class="line"></div><div class="line">//[[UIColor orangeColor] set]; //一起设置线条和填充颜色</div><div class="line"></div><div class="line">CGContextSetLineWidth(context, 5);</div><div class="line"></div><div class="line">//绘制</div><div class="line">CGContextDrawPath(context, kCGPathFillStroke);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>绘制矩形</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//获取当前的图形上下文</div><div class="line"></div><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line"></div><div class="line">CGContextAddRect(context, CGRectMake(10, 10, 200, 200));</div><div class="line">[[UIColor orangeColor] set];</div><div class="line">CGContextSetLineWidth(context, 5);</div><div class="line">//绘制</div><div class="line">CGContextDrawPath(context, kCGPathFillStroke);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>绘制圆形</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//获取当前的图形上下文</div><div class="line"></div><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line"></div><div class="line">CGContextAddArc(context, 100, 100, 100, 0, M_PI * 2, 0);</div><div class="line">[[UIColor redColor] set];</div><div class="line">CGContextDrawPath(context, kCGPathFillStroke);</div></pre></td></tr></table></figure>
</li>
<li><p>绘制Bezier曲线</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//获取当前的图形上下文</div><div class="line"></div><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line"></div><div class="line">CGContextMoveToPoint(context, 20, 200);</div><div class="line">CGContextAddCurveToPoint(context, 100, 220, 200, 300, 300, 50);</div><div class="line">[[UIColor redColor] set];</div><div class="line">CGContextDrawPath(context, kCGPathFillStroke);</div></pre></td></tr></table></figure>
</li>
<li><p>绘制文本:轻量级，不需要创建一个UI控件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *str = @&quot;I am a teacher and you are a student&quot;;</div><div class="line">UIFont *font = [UIFont systemFontOfSize:18];</div><div class="line">UIColor *color = [UIColor redColor];</div><div class="line"></div><div class="line">NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];</div><div class="line">style.alignment = NSTextAlignmentCenter;</div><div class="line"></div><div class="line">NSDictionary *attributes = @&#123;</div><div class="line">                             NSFontAttributeName : font,</div><div class="line">                             NSForegroundColorAttributeName : color,</div><div class="line">                             NSParagraphStyleAttributeName : style</div><div class="line">                             &#125;;</div><div class="line">[str drawInRect:CGRectMake(50, 50, 200, 400) withAttributes:attributes];</div></pre></td></tr></table></figure>
</li>
<li><p>绘制图片：轻量级，不需要创建UIIMageView就能显示图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//获取当前的图形上下文</div><div class="line"></div><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line"></div><div class="line">//1.创建UIImage</div><div class="line">UIImage *image = [UIImage imageNamed:@&quot;ali.jpg&quot;];</div><div class="line"></div><div class="line">//2.坐标系统的转换 UIKit(左上）--&gt;Quarz2D（左下）</div><div class="line">//(1)保存UIKitContex</div><div class="line">CGContextSaveGState(context);</div><div class="line"></div><div class="line">//(2)把y缩放为原来的-1倍</div><div class="line">CGContextScaleCTM(context, 1, -1);</div><div class="line"></div><div class="line">//(3)把y平移图片高度</div><div class="line">CGContextTranslateCTM(context, 0, -image.size.height);</div><div class="line"></div><div class="line">CGContextDrawImage(context, CGRectMake(0, 0, image.size.width, image.size.height), image.CGImage);</div><div class="line"></div><div class="line">//(4）恢复contex</div><div class="line">CGContextRestoreGState(context);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>这里是我的一个关于自定义水印的demo:<a href="https://github.com/Feyddy/FDWaterImage.git" title="FDWaterImage" target="_blank" rel="external">FDWaterImage</a></p>
</li>
<li><p>我们在做一个自定义的UILabel好了：<br>FDLabel.h里面自定义两个开放的属性:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">@interface MyLabel : UIView</div><div class="line"></div><div class="line">@property(nonatomic, copy)NSString *text;</div><div class="line"></div><div class="line">@property(nonatomic, strong)UIFont *font;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>FDLabel.m 里面实现drawRect方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import &quot;FDLabel.h&quot;</div><div class="line"></div><div class="line">@implementation FDLabel</div><div class="line"></div><div class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class="line">    if (self = [super initWithFrame:frame]) &#123;</div><div class="line">		 self.font = [UIFont systemFontOfSize:14];</div><div class="line">  		 self.text = @&quot;Label&quot;;</div><div class="line">  &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    // Drawing code</div><div class="line">    //绘制文本</div><div class="line">    NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];</div><div class="line">    style.alignment = NSTextAlignmentCenter;</div><div class="line">    UIColor *color = [UIColor greenColor];</div><div class="line">    [self.text drawInRect:rect withAttributes:@&#123;NSFontAttributeName : self.font,</div><div class="line">     										NSForegroundColorAttributeName : color,</div><div class="line">                                          NSParagraphStyleAttributeName : style</div><div class="line">                                          </div><div class="line">                                          &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setFont:(UIFont *)font &#123;</div><div class="line">  if (_font != font) &#123;</div><div class="line">	  _font = font;</div><div class="line">  	//刷新Label,要发送setNeedsDisplay方法来让系统自动调用drawRect:刷新</div><div class="line">  	[self setNeedsDisplay];</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">- (void)setText:(NSString *)text &#123;</div><div class="line">    if (_text != text) &#123;</div><div class="line">      _text = text;</div><div class="line">      [self setNeedsDisplay];</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>​                                    </p>
</li>
<li><p>读取生成PDF<br>首先创建一个工程，导入CoreText.framework框架。在ViewController.h文件中引入CoreText文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">-(void)drawText</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"> //在沙盒目录下创建PDF文件，并命名为Invoice.pdf</div><div class="line"></div><div class="line">NSString* fileName = @&quot;Invoice.PDF&quot;;</div><div class="line">NSArray *arrayPaths =</div><div class="line">NSSearchPathForDirectoriesInDomains(</div><div class="line">                                    NSDocumentDirectory,</div><div class="line">                                    NSUserDomainMask,</div><div class="line">                                    YES);</div><div class="line">NSString *path = [arrayPaths objectAtIndex:0];</div><div class="line">NSString* pdfFileName = [path stringByAppendingPathComponent:fileName];</div><div class="line"></div><div class="line">//创建一个已“Hello，world”为内容的PDF，将string转换为CFStringRef格式</div><div class="line">NSString* textToDraw = @&quot;Hello World&quot;;</div><div class="line">CFStringRef stringRef = (__bridge CFStringRef)textToDraw;</div><div class="line"></div><div class="line">// 使用 Core Text Framesetter.</div><div class="line">CFAttributedStringRef currentText = CFAttributedStringCreate(NULL, stringRef, NULL);</div><div class="line">CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString(currentText);</div><div class="line"></div><div class="line">//创建一个CGRect用于定义文本的大小</div><div class="line">  CGRect frameRect = CGRectMake(0, 0, 300, 50);CGMutablePathRef framePath = CGPathCreateMutable();CGPathAddRect(framePath, NULL, frameRect);// 获取将要被渲染的帧CFRange currentRange = CFRangeMake(0, 0);CTFrameRef frameRef = CTFramesetterCreateFrame(framesetter, currentRange, framePath, NULL);CGPathRelease(framePath);</div><div class="line">  </div><div class="line">  </div><div class="line">  //创建一个PDF上下文和标记的PDF的起始页。 PDF的每个页面都有开始并调用UIGraphicsBeginPDFPageWithInfo</div><div class="line">    // 创建一个PDF的上下文，页面大小默认为 612 x 792UIGraphicsBeginPDFContextToFile(pdfFileName, CGRectZero, nil);// 标记新页面的开头UIGraphicsBeginPDFPageWithInfo(CGRectMake(0, 0, 612, 792), nil);// 获取上下文.CGContextRef currentContext = UIGraphicsGetCurrentContext();</div><div class="line">    </div><div class="line">    </div><div class="line">    // 创建一个PDF的上下文，页面大小默认为 612 x 792</div><div class="line">UIGraphicsBeginPDFContextToFile(pdfFileName, CGRectZero, nil);</div><div class="line">// 标记新页面的开头</div><div class="line">UIGraphicsBeginPDFPageWithInfo(CGRectMake(0, 0, 612, 792), nil);</div><div class="line">// 获取上下文.</div><div class="line">CGContextRef currentContext = UIGraphicsGetCurrentContext();</div><div class="line"> //由于Core Graphics 的坐标是从左下角开始，而UIKit的坐标是从左上角开始，所以需做一个变换：</div><div class="line"> // 把文字变成矩阵已知状态。这将确保没有旧缩放因子被留在原处。</div><div class="line"> CGContextSetTextMatrix(currentContext, CGAffineTransformIdentity);</div><div class="line"> //文本坐标翻转</div><div class="line"> CGContextTranslateCTM(currentContext, 0, 100);</div><div class="line"> CGContextScaleCTM(currentContext, 1.0, -1.0);</div><div class="line"> //绘制文本实际帧，释放Core Graphics对象，并关闭PDF上下文至此PDF写入到沙盒目录下。</div><div class="line"> // 绘制帧</div><div class="line"> CTFrameDraw(frameRef, currentContext);</div><div class="line"> CFRelease(frameRef);</div><div class="line"> CFRelease(stringRef);</div><div class="line"> CFRelease(framesetter);</div><div class="line"> //关闭PDF上下文</div><div class="line"> UIGraphicsEndPDFContext();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>我们使用UIWebView来加载PDF文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">- (void)showPDFFile</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">NSString* fileName = @&quot;Invoice.PDF&quot;;</div><div class="line"></div><div class="line">NSArray *arrayPaths =</div><div class="line"></div><div class="line">NSSearchPathForDirectoriesInDomains( NSDocumentDirectory,</div><div class="line">                              NSUserDomainMask,</div><div class="line">                              YES);</div><div class="line">   NSString *path = [arrayPaths objectAtIndex:0];</div><div class="line">  NSString* pdfFileName = [path stringByAppendingPathComponent:fileName];</div><div class="line"></div><div class="line">  UIWebView* webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, 320, 480)];</div><div class="line"></div><div class="line">  NSURL *url = [NSURL fileURLWithPath:pdfFileName];</div><div class="line"></div><div class="line">  NSURLRequest *request = [NSURLRequest requestWithURL:url];</div><div class="line"></div><div class="line">  [webView setScalesPageToFit:YES];</div><div class="line"></div><div class="line">  [webView loadRequest:request];</div><div class="line"></div><div class="line">  [self.view addSubview:webView];  </div><div class="line"></div><div class="line">  &#125;</div><div class="line"> -(void)viewDidLoad</div><div class="line"></div><div class="line">  &#123;</div><div class="line"></div><div class="line">    [self drawText];</div><div class="line"></div><div class="line">    [self showPDFFile];</div><div class="line"></div><div class="line">   [super viewDidLoad];</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Quartz-2D的渐变方式分为两种："><a href="#Quartz-2D的渐变方式分为两种：" class="headerlink" title="Quartz 2D的渐变方式分为两种："></a>Quartz 2D的渐变方式分为两种：</h4><pre><code>a.线性渐变线：渐变色以直线方式从开始位置逐渐向结束位置渐变
b.径向渐变：以中心点为圆心从起始渐变色向四周辐射，直到终止渐变色
   要做渐变则必须先设置从开始位置到结束位置的渐变颜色，做过photoshop的朋友相信对于渐变色设置并不陌生，只要在指定位置指定不同的颜色，剩下的事情交给系统处理即可，如下图在起始位置、3/10位置、结束位置指定了三种颜色就形成由三种颜色组成的渐变色：
</code></pre><p><img src="http://img.blog.csdn.net/20160113092306928" alt=""><br>另外，在iOS中绘制渐变还需要注意一点就是指定颜色空间，所谓颜色空间就是不同颜色在不同的维度上取值最终组成一种颜色的过程。就拿RGB来说，如果将红色、绿色、蓝色看成是x、y、z轴坐标系，那么在三个坐标上分别取0~255范围内的不同值则可以组成各类颜色。当然，不同颜色空间的“坐标系”也是不同的（也就是说颜色表示的方式是不同的），常用的颜色空间除了RGB还有CMYK（印刷业常用这种颜色模式）、Gray。<br>      在使用Quartz 2D绘图时我们的颜色除了使用常规的方法（前面<code>CGContextSetRGBFillColor(CGContextRef context, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)</code>方法）设置<code>RGB</code>和透明度外，有时还会遇到颜色参数是一个数组情况。如使用颜色空间填充时用到的<code>CGContextSetFillColor(CGContextRef context, const CGFloat *components)</code>方法，这个时候components数组中具体是如何存储颜色就要根据颜色空间而定，如果颜色空间使用RGB则数组中的元素四个为一组，分别是red（红）、green（绿）、blue（蓝）、alpha（透明度）；如果使用CMYK颜色空间，那么数组中的元素五个为一组，分别是cyan（青）、magenta（洋红）、yellow（黄）、black（黑）、alpha（透明度）。</p>
<p>详细demo请看：<a href="https://github.com/Feyddy/FDQuartz2DGradualChange.git" target="_blank" rel="external">FDQuartz2DGradualChange</a><br>或者还有一篇比较好的博客：<a href="http://blog.csdn.net/xy_26207005/article/details/51481510" target="_blank" rel="external"> http://blog.csdn.net/xy_26207005/article/details/51481510 </a></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Quartz 2D </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARC的基本使用]]></title>
      <url>http://yoursite.com/2017/01/12/ARC%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>ARC中可以重写dealloc，但是不允许调用[super dealloc]</p>
</li>
<li><p>ARC中一般不需要重写Dealloc,但是一些情况比如移除通知，移除观察者等需要重写dealloc,在对象释放之前做一些内存的清理工作。</p>
</li>
<li><p>弱指针指向的实例对象被释放后，弱指针自动清空为nil</p>
<p>__<em>unsafe\</em>__unretained修饰的指针，当其指向的实例对象被释放后，此指针不会自动清空。此关键字在iOS5之前会使用，目前几乎不使用。</p>
</li>
<li><p>弱指针使用的场景：</p>
<p>   (1)delegate属性一般使用weak避免产生循环引用 self–&gt;self.view–&gt;tableView–&gt;self 产生循环引用</p>
<p>   (2)block</p>
<p>   (3)storyboard连线默认是weak:viewController–&gt;view–&gt;button,没有必要再让viewController再次持有一次button。</p>
<a id="more"></a>
</li>
<li><p>ARC桥接（Toll-free Bridging。 简称：TFB）</p>
<ul>
<li><p>允许OC类型与对应的CoreFoundation类型之间相互转换的机制。</p>
</li>
<li><p>ARC进行内存管理的范围即OC对象，对于CF框架框架中的对象无法进行管理。</p>
</li>
<li><p>两个框架之间类型进行转换时，有三个关键字进行桥接：_<strong><em>bridge\</em>_ </strong>bridge_retained __bridge_transfer</p>
</li>
<li><p><strong>\</strong>bridge表示即不授权也不放权，仍然由ARC来管理string对象的内存.__</p>
<p><code>CFStringRef cfstring1 = (__bridge CFStringRef)string;</code></p>
</li>
<li><p>__bridge_retained表示ARC放弃管理内存，把此权利交给CF,由其管理内存</p>
<p><code>CFStringRef cfstring1 = (__bridge_retained CFStringRef)string;</code></p>
<p><code>CFStringRef cfstring2 = CFBridgingRetain(string);</code></p>
</li>
<li><p>CF释放内存</p>
<p><code>CFRelease(cfstring1);</code></p>
</li>
</ul>
<p>下面举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CFStringRef cfString = CFStringCreateWithFormat(kCFAllocatorDefault, NULL, (__bridge CFStringRef)@&quot;text-%i&quot;, 100);</div><div class="line"></div><div class="line">  //把CF对象转成OC对象 __bridge_transfer：表示把管理内存的权利授权给ARC,CF不需要管理内存</div><div class="line">  NSString *ocString = (__bridge_transfer NSString *)cfString;</div><div class="line">  </div><div class="line">  CFRelease(cfString);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ARC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Block的基本用法]]></title>
      <url>http://yoursite.com/2017/01/12/Block%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>block是OC中另外一种对象和对象的通信方式，是一对一的关系，类似于delegate，而通知时一对多的关系</p>
<h4 id="Block的基本用法"><a href="#Block的基本用法" class="headerlink" title="Block的基本用法"></a>Block的基本用法</h4><ul>
<li><p>block 也可以看做是一个变量，也有点类似于函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// block 的声明</div><div class="line"></div><div class="line"> // 返回值 (^变量名)(参数类型1, 参数类型2, ...)</div><div class="line"></div><div class="line"> int (^block1)(int, int);</div><div class="line"></div><div class="line"> // block 的赋值</div><div class="line"></div><div class="line"> // 注意 1. 参数不能只写类型，必须要带上参数名。 2. block的创建不代表代码块的运行</div><div class="line"></div><div class="line"> block1 = ^(int a, int b)&#123;</div><div class="line"></div><div class="line">     return a + b;</div><div class="line"></div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> // block 的调用</div><div class="line"></div><div class="line"> int sum = block1(10,20);</div><div class="line"></div><div class="line"> NSLog(@&quot;%i&quot;, sum);</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>定义一个block类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//---------------------block类型的定义---------------------</div><div class="line"></div><div class="line">// 定义一个block类型</div><div class="line"></div><div class="line">// 类型名：StringBlock  指代返回值为NSString* 参数为一个int 的block</div><div class="line"></div><div class="line">typedef NSString *(^StringBlock)(int);</div><div class="line"></div><div class="line">// 使用block类型 来定义变量</div><div class="line"></div><div class="line">StringBlock block2 = ^(int b)&#123;</div><div class="line"></div><div class="line">    return [NSString stringWithFormat:@&quot;%i&quot;, b];</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">NSString *str1 = block2(5);</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;, str1);</div></pre></td></tr></table></figure>
</li>
<li><p>block作为参数传递</p>
<p>首先我们先定义一个Person类，里面定义一个Block属性</p>
<p>Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- #import &lt;Foundation/Foundation.h&gt;</div><div class="line">  typedef NSString *(^YearBlock)();</div><div class="line">  @interface Person : NSObject</div><div class="line"></div><div class="line">  @property (nonatomic, copy) NSString *name;     // 名字</div><div class="line"></div><div class="line">  @property (nonatomic, assign) NSInteger age;    // 年龄</div><div class="line"></div><div class="line">  @property (nonatomic, copy) YearBlock block;</div><div class="line"></div><div class="line">- (instancetype)initWithName:(NSString *)name age:(NSInteger)age;</div><div class="line"></div><div class="line">- (void)setBlock:(YearBlock)block;</div><div class="line"></div><div class="line">  @end</div></pre></td></tr></table></figure>
<p>Person.m</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> #import &quot;Person.h&quot;</div><div class="line"></div><div class="line">  @implementation Person</div><div class="line"></div><div class="line">- (instancetype)initWithName:(NSString *)name age:(NSInteger)age</div><div class="line">  &#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self)</div><div class="line">    &#123;</div><div class="line">        self.name = name;</div><div class="line">        self.age = age;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">  &#125;</div><div class="line">- (void)setBlock:(YearBlock)block</div><div class="line">  &#123;</div><div class="line">    // block 在作为类的属性  或者全局变量时 需要使用copy</div><div class="line">    _block = [block copy];</div><div class="line">  &#125;</div><div class="line">  @end</div></pre></td></tr></table></figure>
<p>然后在控制器中实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//---------------------block作为参数---------------------</div><div class="line"></div><div class="line">  Person *p = [[Person alloc] initWithName:@&quot;jack&quot; age:18];</div><div class="line"></div><div class="line">  [p setBlock:^NSString *&#123;</div><div class="line"></div><div class="line">      return [NSString stringWithFormat:@&quot;%li&quot;, 2015 - p.age];</div><div class="line"></div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  NSString *yearString = p.block();</div><div class="line"></div><div class="line">  NSLog(@&quot;%@&quot;, yearString);</div></pre></td></tr></table></figure>
<ul>
<li><p>block页面传值</p>
<p>首先创建一个控制器SecondViewController，里面定义一个block</p>
<p>SecondViewController.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">// 给block 声明一个数据类型</div><div class="line"></div><div class="line">typedef void(^ShowTextBlock)(NSString *);</div><div class="line"></div><div class="line">@interface SecondViewController : UIViewController</div><div class="line"></div><div class="line">// 定义一个block</div><div class="line"></div><div class="line">@property (nonatomic, copy) ShowTextBlock block;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>​</p>
<p>SecondViewController.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#import &quot;SecondViewController.h&quot;</div><div class="line"></div><div class="line">@interface SecondViewController ()</div><div class="line"></div><div class="line">@property (weak, nonatomic) IBOutlet UITextField *textField;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation SecondViewController</div><div class="line"></div><div class="line">- (IBAction)enterButtonAction:(id)sender &#123;</div><div class="line">  // 使用block 来回传数据</div><div class="line">  if (_block)</div><div class="line">  &#123;</div><div class="line">    block(textField.text);</div><div class="line">  &#125;</div><div class="line">  [self.navigationController popToRootViewControllerAnimated:YES];</div><div class="line">  &#125;</div><div class="line">  @end</div></pre></td></tr></table></figure>
<p>​</p>
<p>然后在主控制器中给block赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#import &quot;SecondViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *label;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">  [super viewDidLoad];</div><div class="line">  // Do any additional setup after loading the view, typically from a nib.</div><div class="line">  &#125;</div><div class="line">- (IBAction)pushInputView:(id)sender &#123;</div><div class="line">  SecondViewController *second = [self.storyboard instantiateViewControllerWithIdentifier:@&quot;SecondViewController&quot;];</div><div class="line">  // 给block赋值 用于将回传的值 显示到label上面去</div><div class="line">  [second setBlock:^(NSString *text)&#123;</div><div class="line">    _label.text = text;</div><div class="line">  &#125;];</div><div class="line">  [self.navigationController pushViewController:second animated:YES];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>block的内存管理问题</p>
<p>  循环引用的原因：某个对象 持有了一个 被 copy的block，这个block中，又引用了这个对象</p>
<p>  解决方法: 使用一个__weak类型的中间指针 来引用这个对象。如：__</p>
<p>  <code>weak Person *weakP = p;</code></p>
<p>  循环引用：造成了内存泄漏 </p>
<p>  在ARC中，block中使用到了某个对象，或者对象的属性，可以看作是block持有了这个对象</p>
</li>
<li><p>block和变量</p>
<p>  局部变量：在block中，会把局部变量当成常量变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">int num=10;</div><div class="line"></div><div class="line">      　　int num=30;</div><div class="line"></div><div class="line">      　　MyBlock myblock=^(int a)</div><div class="line"></div><div class="line">      　　&#123;</div><div class="line"></div><div class="line">      　　num=20; //此处会报错</div><div class="line"></div><div class="line">      　　NSLog(@&quot;%d&quot;,a);</div><div class="line"></div><div class="line">      　　return 30;</div><div class="line"></div><div class="line">      　　&#125;;</div></pre></td></tr></table></figure>
<p>  ​</p>
<p>  原因：block代码块不会在写的地方执行，是在其他地方调用时才会执行，局部变量在跳出此作用域时销毁，所以block代码块会将局部变量当成一个常量变量来处理，要修改前面加__block</p>
<p>  解决方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">__block int num=10; </div><div class="line"></div><div class="line">MyBlock myblock=^(int a) &#123; </div><div class="line"></div><div class="line">NSLog(@&quot;before the val of num is %d&quot;,num);</div><div class="line"></div><div class="line">num++; </div><div class="line"></div><div class="line">return 30; </div><div class="line"></div><div class="line">&#125;; </div><div class="line"></div><div class="line">num=30; </div><div class="line"></div><div class="line">[self testBlock:myblock];</div><div class="line"></div><div class="line">NSLog(@&quot;after the val of num is %d&quot;,num);</div></pre></td></tr></table></figure>
<p>  ​</p>
<p>  输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2013-10-28 15:38:24.602 blockDemo[1541:70b] before the val of num is 30</div><div class="line"></div><div class="line">2013-10-28 15:38:24.603 blockDemo[1541:70b] after the val of num is 31</div></pre></td></tr></table></figure>
<p>  ​</p>
</li>
<li><p>用block自定义一个按钮</p>
<p>  BlockButton.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  #import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">  // 定义block类型</div><div class="line"></div><div class="line">  typedef void(^ButtonBlock)(UIButton *);</div><div class="line"></div><div class="line">  @interface BlockButton : UIButton</div><div class="line"></div><div class="line">  // 属性  block  用于在按钮被点击之后执行回调</div><div class="line"></div><div class="line">  @property (nonatomic, copy) ButtonBlock block;</div><div class="line"></div><div class="line">  // 给按钮设置回调的block</div><div class="line"></div><div class="line">- (void)addBlock:(ButtonBlock)block;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>​</p>
<p>BlockButton.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#import &quot;BlockButton.h&quot;</div><div class="line"></div><div class="line">@implementation BlockButton</div><div class="line"></div><div class="line">// 给按钮添加block回调</div><div class="line"></div><div class="line">- (void)addBlock:(ButtonBlock)block</div><div class="line">  &#123;</div><div class="line">  // 1. 储存block</div><div class="line">  _block = [block copy];</div><div class="line">  // 2. 添加一个点击事件</div><div class="line">  [self addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">// 按钮的点击事件</div><div class="line"></div><div class="line">- (void)buttonAction:(UIButton *)button</div><div class="line">  &#123;</div><div class="line">  // 调用block</div><div class="line">  // 判断 如果没有block</div><div class="line">  if (_block)</div><div class="line">  &#123;</div><div class="line">      _block(button);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  @end</div></pre></td></tr></table></figure>
<p>​</p>
<p>然后在主控制器中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#import &quot;BlockButton.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">  [super viewDidLoad];</div><div class="line">  BlockButton *button2 = [BlockButton buttonWithType:UIButtonTypeContactAdd];</div><div class="line">  button2.frame = CGRectMake(100, 100, 30, 30);</div><div class="line">  // 给按钮添加点击回调block</div><div class="line">  [button2 addBlock:^(UIButton *button) &#123;</div><div class="line">   // 按钮被点击之后 运行的代码</div><div class="line">    NSLog(@&quot;按钮被点击了&quot;);</div><div class="line">  &#125;];</div><div class="line">  [self.view addSubview:button2];</div><div class="line">  &#125;</div><div class="line">- (void)buttonAction:(UIButton *)button</div><div class="line">  &#123;</div><div class="line">  &#125;</div><div class="line">  @end</div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Block </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[触摸与手势]]></title>
      <url>http://yoursite.com/2017/01/12/%E8%A7%A6%E6%91%B8%E4%B8%8E%E6%89%8B%E5%8A%BF/</url>
      <content type="html"><![CDATA[<ul>
<li><p>UITouch</p>
<p>触摸实现的方法很简单，只需要在视图中重写以下的方法就行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// 当有一个或者多个手指 开始触摸屏幕时调用</div><div class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;开始了一次触摸&quot;);</div><div class="line">    </div><div class="line">    //---------------------UITouch---------------------</div><div class="line">    // 从NSSet从 取出一个触摸对象</div><div class="line">    UITouch *touch = [touches anyObject];</div><div class="line"></div><div class="line">    // 获取触摸所在的window</div><div class="line">    //NSLog(@&quot;触摸所在的window %@&quot;, touch.window);</div><div class="line">    //NSLog(@&quot;当前视图所在的window%@&quot;, self.window);</div><div class="line">    </div><div class="line">    // 获取触摸所在的View</div><div class="line">//    NSLog(@&quot;触摸所在的View:%@, self = %@&quot;, touch.view, self);</div><div class="line">    </div><div class="line">    // 触摸的位置 相对于某个视图的坐标点</div><div class="line">    CGPoint point = [touch locationInView:self.superview];</div><div class="line">    </div><div class="line">    NSLog(@&quot;point x = %f, y = %f&quot;, point.x, point.y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;触摸结束&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;移动触摸点&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;触摸取消&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注：</strong>如果是在封装的控件中（如：UIView）实现UITouch的方法，那么只有点击这个View的时候才会触发这些方法。</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>下面我们实现两个小的demo</p>
<p>1、运用手势移动视图：</p>
<p>定义一个视图UIView的子类，然后实现下面的代码，然后就可以实现拖动视图的效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">#import &quot;TouchView.h&quot;</div><div class="line"></div><div class="line">@interface TouchView()</div><div class="line">&#123;</div><div class="line">    CGPoint _beganPoint;        // 触摸开始的位置点</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation TouchView</div><div class="line"></div><div class="line">// 开始</div><div class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;触摸开始&quot;);</div><div class="line">    UITouch *touch = [touches anyObject];</div><div class="line">    // 获取起始点 相关与红色视图的位置</div><div class="line">    _beganPoint = [touch locationInView:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 移动</div><div class="line">- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    /*</div><div class="line">    // 方法一 ：根据两次触摸之间的偏移 来改变视图的位置</div><div class="line">     </div><div class="line">    // 当触摸移动时，视图跟着触摸一起移动</div><div class="line">    // 1. 获取触摸对象</div><div class="line">    UITouch *touch = [touches anyObject];</div><div class="line">    // 2. 获取触摸的位置</div><div class="line">    CGPoint point = [touch locationInView:self.superview];</div><div class="line">    // 获取前一个触摸点的位置</div><div class="line">    CGPoint prePoint = [touch previousLocationInView:self.superview];</div><div class="line">    </div><div class="line">    // 计算位置的改变</div><div class="line">    CGPoint changed = CGPointMake(point.x - prePoint.x, point.y - prePoint.y);</div><div class="line">    </div><div class="line">    // 3. 改变视图位置</div><div class="line">    self.center = CGPointMake(self.center.x + changed.x, self.center.y + changed.y);</div><div class="line">     */</div><div class="line">    </div><div class="line">    </div><div class="line">    // 方法二 ： 纪录触摸开始时的坐标点 来改变视图的位置</div><div class="line">    UITouch  *touch = [touches anyObject];</div><div class="line">    // 获取触摸的位置</div><div class="line">    CGPoint point = [touch locationInView:self.superview];</div><div class="line">    // 计算位置的偏移</div><div class="line">    CGPoint point2 = CGPointMake(50 - _beganPoint.x, 50 - _beganPoint.y);</div><div class="line">    </div><div class="line">    // 计算实际中心点的位置</div><div class="line">    CGPoint center = CGPointMake(point.x + point2.x, point.y + point2.y);</div><div class="line">    </div><div class="line">    self.center = center;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结束</div><div class="line">- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、自定义按钮点击方法（继承UIView）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">#import &quot;MyButton.h&quot;</div><div class="line"></div><div class="line">@interface MyButton()</div><div class="line">&#123;</div><div class="line">    id _target;</div><div class="line">    SEL _selector;</div><div class="line">    </div><div class="line">    NSTimeInterval _time; //点击开始的时间</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation MyButton</div><div class="line"></div><div class="line">- (instancetype)initWithFrame:(CGRect)frame target:(id)target selector:(SEL)selector</div><div class="line">&#123;</div><div class="line">    self = [super initWithFrame:frame];</div><div class="line">    if (self)</div><div class="line">    &#123;</div><div class="line">        _target = target;</div><div class="line">        _selector = selector;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 按钮的点击</div><div class="line">- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    // 调用SEL方法</div><div class="line">    if ([_target respondsToSelector:_selector])</div><div class="line">    &#123;</div><div class="line">        [_target performSelector:_selector];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 获取点击开始的时间</div><div class="line">    NSDate *date = [NSDate date];</div><div class="line">    _time = [date timeIntervalSince1970];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    // 获取触摸对象</div><div class="line">    UITouch *touch = [touches anyObject];</div><div class="line">    // 获取触摸点</div><div class="line">    CGPoint point = [touch locationInView:self];</div><div class="line">    </div><div class="line">    </div><div class="line">    // 点击结束之后 再次读取时间，比较两个时间差</div><div class="line">    NSDate *date = [NSDate date];</div><div class="line">    NSTimeInterval endedTime = [date timeIntervalSince1970];</div><div class="line">    // 结束时间 － 开始时间</div><div class="line">    if (endedTime - _time &gt; 3)</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;长按&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;普通点击&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 判断某个点 是否在视图中</div><div class="line">    BOOL isInside = [self pointInside:point withEvent:nil];</div><div class="line">    if (isInside)</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;在按钮内部放开&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;在按钮外部放开&quot;);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>然后直接创建按钮,并实现按钮方法就行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyButton *button = [[MyButton alloc] initWithFrame:CGRectMake(30, 30, 50, 50) target:self selector:@selector(buttonAction)];</div><div class="line">button.backgroundColor = [UIColor orangeColor];</div><div class="line"></div><div class="line">[self.view addSubview:button];</div></pre></td></tr></table></figure>
</li>
<li><p>事件的分发</p>
<p>基本上有下面两个方法：</p>
<p><code>- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</code></p>
<p><code>- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event</code></p>
<p>​</p>
<p>处理原理如下：</p>
<ul>
<li>当用户点击屏幕时，会产生一个触摸事件，<a href="http://www.2cto.com/os/" target="_blank" rel="external">系统</a>会将该事件加入到一个由UIApplication管理的事件队列中</li>
<li>UIApplication会从事件队列中取出最前面的事件进行分发以便处理，通常，先发送事件给应用程序的主窗口(UIWindow)</li>
<li>主窗口会调用hitTest:withEvent:方法在视图(UIView)层次结构中找到一个最合适的UIView来处理触摸事件</li>
</ul>
<p>(hitTest:withEvent:其实是UIView的一个方法，UIWindow继承自UIView，因此主窗口UIWindow也是属于视图的一种)</p>
<ul>
<li>hitTest:withEvent:方法大致处理流程是这样的：</li>
</ul>
<p>首先调用当前视图的pointInside:withEvent:方法判断触摸点是否在当前视图内：</p>
<ul>
<li>若pointInside:withEvent:方法返回NO，说明触摸点不在当前视图内，则当前视图的hitTest:withEvent:返回nil</li>
<li>若pointInside:withEvent:方法返回YES，说明触摸点在当前视图内，则遍历当前视图的所有子视图(subviews)，调用子视图的hitTest:withEvent:方法重复前面的步骤，子视图的遍历顺序是从top到bottom，即从subviews数组的末尾向前遍历，直到有子视图的hitTest:withEvent:方法返回非空对象或者全部子视图遍历完毕：</li>
<li>若第一次有子视图的hitTest:withEvent:方法返回非空对象,则当前视图的hitTest:withEvent:方法就返回此对象，处理结束</li>
<li>若所有子视图的hitTest:withEvent:方法都返回nil，则当前视图的hitTest:withEvent:方法返回当前视图自身(self)</li>
<li>最终，这个触摸事件交给主窗口的hitTest:withEvent:方法返回的视图对象去处理。</li>
</ul>
<p>拿到这个UIView后，就调用该UIView的touches系列方法。</p>
<p>​</p>
<ul>
<li>消息处理过程，在找到的那个视图里处理，处理完后根据需要，利用响应链nextResponder可将消息往下一个响应者传递。</li>
</ul>
<p>UIAppliactionDelegate &lt;- UIWindow &lt;- UIViewController &lt;- UIView &lt;- UIView</p>
<p>【关键】：要理解的有三点：1、iOS判断哪个界面能接受消息是从View层级结构的父View向子View传递，即树状结构的根节点向叶子节点递归传递。2、hitTest和pointInside成对，且hitTest会调用pointInside。3、iOS的消息处理是，当消息被人处理后默认不再向父层传递</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  分发一个触摸事件</div><div class="line"> *</div><div class="line"> *  @param point 触摸的位置</div><div class="line"> *  @param event 触摸的事件</div><div class="line"> *</div><div class="line"> *  @return 响应事件的视图</div><div class="line"> */</div><div class="line"></div><div class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    // 判断点在不在视图上面</div><div class="line">    // 判断触摸在不在子视图上</div><div class="line">    // 1. 获取当前视图的所有子视图</div><div class="line">    </div><div class="line">    NSArray *subViews = self.subviews;</div><div class="line">    for (int i = (int)subViews.count - 1; i &gt;=0; i--)</div><div class="line">    &#123;</div><div class="line">        // 按照从后到前的顺序 取出一个子视图</div><div class="line">        UIView *view = subViews[i];</div><div class="line">        </div><div class="line">        // 如果视图没有开启用户事件接收</div><div class="line">        if (view.userInteractionEnabled == NO)</div><div class="line">        &#123;</div><div class="line">            // 跳出本次循环，继续后面的循环</div><div class="line">            </div><div class="line">            continue;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        // 2. 判断点击是否在该视图内</div><div class="line">        // 将一个点的坐标 转化为另一个视图上坐标系中的点</div><div class="line">        CGPoint newPoint = [self convertPoint:point toView:view];</div><div class="line">        // 判断</div><div class="line">        BOOL isInside = [view pointInside:newPoint withEvent:nil];</div><div class="line">        if (isInside)</div><div class="line">        &#123;</div><div class="line">            // 如果点在视图上，则由此视图来响应这次触摸事件</div><div class="line">            UIView *view2 = [view hitTest:newPoint withEvent:event];</div><div class="line">            return view2;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 1. 父视图接收到触摸事件</div><div class="line">    // 2. 从上到下判断触摸的点 是否在每一个子视图上</div><div class="line">    // 2.1 在某个子视图上,则由这个子视图来响应本次触摸事件</div><div class="line">    // 2.2 不在任何一个子视图上,则由父视图本身响应触摸事件</div><div class="line"></div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 事件的分发</div><div class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</div><div class="line">&#123;</div><div class="line">    // 判断 子视图是否接受点击事件</div><div class="line">    UIView *view = [super hitTest:point withEvent:event];</div><div class="line">    </div><div class="line">    // 判断触摸的范围 是否在100-200之间</div><div class="line">    if (point.y &gt;= 0 &amp;&amp; point.y &lt;= 100 &amp;&amp; view == nil)</div><div class="line">    &#123;</div><div class="line">        // 由滑动视图 来响应事件</div><div class="line">        view = self;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 由上一级 决定响应者</div><div class="line">    return view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>响应者链</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UIResponder *responder = self.nextResponder;</div><div class="line">   while (responder != nil &amp;&amp; ![responder isKindOfClass:[UIViewController class]]) &#123;</div><div class="line">       responder = responder.nextResponder;</div><div class="line">   &#125;</div><div class="line">   return (UIViewController *)responder;</div></pre></td></tr></table></figure>
</li>
<li><p>手势</p>
<p>手势分为很多种：单击、双击、轻扫、平移、长按、旋转、捏合等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    </div><div class="line">    //---------------------tap 点击---------------------</div><div class="line">    // 单击</div><div class="line">    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapAction:)];</div><div class="line">    // 短时间内点击的次数</div><div class="line">    tap.numberOfTapsRequired = 1;</div><div class="line">    // 触摸的手指数量</div><div class="line">    tap.numberOfTouchesRequired = 1;</div><div class="line">    [self.view addGestureRecognizer:tap];</div><div class="line">    </div><div class="line">    // 双击</div><div class="line">    UITapGestureRecognizer *tap2 = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tap2Action:)];</div><div class="line">    tap2.numberOfTapsRequired = 2;</div><div class="line">    [self.view addGestureRecognizer:tap2];</div><div class="line">    </div><div class="line">    // 区别单击双击手势</div><div class="line">    [tap requireGestureRecognizerToFail:tap2];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //---------------------swipe 轻扫---------------------</div><div class="line">    UISwipeGestureRecognizer *swipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeAction:)];</div><div class="line">    // 设定手指滑动的方向</div><div class="line">    swipe.direction = UISwipeGestureRecognizerDirectionRight;</div><div class="line">    [self.view addGestureRecognizer:swipe];</div><div class="line">    </div><div class="line">    //---------------------pan 平移---------------------</div><div class="line">    UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panAction:)];</div><div class="line">    // 当视图添加了平移手势的时候，轻扫手势就失效了</div><div class="line">    [self.view addGestureRecognizer:pan];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //---------------------longPress 长按---------------------</div><div class="line">    UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longPressAction:)];</div><div class="line">    // 长按的最短时间</div><div class="line">    longPress.minimumPressDuration = 2;</div><div class="line">    // 手指移动的最大距离</div><div class="line">    longPress.allowableMovement = 10;</div><div class="line">    </div><div class="line">    [self.view addGestureRecognizer:longPress];</div><div class="line">    </div><div class="line">    </div><div class="line">    //---------------------rotation 旋转---------------------</div><div class="line">    UIRotationGestureRecognizer *rotation = [[UIRotationGestureRecognizer alloc] initWithTarget:self action:@selector(rotationAction:)];</div><div class="line">    [self.view addGestureRecognizer:rotation];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //---------------------pinch 捏合---------------------</div><div class="line">    UIPinchGestureRecognizer *pinch = [[UIPinchGestureRecognizer alloc] initWithTarget:self action:@selector(pinchActiuon:)];</div><div class="line">    [self.view addGestureRecognizer:pinch];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark - 点击</div><div class="line">- (void)tapAction:(UITapGestureRecognizer *)tap</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;单击&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)tap2Action:(UITapGestureRecognizer *)tap</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;双击&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma maek - 轻扫</div><div class="line">- (void)swipeAction:(UISwipeGestureRecognizer *)swipe</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;向右轻扫一次&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 平移</div><div class="line">- (void)panAction:(UIPanGestureRecognizer *)pan</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;平移&quot;);</div><div class="line">    </div><div class="line">    // 平移的位置改变 终点坐标 － 起点坐标</div><div class="line">    CGPoint translation = [pan translationInView:self.view];</div><div class="line">    // NSLog(@&quot;%f,%f&quot;, translation.x, translation.y);</div><div class="line">    </div><div class="line">    // 平移时。位置变换的速度值</div><div class="line">    CGPoint velocity = [pan velocityInView:self.view];</div><div class="line">    </div><div class="line">    //_imageView.center = translation;</div><div class="line">    NSLog(@&quot;%f,%f&quot;, velocity.x, velocity.y);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 长按</div><div class="line">// 长按触发时调用第一次，手指离开屏幕时再次调用</div><div class="line">- (void)longPressAction:(UILongPressGestureRecognizer *)longPress</div><div class="line">&#123;</div><div class="line">    // 通过 state  来判断当前手势是处于那种状态下</div><div class="line">    if (longPress.state == UIGestureRecognizerStateBegan)</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;长按开始&quot;);</div><div class="line">    &#125;</div><div class="line">    else if (longPress.state == UIGestureRecognizerStateEnded)</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;长按结束&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 旋转</div><div class="line">- (void)rotationAction:(UIRotationGestureRecognizer *)rotation</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;旋转 角度:%f, 速度:%f&quot;, rotation.rotation, rotation.velocity);</div><div class="line">    CGAffineTransform transform = CGAffineTransformMakeRotation(rotation.rotation);</div><div class="line">    _imageView.transform = transform;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark - 捏合</div><div class="line">- (void)pinchActiuon:(UIPinchGestureRecognizer *)pinch</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;捏合 倍数 :%f&quot;, pinch.scale);</div><div class="line">    </div><div class="line">    CGAffineTransform transform = CGAffineTransformMakeScale(pinch.scale, pinch.scale);</div><div class="line">    _imageView.transform = transform;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UITouch </tag>
            
            <tag> hitTest </tag>
            
            <tag> pointInside </tag>
            
            <tag> UIResponder </tag>
            
            <tag> 手势 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单元格UITableViewCell的基本使用]]></title>
      <url>http://yoursite.com/2017/01/11/%E5%8D%95%E5%85%83%E6%A0%BCUITableViewCell%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>在单元格的使用中，最重要的就是单元格重用机制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">//创建单元格  ,此方法,当滑动表视图时就会调用</div><div class="line">/*  </div><div class="line">    懒加载 :如果需要需要显示100单元格,则系统不会一次性把所有的单元格创建出来</div><div class="line">    单元格重用: N+1机制: 如果屏幕上能显示N个单元格那么最多也就创建N+1个单元格,就可以满足需求</div><div class="line"> </div><div class="line"> */</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    //标识符用于标记单元格</div><div class="line">    static NSString *identy = @&quot;cell&quot;;</div><div class="line">    </div><div class="line">    //从复用池中取单元格</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identy];</div><div class="line">    //如果复用池中没有单元格</div><div class="line">    if (cell == nil) &#123;</div><div class="line"></div><div class="line">       index++;</div><div class="line">        //创建单元格</div><div class="line">       cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identy];</div><div class="line">       </div><div class="line">       </div><div class="line">        //________________单元格的常用属性______________</div><div class="line">        </div><div class="line">        //1. 单元格选中的样式 默认为UITableViewCellSelectionStyleBlue</div><div class="line">        // UITableViewCellSelectionStyleNone:取消选中效果</div><div class="line">//        cell.selectionStyle =  UITableViewCellSelectionStyleNone;</div><div class="line">        </div><div class="line">        //2.辅助视图</div><div class="line">        cell.accessoryType = UITableViewCellAccessoryCheckmark;</div><div class="line">        </div><div class="line">        //3.自定义辅助视图</div><div class="line">        UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 30, 30)];</div><div class="line">        view.backgroundColor = [UIColor redColor];</div><div class="line">        cell.accessoryView = view;</div><div class="line">        </div><div class="line">        //4.背景视图</div><div class="line">        UIImageView *imgView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;tableCell_common.png&quot;]];</div><div class="line">        cell.backgroundView = imgView;</div><div class="line">        </div><div class="line">        //当单元格被点击,单元格上的子视图的背景会变为透明</div><div class="line">       </div><div class="line">        </div><div class="line">        NSLog(@&quot;%ld&quot;,index); //index是几,就说明创建了几个单元格</div><div class="line">        </div><div class="line">        //在单元格上添加按钮(创建单元格的同时创建子视图)</div><div class="line">        UIButton *btn = [UIButton buttonWithType:UIButtonTypeContactAdd];</div><div class="line">        btn.frame = CGRectMake(50, 0, 60, 30);</div><div class="line">        [cell addSubview:btn];</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;,cell.subviews);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //填充数据(更新数据)</div><div class="line">    cell.textLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,indexPath.row];</div><div class="line">    /* 不要在此处添加子视图,此方法会调用多次,会有性能问题</div><div class="line">    </div><div class="line">    //以字符作为打断方式</div><div class="line">    cell.lineBreakMode = NSLineBreakByCharWrapping;</div><div class="line">    </div><div class="line">    //设置自动换行</div><div class="line">    cell.textLabel.numberOfLines = 0;</div><div class="line">    </div><div class="line">    //在单元格上添加按钮</div><div class="line">    UIButton *btn = [UIButton buttonWithType:UIButtonTypeContactAdd];</div><div class="line">    btn.frame = CGRectMake(50, 0, 60, 30);</div><div class="line">    [cell addSubview:btn];</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;,cell.subviews);</div><div class="line">    */</div><div class="line">    return cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>系统内置的单元格</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    static NSString *identy = @&quot;cell&quot;;</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identy];</div><div class="line">    </div><div class="line">    if (cell == nil) &#123;</div><div class="line">        </div><div class="line">        //系统内置单元格的类型 ,系统提供的单元格上的子视图,无法定制,很少使用</div><div class="line">        //1. UITableViewCellStyleDefault</div><div class="line">        //2. UITableViewCellStyleValue1</div><div class="line">        //3. UITableViewCellStyleValue2</div><div class="line">        //4. UITableViewCellStyleSubtitle</div><div class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue2 reuseIdentifier:identy];</div><div class="line">        </div><div class="line">        //设置标题</div><div class="line">        cell.textLabel.text = @&quot;标题&quot;;</div><div class="line">        //设置图片</div><div class="line">        cell.imageView.image = [UIImage imageNamed:@&quot;1.png&quot;];</div><div class="line">        </div><div class="line">        cell.detailTextLabel.text = @&quot;子标题&quot;;</div><div class="line">        </div><div class="line">        //无法更改frame</div><div class="line">//        cell.imageView.frame = CGRectMake(50, 0, 50, 50);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//单元格高度</div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    return 80;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义一个cell</p>
<p>一种方法就是在代理方法中创建控件，然后添加到cell.contentView</p>
<p>另一种方法就是自己写一个UITableViewCell的子类</p>
<ul>
<li><p>纯代码创建</p>
<p> MyCell.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier&#123;</div><div class="line"></div><div class="line">    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];</div><div class="line">    </div><div class="line">    if (self) &#123;</div><div class="line">        </div><div class="line">        //创建子视图</div><div class="line">        //图片视图</div><div class="line">        UIImageView *imageView =[[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;p1997952346.jpg&quot;]];</div><div class="line">        imageView.frame = CGRectMake(10, 10, 80, 100);</div><div class="line">        </div><div class="line">        [self.contentView addSubview:imageView];</div><div class="line">        </div><div class="line">        //标题label</div><div class="line">        UILabel *titlelable = [[UILabel alloc] initWithFrame:CGRectMake(CGRectGetMaxX(imageView.frame) + 10, 10, 80, 30)];</div><div class="line">        titlelable.tag = 1;</div><div class="line">        </div><div class="line">        //在此处填充数据会有问题,一般不会在此处添加数据</div><div class="line">        titlelable.text = @&quot;卑鄙的我&quot;;</div><div class="line">        titlelable.font = [UIFont boldSystemFontOfSize:18];</div><div class="line">        titlelable.textColor = [UIColor orangeColor];</div><div class="line">        [self.contentView addSubview:titlelable];</div><div class="line">        </div><div class="line">        //评分label</div><div class="line">        UILabel *ratingLable = [[UILabel alloc] initWithFrame:CGRectMake(titlelable.frame.origin.x + 5, CGRectGetMaxY(titlelable.frame), 80, 30)];</div><div class="line">        ratingLable.text = @&quot;9.1&quot;;</div><div class="line">        ratingLable.font = [UIFont systemFontOfSize:13];</div><div class="line">        ratingLable.textColor = [UIColor purpleColor];</div><div class="line">        [self.contentView addSubview:ratingLable];</div><div class="line">        </div><div class="line">        //年份label</div><div class="line">        UILabel *yearLable = [[UILabel alloc] initWithFrame:CGRectMake(CGRectGetMaxX(imageView.frame) + 10, CGRectGetMaxY(ratingLable.frame), 80, 30)];</div><div class="line">        yearLable.textColor = [UIColor whiteColor];</div><div class="line">        yearLable.text = @&quot;年份:2013&quot;;</div><div class="line">        yearLable.font = [UIFont boldSystemFontOfSize:14];</div><div class="line">        [self.contentView addSubview:yearLable];</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> </div><div class="line">    1.填充数据</div><div class="line">    2.布局子视图</div><div class="line"> </div><div class="line"> </div><div class="line"> layoutSubviews :调用的时机   </div><div class="line"> 1.如果视图上被添加了子视图,那么此视图的layoutSubviews方法会被调用</div><div class="line"> </div><div class="line"> 2.如果视图的frame发生了变化,那么次视图的layoutSubviews会被调用</div><div class="line"> */</div><div class="line"></div><div class="line">- (void)layoutSubviews&#123;</div><div class="line">    </div><div class="line">    [super layoutSubviews];</div><div class="line">   //填充数据</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>xib创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">    static NSString *identy = @&quot;cell&quot;;</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identy];</div><div class="line">    </div><div class="line">    if (cell == nil) &#123;</div><div class="line">        </div><div class="line">        //加载xib</div><div class="line">       NSArray *array = [[NSBundle mainBundle] loadNibNamed:@&quot;MyCell&quot; owner:nil options:nil];</div><div class="line">        </div><div class="line">        cell = [array lastObject];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    return cell;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line"></div><div class="line">    return 100;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>表视图的编辑模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">#pragma mark UITableViewDeleagte</div><div class="line"></div><div class="line">//实现此协议方法,左划会出现删除按钮</div><div class="line">//当删除或插入按钮被点击时会调用此方法</div><div class="line">- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    //如果插入按钮被点击</div><div class="line">    if (editingStyle == UITableViewCellEditingStyleInsert) &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;插入一个单元格&quot;);</div><div class="line">        [tableView beginUpdates];</div><div class="line">        //1. 添加数据</div><div class="line">        [array insertObject:@&quot;测试&quot; atIndex:indexPath.row];</div><div class="line">//        [tableView reloadData];</div><div class="line">        //2 .插入一个单元格</div><div class="line">        [tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationRight];</div><div class="line">        [tableView endUpdates];</div><div class="line">       </div><div class="line">        //如果删除按钮被点击</div><div class="line">    &#125;else if (editingStyle == UITableViewCellEditingStyleDelete)&#123;</div><div class="line">    </div><div class="line">    [tableView beginUpdates];</div><div class="line">    //1. 删除一个单元格</div><div class="line">    [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationRight];</div><div class="line">    //2. 删除数组中的数据</div><div class="line">    [array removeObjectAtIndex:indexPath.row];</div><div class="line">    [tableView endUpdates];</div><div class="line">    //刷新表视图</div><div class="line">//   [tableView reloadData];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//控制表视图进入到编辑模式后,显示的样式,如果不实现此方法,所有的单元格均显示删除按钮</div><div class="line">- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    if (indexPath.row == 0) &#123;</div><div class="line">        </div><div class="line">        //第一个单元格显示插入按钮</div><div class="line">        return UITableViewCellEditingStyleInsert;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    //其它的单元格显示删除</div><div class="line">    return UITableViewCellEditingStyleDelete;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//实现此方法后,当表视图进入到编辑模式,单元格的右侧会出现移动按钮</div><div class="line">- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath&#123;</div><div class="line"></div><div class="line">    //更新数据</div><div class="line">    [array exchangeObjectAtIndex:sourceIndexPath.row withObjectAtIndex:destinationIndexPath.row];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)editAction:(id)sender &#123;</div><div class="line">    </div><div class="line">    //进入到编辑模式</div><div class="line">//    [_tableView setEditing:YES];</div><div class="line">    //单元格是否可以多选,开启多选后,删除与添加按钮会消失</div><div class="line">//    _tableView.allowsMultipleSelectionDuringEditing = YES;</div><div class="line">    [_tableView setEditing:YES animated:YES];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)doneAction:(id)sender &#123;</div><div class="line">    </div><div class="line">    //退出编辑模式</div><div class="line">    [_tableView setEditing:NO animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UITableViewCell </tag>
            
            <tag> 自定义cell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[表视图UITableView的基本使用]]></title>
      <url>http://yoursite.com/2017/01/11/%E8%A1%A8%E8%A7%86%E5%9B%BEUITableView%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul>
<li>UITableView的基本创建</li>
</ul>
<p>其中最重要的就是实现它的两个必须实现的代理方法：UITableViewDataSource协议</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">[super viewDidLoad];</div><div class="line"></div><div class="line">//创建表视图</div><div class="line">UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, 320, 568) style:UITableViewStylePlain];</div><div class="line"></div><div class="line">//设置代理(数据源)</div><div class="line">tableView.dataSource = self;</div><div class="line"></div><div class="line">[self.view addSubview:tableView];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark UITableViewDatasource</div><div class="line">//返回单元格的个数的协议方法</div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line"></div><div class="line">return 20;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建单元格的协议方法</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">//    indexPath.section 组的索引</div><div class="line">//    indexPath.row  行的索引 0 , 1 ,2,4 .......9999</div><div class="line"></div><div class="line">UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];</div><div class="line"></div><div class="line">//设置单元格上显示的文本</div><div class="line">cell.textLabel.text = [NSString stringWithFormat:@&quot;section: %ld  row :%ld&quot;,indexPath.section,indexPath.row];</div><div class="line"></div><div class="line">return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    //单元格高度自适应</div><div class="line">    </div><div class="line">    </div><div class="line">    NSString *text = _info[indexPath.row];</div><div class="line">    </div><div class="line">    //根据文本内容计算高度,使用属性文本计算高度</div><div class="line">    </div><div class="line">    //iOS7之后使用boundingRectWithSize计算文本所占的矩形</div><div class="line">    /*</div><div class="line">     参数：</div><div class="line">     CGSizeMake(320, 0)：指定文本的宽度，自动计算出高度</div><div class="line">     options:绘制文本需要的参数</div><div class="line">     attributes:文字的属性（字体大小）</div><div class="line">     context:上下文，这里不需要</div><div class="line">     </div><div class="line">     */</div><div class="line">    CGRect frame = [text boundingRectWithSize:CGSizeMake(320, 0)</div><div class="line">                                     options:NSStringDrawingUsesLineFragmentOrigin</div><div class="line">                                  attributes:@&#123;NSFontAttributeName:[UIFont systemFontOfSize:16]&#125;</div><div class="line">                                     context:nil];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    NSLog(@&quot;size = %f&quot;,frame.size.height);</div><div class="line">    </div><div class="line">    return frame.size.height + 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//cell的点击方法</div><div class="line">-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];//设置点击的风格</div><div class="line">//    NSLog(@&quot;选中的单元格的索引section = %ld,row = %ld&quot;,indexPath.section,indexPath.row);</div><div class="line">    </div><div class="line">    //获取点击的单元格对象</div><div class="line">    UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];</div><div class="line">    NSLog(@&quot;%@&quot;,cell.textLabel.text);</div><div class="line">    </div><div class="line">    [tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionMiddle animated:YES];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>UITableView的风格样式</li>
</ul>
<p>UITableViewStylePlain和UITableViewStyleGrouped。这两者操作起来其实并没有本质区别，只是后者按分组样式显示前者按照普通样式显示而已。</p>
<p>​     UITableViewStyleGrouped:分组风格</p>
<pre><code>UITableViewStylePlain:平铺风格
</code></pre><p>上面介绍的UITableViewStylePlain，下面我们使用UITableViewStyleGrouped来试一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">[super viewDidLoad];</div><div class="line">// Do any additional setup after loading the view.</div><div class="line"></div><div class="line">UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 20, 320, 548) style:UITableViewStyleGrouped];</div><div class="line"></div><div class="line">[self.view addSubview:tableView];</div><div class="line"></div><div class="line">//设置数据源</div><div class="line">tableView.dataSource = self;</div><div class="line">//设置代理</div><div class="line">tableView.delegate = self;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//读取plist文件</div><div class="line">NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;font&quot; ofType:@&quot;plist&quot;];</div><div class="line"></div><div class="line">array = [NSArray arrayWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">[</div><div class="line"></div><div class="line">[font1, font2 ,fon3 .....]; //显示在第一组</div><div class="line">[font1, .....];             // 第二组上面</div><div class="line">[fon1..........];........</div><div class="line"></div><div class="line"></div><div class="line">]</div><div class="line">*/</div><div class="line">#pragma mark UITableViewDataSource</div><div class="line">//返回组的个数,默认为1组</div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line"></div><div class="line">return array.count; // 13组</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//此方法会调用13次,因为分了13组</div><div class="line">//返回每组中单元格的个数   section:每一组的索引</div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; // 0,1,......12</div><div class="line"></div><div class="line">NSArray *fontNames = [array objectAtIndex:section];</div><div class="line"></div><div class="line">return fontNames.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建单元格</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">// indexPath : section属性表示组 row属性表示行 整体表示单元格的位置</div><div class="line">// 第一组的单元格  s:0 r:0   0,1   0,2</div><div class="line">// 第二组的单元格  s:1 r:0   1,1   1,2........</div><div class="line"></div><div class="line">UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];</div><div class="line"></div><div class="line">//取得组的索引</div><div class="line">NSInteger section = indexPath.section;</div><div class="line">//取得小数组</div><div class="line">NSArray *fontNames = [array objectAtIndex:section];</div><div class="line"></div><div class="line">//取得组中行的索引</div><div class="line">NSInteger row = indexPath.row;</div><div class="line">//取得小数组中的字符串</div><div class="line">NSString *fontName = [fontNames objectAtIndex:row];</div><div class="line">//设置文本</div><div class="line">cell.textLabel.text = fontName;</div><div class="line"></div><div class="line">return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//设置组的头视图的标题</div><div class="line">- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section &#123;</div><div class="line"></div><div class="line">NSString *title = [NSString stringWithFormat:@&quot;第%ld组&quot;,section];</div><div class="line"></div><div class="line">return title;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fbmgkzlju7j20940gkdgc.jpg" alt=""></p>
<ul>
<li>自定义头部视图</li>
</ul>
<p>直接像上面设置头视图的文字，这种代理方法局限性很大，无法设置,字的颜色,字的大小。</p>
<p>下面我们用另一个代理方法自定义头部视图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//返回组的头部视图的协议方法</div><div class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section &#123;</div><div class="line"></div><div class="line">//高度无法控制,需要用协议方法控制</div><div class="line">UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, 0)];</div><div class="line">view.backgroundColor = [UIColor redColor];</div><div class="line"></div><div class="line">UILabel *lable = [[UILabel alloc] initWithFrame:CGRectMake(60, 10, 200, 30)];</div><div class="line">lable.backgroundColor = [UIColor greenColor];</div><div class="line">lable.text = [NSString stringWithFormat:@&quot;第%ld组&quot;,section];</div><div class="line"></div><div class="line">[view addSubview:lable];</div><div class="line"></div><div class="line">return view;</div><div class="line">&#125;</div><div class="line">//返回组的头视图的高度</div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;</div><div class="line">return 100;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>UITableView的常用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"> //自定义表视图的头视图</div><div class="line">    UIImageView *headerView = [[UIImageView alloc ] initWithFrame:CGRectMake(0, 0, 0, 100)];</div><div class="line">    </div><div class="line">    headerView.image = [UIImage imageNamed:@&quot;scene1.jpg&quot;];</div><div class="line">    </div><div class="line">    //给表视图的头视图属性 赋值</div><div class="line">    table.tableHeaderView = headerView;</div><div class="line">    </div><div class="line">    //常用属性</div><div class="line">    //单元格分割线的颜色</div><div class="line">    table.separatorColor = [UIColor redColor];</div><div class="line">    </div><div class="line">//    table.separatorStyle = UITableViewCellSeparatorStyleNone;</div><div class="line">    </div><div class="line">    //单元格的高度:统一修改所有单元格的高度，一般不建议使用</div><div class="line">    //使用相应的代理来设置高度</div><div class="line">//    table.rowHeight = 100;</div><div class="line">    //设置组的头视图高度</div><div class="line">//    table.sectionHeaderHeight = 100;</div><div class="line">//    table.sectionFooterHeight = 100;</div><div class="line">//    </div><div class="line">    </div><div class="line">    //设置背景视图</div><div class="line">    </div><div class="line">    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];</div><div class="line">    view.backgroundColor = [UIColor redColor];</div><div class="line">    table.backgroundView = view;</div><div class="line">    </div><div class="line">    </div><div class="line">    //自定义表视图的尾视图</div><div class="line">    UIImageView *footerView = [[UIImageView alloc ] initWithFrame:CGRectMake(0, 0, 0, 100)];</div><div class="line">    </div><div class="line">    footerView.image = [UIImage imageNamed:@&quot;scene1.jpg&quot;];</div><div class="line">    </div><div class="line">    //给表视图的头视图属性 赋值</div><div class="line">    table.tableFooterView = footerView;</div><div class="line">    </div><div class="line">    [self.view addSubview:table];</div><div class="line">    </div><div class="line">    //返回一个单元格实例</div><div class="line">    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:1 inSection:8];</div><div class="line">    UITableViewCell *cell =[table cellForRowAtIndexPath:indexPath];</div><div class="line">    </div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        //reloadData：刷新整个表视图的数据</div><div class="line">        [table reloadData];</div><div class="line">        </div><div class="line">        //滑动到指定的单元格</div><div class="line">        [table scrollToRowAtIndexPath:indexPath</div><div class="line">                     atScrollPosition:UITableViewScrollPositionMiddle</div><div class="line">                             animated:YES];</div><div class="line">    </div><div class="line">        </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>下面我们做个小案例：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">[super viewDidLoad];</div><div class="line"></div><div class="line">UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 20, 320, 548) style:UITableViewStyleGrouped];</div><div class="line"></div><div class="line">//数据源</div><div class="line">tableView.dataSource = self;</div><div class="line">[self.view addSubview:tableView];</div><div class="line"></div><div class="line">//读取省份的plist文件</div><div class="line">NSString *provinPath = [[NSBundle mainBundle] pathForResource:@&quot;provinces.plist&quot; ofType:nil];</div><div class="line">procinces = [NSArray arrayWithContentsOfFile:provinPath];</div><div class="line"></div><div class="line">//读取城市列表文件</div><div class="line">NSString *cityPath = [[NSBundle mainBundle] pathForResource:@&quot;cities.plist&quot; ofType:nil];</div><div class="line">cityDic = [NSDictionary dictionaryWithContentsOfFile:cityPath];</div><div class="line"></div><div class="line"></div><div class="line">//设置索引的颜色</div><div class="line">tableView.sectionIndexBackgroundColor = [UIColor redColor];</div><div class="line">tableView.sectionIndexColor = [UIColor orangeColor];</div><div class="line">tableView.sectionIndexTrackingBackgroundColor = [UIColor greenColor];</div><div class="line">//    tableView</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">&#123;</div><div class="line">安徽:   [ ......]</div><div class="line">湖南:   [长沙, 娄底 ........]</div><div class="line">广东:   [];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">//组的个数</div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line"></div><div class="line">return procinces.count;</div><div class="line"></div><div class="line">&#125;            // Default is 1 if not implemented</div><div class="line"></div><div class="line">//每一组中的单元格个数</div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line"></div><div class="line">//取得省份的名字</div><div class="line">NSString *procinceName = [procinces objectAtIndex:section];</div><div class="line"></div><div class="line">//取出城市数组</div><div class="line">NSArray *cites = [cityDic objectForKey:procinceName];</div><div class="line"></div><div class="line"></div><div class="line">return cites.count;</div><div class="line"></div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];</div><div class="line"></div><div class="line">//组的索引</div><div class="line">NSInteger section = indexPath.section;</div><div class="line"></div><div class="line">//行的索引</div><div class="line">NSInteger row = indexPath.row;</div><div class="line"></div><div class="line">//省份的名字</div><div class="line">NSString *provinceName = [procinces objectAtIndex:section];</div><div class="line">//取出城市数组</div><div class="line">NSArray *cites = [cityDic objectForKey:provinceName];</div><div class="line"></div><div class="line">NSString *cityName = [cites objectAtIndex:row];</div><div class="line"></div><div class="line"></div><div class="line">cell.textLabel.text = cityName;</div><div class="line"></div><div class="line">return cell;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//组的头视图上的标题,此方法有多少组就会调用多少次</div><div class="line">- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section &#123;</div><div class="line"></div><div class="line">NSString *str =  procinces[section];</div><div class="line"></div><div class="line">return str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//返回索引</div><div class="line">- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView&#123;</div><div class="line"></div><div class="line">//    return @[@&quot;A&quot;,@&quot;B&quot;,@&quot;C&quot;];</div><div class="line">return procinces;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面案例的数据格式如下：</p>
<p>provinces.plist</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fbmira2tatj20bc0bcq4n.jpg" alt=""></p>
<p>cities.plist</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fbmis2ffghj20di0dxwgr.jpg" alt=""></p>
<p>效果图如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1fbmit0awsdj208s0fr756.jpg" alt=""></p>
<ul>
<li>UITableView的常用属性和方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//____________tabelView常用属性______________</div><div class="line"></div><div class="line">UIView *headerView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, 200)];</div><div class="line">headerView.backgroundColor = [UIColor redColor];</div><div class="line">//设置tableView的头视图</div><div class="line">_tableView.tableHeaderView = headerView;</div><div class="line"></div><div class="line">UIView *footView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 0, 100)];</div><div class="line">footView.backgroundColor = [UIColor greenColor];</div><div class="line">//设置tableView的尾部视图</div><div class="line">_tableView.tableFooterView = footView;</div><div class="line"></div><div class="line">//分割线颜色,默认是灰色</div><div class="line">_tableView.separatorColor = [UIColor blueColor];</div><div class="line"></div><div class="line">//分割线的样式  UITableViewCellSeparatorStyleNone取消分割线</div><div class="line">//    _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</div><div class="line"></div><div class="line">//设置行高 所有的单元格高度都是100,通过协议方法也可以设置</div><div class="line">_tableView.rowHeight = 100;</div><div class="line"></div><div class="line">//设置数据源</div><div class="line">_tableView.dataSource = self;</div><div class="line"></div><div class="line">//设置代理</div><div class="line">_tableView.delegate = self;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#pragma mark UITableViewDelegate</div><div class="line">//返回单元格的行高,此方法会调用多次,为每一个单元格确定行高</div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">if (indexPath.row == 0) &#123; //第一个单元格</div><div class="line"></div><div class="line">return 100;</div><div class="line"></div><div class="line">&#125;else&#123;</div><div class="line"></div><div class="line">return 50;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//_________________表视图常用方法______________</div><div class="line"></div><div class="line">/*</div><div class="line">//删除第一个元素</div><div class="line">[fonts removeObjectAtIndex:0];</div><div class="line"></div><div class="line">//1. 刷新表视图,让显示的内容与数据同步</div><div class="line">[_tableView reloadData];</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">//2. 滚动到指定的单元格</div><div class="line">// UITableViewScrollPositionTop 顶部</div><div class="line">// UITableViewScrollPositionMiddle 中间</div><div class="line">//UITableViewScrollPositionBottom 底部</div><div class="line"></div><div class="line">/*</div><div class="line">NSIndexPath *indexPath = [NSIndexPath indexPathForRow:10 inSection:0];</div><div class="line">[_tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];</div><div class="line">*/</div><div class="line"></div><div class="line">//3. 通过indexPath获取到对应的单元格</div><div class="line">NSIndexPath *indexPath = [NSIndexPath indexPathForRow:10 inSection:0];</div><div class="line">UITableViewCell *cell = [_tableView cellForRowAtIndexPath:indexPath];</div><div class="line"></div><div class="line">//4. 获取到当前显示的单元格</div><div class="line">NSArray *cells = [_tableView visibleCells];</div></pre></td></tr></table></figure>
<ul>
<li>到现在，我们继续做个小案例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">[super viewDidLoad];</div><div class="line">_tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 20, 320, 548) style:UITableViewStylePlain];</div><div class="line"></div><div class="line">_tableView.dataSource = self;</div><div class="line">_tableView.delegate = self;</div><div class="line">[self.view addSubview:_tableView];</div><div class="line"></div><div class="line">//读取plist文件</div><div class="line">NSString *filePath = [[NSBundle mainBundle] pathForResource:@&quot;friends.plist&quot; ofType:nil];</div><div class="line">array = [NSArray arrayWithContentsOfFile:filePath];</div><div class="line"></div><div class="line">&#125;</div><div class="line">/*</div><div class="line">[</div><div class="line">&#123;</div><div class="line">groupe  :   @&quot;我的好友&quot;</div><div class="line">friends  :  [好友1,好友1,好友1,好友1,好友1,];</div><div class="line">&#125;,</div><div class="line"></div><div class="line">&#123;</div><div class="line">groupe  :   @&quot;大学同学&quot;</div><div class="line">friends  :  [好友1,好友1,好友1,好友1,好友1,];</div><div class="line">&#125;,</div><div class="line"></div><div class="line">]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">//租的数量</div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line"></div><div class="line">return array.count;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//返回每一组中单元格的个数</div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">NSDictionary *dic = array[section];</div><div class="line">//取出好友数组</div><div class="line">NSArray *friends = dic[@&quot;friends&quot;];</div><div class="line"></div><div class="line">BOOL f = flag[section]; //NO :展开</div><div class="line"></div><div class="line">if (f) &#123; //收起</div><div class="line"></div><div class="line">return 0;</div><div class="line"></div><div class="line">&#125;else &#123; //展开</div><div class="line"></div><div class="line">return friends.count;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];</div><div class="line"></div><div class="line">NSDictionary *dic = array[indexPath.section];</div><div class="line">//取出好友数组</div><div class="line">NSArray *friends = dic[@&quot;friends&quot;];</div><div class="line"></div><div class="line">//取出好友姓名</div><div class="line">NSString *name = friends[indexPath.row];</div><div class="line"></div><div class="line">cell.textLabel.text = name;</div><div class="line"></div><div class="line">return cell;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//组的头视图上的标题</div><div class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section&#123;</div><div class="line"></div><div class="line">UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">[btn setBackgroundImage:[UIImage imageNamed:@&quot;tableCell_common.png&quot;] forState:UIControlStateNormal];</div><div class="line">[btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class="line"></div><div class="line">btn.tag = section;</div><div class="line">//添加点击事件</div><div class="line">[btn addTarget:self action:@selector(clickAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">//取出好友字典</div><div class="line">NSDictionary *dic = array[section];</div><div class="line">//取出分组标题</div><div class="line">NSString *title = dic[@&quot;group&quot;];</div><div class="line"></div><div class="line">[btn setTitle:title forState:UIControlStateNormal];</div><div class="line"></div><div class="line">return btn;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//设置租的头视图的高度</div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;</div><div class="line"></div><div class="line">return 43;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)clickAction:(UIButton *)btn&#123;</div><div class="line"></div><div class="line">NSInteger section = btn.tag; // 0</div><div class="line"></div><div class="line">//改变数组中元素的状态</div><div class="line">flag[section] = !flag[section];</div><div class="line"></div><div class="line">//刷新表视图</div><div class="line">//    [_tableView reloadData];</div><div class="line"></div><div class="line">//刷新多个组</div><div class="line">//用此种方式创建的set对象只能表示一组</div><div class="line">NSIndexSet *set = [NSIndexSet indexSetWithIndex:section];</div><div class="line"></div><div class="line">//创建的set对象表示多个组</div><div class="line">//    [NSIndexSet indexSetWithIndexesInRange:&lt;#(NSRange)#&gt;];</div><div class="line"></div><div class="line">//刷新多个单元格</div><div class="line">//    [_tableView reloadRowsAtIndexPaths:&lt;#(NSArray *)#&gt; withRowAnimation:&lt;#(UITableViewRowAnimation)#&gt;];</div><div class="line">[_tableView reloadSections:set withRowAnimation:UITableViewRowAnimationFade];</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据格式如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fbmj62btkwj20bt0anmz0.jpg" alt=""></p>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fbmj7qrrp1j208u0cjjrw.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1fbmj82suokj208r0foaaj.jpg" alt=""></p>
<ul>
<li><p>最后补充一下表视图的编辑模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    BOOL _isEdit;</div><div class="line">    UITableView *_tableView;</div><div class="line">    </div><div class="line">    NSMutableArray *_data;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    _data = [NSMutableArray arrayWithArray:@[@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长2&quot;,@&quot;班长1&quot;,@&quot;班长10&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长11&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,@&quot;班长1&quot;,]];</div><div class="line">    </div><div class="line">    _tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];</div><div class="line">    </div><div class="line">    _tableView.delegate = self;</div><div class="line">    _tableView.dataSource = self;</div><div class="line">    </div><div class="line">    [self.view addSubview:_tableView];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">    </div><div class="line">    return _data.count;</div><div class="line">&#125;</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    static NSString * identifer = @&quot;cell&quot;;</div><div class="line">    </div><div class="line">    UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:identifer];</div><div class="line">    </div><div class="line">    if (cell == nil) &#123;</div><div class="line">        </div><div class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifer];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    cell.textLabel.text = _data[indexPath.row];</div><div class="line">    </div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)edit:(UIBarButtonItem *)sender &#123;</div><div class="line">    </div><div class="line">    //让表视图进入编辑模式</div><div class="line">    _isEdit = !_isEdit;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    _tableView.allowsMultipleSelectionDuringEditing = YES;</div><div class="line">    </div><div class="line">    </div><div class="line">    [_tableView setEditing:_isEdit animated:YES];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)multip:(UIBarButtonItem *)sender &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    // 获取选择的cell 的 indexPath</div><div class="line">    NSArray *indexPaths =  [_tableView indexPathsForSelectedRows];</div><div class="line">    </div><div class="line">    </div><div class="line">    NSMutableIndexSet *fontSet = [[NSMutableIndexSet alloc] init];</div><div class="line">    for (int i = 0; i &lt; indexPaths.count; i++) &#123;</div><div class="line">        </div><div class="line">        NSIndexPath *indexPath = indexPaths[i];</div><div class="line">        [fontSet addIndex:indexPath.row];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    // 删除数组中位置所对应集合的数据</div><div class="line">    [_data removeObjectsAtIndexes:fontSet];</div><div class="line">    </div><div class="line">    </div><div class="line">    [_tableView deleteRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        </div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">-(UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    </div><div class="line">    //返回每一个单元格的编辑模式</div><div class="line">    </div><div class="line">    if (indexPath.row == 2) &#123;</div><div class="line">        return UITableViewCellEditingStyleInsert;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return UITableViewCellEditingStyleDelete;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//删除或者添加单元格</div><div class="line">-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    if (editingStyle == UITableViewCellEditingStyleDelete) &#123;</div><div class="line">        //删除</div><div class="line">        </div><div class="line">        //1.删除数据</div><div class="line">        [_data removeObjectAtIndex:indexPath.row];</div><div class="line">        </div><div class="line">        //2.删除单元格</div><div class="line">        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationRight];</div><div class="line">        </div><div class="line">    &#125;else if (editingStyle == UITableViewCellEditingStyleInsert)</div><div class="line">    &#123;</div><div class="line">        //添加</div><div class="line">        </div><div class="line">        //1.添加数据</div><div class="line">        [_data insertObject:@&quot;我是新来的&quot; atIndex:indexPath.row + 1];</div><div class="line"></div><div class="line">        //2.添加单元格</div><div class="line">        NSIndexPath *indexPathNew = [NSIndexPath indexPathForRow:indexPath.row + 1 inSection:indexPath.section];</div><div class="line">        </div><div class="line">        </div><div class="line">        [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:indexPathNew] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath&#123;</div><div class="line">    </div><div class="line">    //交换数据</div><div class="line">    [_data exchangeObjectAtIndex:sourceIndexPath.row withObjectAtIndex:destinationIndexPath.row];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UITableView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[滑动视图UISrollView]]></title>
      <url>http://yoursite.com/2017/01/10/%E6%BB%91%E5%8A%A8%E8%A7%86%E5%9B%BEUISrollView/</url>
      <content type="html"><![CDATA[<ul>
<li><p>UIScrollView的基本创建和属性的用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    //创建滑动视图</div><div class="line">    scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, 320, 300)];</div><div class="line">    scrollView.backgroundColor = [UIColor grayColor];</div><div class="line">    [self.view addSubview:scrollView];</div><div class="line"></div><div class="line">    //1. 设置内容尺寸,只有内容尺寸大于了视图尺寸才能滑动</div><div class="line">    scrollView.contentSize = CGSizeMake(320 * 3, 600);</div><div class="line"></div><div class="line">    //创建子视图</div><div class="line">    UILabel* label1 = [[UILabel alloc] initWithFrame:CGRectMake(60, 60, 200, 50)];</div><div class="line">    label1.text = @&quot;1&quot;;</div><div class="line">    label1.backgroundColor = [UIColor redColor];</div><div class="line">    [scrollView addSubview:label1];</div><div class="line"></div><div class="line">    UILabel* label2 = [[UILabel alloc] initWithFrame:CGRectMake(320 + 60, 60, 200, 50)];</div><div class="line">    label2.text = @&quot;2&quot;;</div><div class="line">    label2.backgroundColor = [UIColor redColor];</div><div class="line">    [scrollView addSubview:label2];</div><div class="line"></div><div class="line">    UILabel* label3 = [[UILabel alloc] initWithFrame:CGRectMake(320 * 2 + 60, 60, 200, 50)];</div><div class="line">    label3.text = @&quot;3&quot;;</div><div class="line">    label3.backgroundColor = [UIColor redColor];</div><div class="line">    [scrollView addSubview:label3];</div><div class="line"></div><div class="line">    //2.分页效果,开启分页效果,一页的宽度为scrollView的宽度</div><div class="line">//    scrollView.pagingEnabled = YES;</div><div class="line">    </div><div class="line">    //3.隐藏水平滚动条   showsVerticalScrollIndicator:垂直  showsHorizontalScrollIndicator : 水平</div><div class="line">//     scrollView.showsHorizontalScrollIndicator = NO;</div><div class="line">    </div><div class="line">    //4. 滑动到视图的末尾时,是否有反弹效果</div><div class="line">//    scrollView.bounces = NO;</div><div class="line">    </div><div class="line">    //5. 是否开启滑动</div><div class="line">//    scrollView.scrollEnabled = NO;</div><div class="line">    </div><div class="line">    //6.上下滑动时,点击状态栏是否可以返回</div><div class="line">//    scrollView.scrollsToTop = NO;</div><div class="line"></div><div class="line">    //7.内容偏移</div><div class="line">    [self performSelector:@selector(action) withObject:nil afterDelay:2];</div><div class="line">    </div><div class="line">    //8.减速时的速度</div><div class="line">    scrollView.decelerationRate = 0;</div><div class="line">    </div><div class="line">    //9.滑动时是否锁定为一个方向</div><div class="line">    scrollView.directionalLockEnabled = YES;</div><div class="line">    </div><div class="line">    //10.滚动条的样式 (默认为灰色,黑色,白色)</div><div class="line">    scrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)action&#123;</div><div class="line"></div><div class="line">    //设置内容的偏移</div><div class="line">    scrollView.contentOffset = CGPointMake(-200, 0);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>UIScrollViewDelegate</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">#pragma mark UIScrollViewDelegate</div><div class="line"></div><div class="line">//滑动时调用,实时调用</div><div class="line">//- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</div><div class="line">//</div><div class="line">//</div><div class="line">////    NSLog(@&quot;x轴偏移的距离 %lf&quot;,scrollView.contentOffset.x);</div><div class="line">////    NSLog(@&quot;y轴偏移的距离 %lf&quot;,scrollView.contentOffset.y);</div><div class="line">//</div><div class="line">//</div><div class="line">//    CGFloat offsetX = scrollView.contentOffset.x;</div><div class="line">//    //第几页</div><div class="line">//    NSInteger index =  offsetX / 320;</div><div class="line">//    NSLog(@&quot;%ld&quot;,index);</div><div class="line">//</div><div class="line">//</div><div class="line">//&#125;</div><div class="line"></div><div class="line">//手指将要开始拖动</div><div class="line">- (void)scrollViewWillBeginDragging:(UIScrollView*)scrollView</div><div class="line">&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;手指将要开始拖动&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//手指已经离开滑动视图</div><div class="line">- (void)scrollViewDidEndDragging:(UIScrollView*)scrollView willDecelerate:(BOOL)decelerate</div><div class="line">&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;手指结束拖动,离开屏幕&quot;);</div><div class="line"></div><div class="line">    //decelerate:手指离开屏幕时,是否为减速状态</div><div class="line">    if (decelerate) &#123;</div><div class="line"></div><div class="line">        NSLog(@&quot;视图为减速状态&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line"></div><div class="line">        NSLog(@&quot;视图为静止状态&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//视图将要开始减速</div><div class="line">- (void)scrollViewWillBeginDecelerating:(UIScrollView*)scrollView</div><div class="line">&#123;</div><div class="line"></div><div class="line">    NSLog(@&quot;视图将要开始减速&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//视图结束减速,视图滑动停止</div><div class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView*)scrollView</div><div class="line">&#123;</div><div class="line">    //一般在此处判断页数</div><div class="line">    NSLog(@&quot;视图结束减速,滑动停止&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//手指将要离开屏幕时调用</div><div class="line">- (void)scrollViewWillEndDragging:(UIScrollView*)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)targetContentOffset NS_AVAILABLE_IOS(5_0)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    //velocity 手指离开视图时,滑动视图的速度</div><div class="line">    //targetContentOffset 滑动最终会滑倒哪个位置</div><div class="line"></div><div class="line">    //</div><div class="line">    //    CGFloat x =  targetContentOffset -&gt; x;</div><div class="line">    //    NSLog(@&quot;x轴最终停止的位置为%f&quot;,x);</div><div class="line"></div><div class="line">    targetContentOffset-&gt;x = 320;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>滑动视图的捏合手势</p>
<p>首先先设置代理，然后设置设置放大的倍数</p>
<p><code>scroll.maximumZoomScale = 3;</code></p>
<p>再设置最小的缩放倍数</p>
<p><code>scroll.minimumZoomScale = .5;</code></p>
<p><code>scrollView.zoomBouncing = YES;//缩放反弹效果</code></p>
<p>最后实现代理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#pragma mark UIScrollViewDelegate</div><div class="line">//返回一个需要放大的视图</div><div class="line">- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView &#123;</div><div class="line"></div><div class="line">    </div><div class="line">    UIView *view = [scrollView viewWithTag:10];</div><div class="line">    </div><div class="line">    return view;</div><div class="line"></div><div class="line">&#125;     // return a view that will be scaled. if delegate returns nil, nothing happens</div><div class="line"></div><div class="line">//滑动视图缩放时,会调用此方法,实时调用</div><div class="line">- (void)scrollViewDidZoom:(UIScrollView *)scrollView NS_AVAILABLE_IOS(3_2) &#123;</div><div class="line">    //zoomScale当前的缩放倍数</div><div class="line">    NSLog(@&quot;%f&quot;,scrollView.zoomScale);</div><div class="line"></div><div class="line">&#125; </div><div class="line"></div><div class="line">//缩放时常用一些协议方法</div><div class="line">- (void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(UIView *)view NS_AVAILABLE_IOS(3_2) &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;开始放大&quot;);</div><div class="line">    </div><div class="line">&#125;</div><div class="line">- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(CGFloat)scale &#123;</div><div class="line">    NSLog(@&quot;结束放大&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>双击手势放大</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	UITapGestureRecognizer * tap2 = [[UITapGestureRecognizer alloc] initWithTarget:self 	action:@selector(tap2:)];</div><div class="line">    </div><div class="line">    //设置点击的次数</div><div class="line">    tap2.numberOfTapsRequired = 2;</div><div class="line">    tap2.numberOfTouchesRequired = 1;</div><div class="line">    </div><div class="line">    //scrollView 添加双击手势</div><div class="line">    [scrollView addGestureRecognizer:tap2];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">-(void)tap2:(UITapGestureRecognizer *)ges &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;双击手势&quot;);</div><div class="line">    //手势所在的视图</div><div class="line">    UIScrollView *view = (UIScrollView *)ges.view;</div><div class="line">    [UIView animateWithDuration:.35</div><div class="line">                     animations:^&#123;</div><div class="line">                         //实现scrollView的缩放</div><div class="line">                         if (view.zoomScale == 1) &#123;</div><div class="line">                             //放大</div><div class="line">                             view.zoomScale = 2;</div><div class="line">                         &#125;else&#123;</div><div class="line">                             view.zoomScale = 1;</div><div class="line">                         &#125;</div><div class="line">                     &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>结合UIPageControl的使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    scroll = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, 340, 568)];</div><div class="line">    scroll.backgroundColor = [UIColor grayColor];</div><div class="line">    [self.view addSubview:scroll];</div><div class="line">    </div><div class="line">    NSArray *imageNames = @[@&quot;chenyixun.jpg&quot;,@&quot;joy.jpg&quot;,@&quot;yanzi.jpg&quot;,@&quot;wanglihong.jpg&quot;];</div><div class="line">    for (NSInteger i = 0; i &lt; imageNames.count; i++) &#123;</div><div class="line">        UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(i * 340, 0, 320, 568)];</div><div class="line">        NSString *imageName = imageNames[i];</div><div class="line">        imageView.image = [UIImage imageNamed:imageName];</div><div class="line">        [scroll addSubview:imageView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //设置内容大小</div><div class="line">    scroll.contentSize = CGSizeMake(4 * 340, 568);</div><div class="line">    </div><div class="line">    //设置代理</div><div class="line">    scroll.delegate = self;</div><div class="line">    </div><div class="line">    //开启分页效果</div><div class="line">    scroll.pagingEnabled = YES;</div><div class="line"></div><div class="line">    //分页控件</div><div class="line">    pageContrl = [[UIPageControl alloc] initWithFrame:CGRectMake(60, 568 - 30, 200, 30)];</div><div class="line">//    pageContrl.backgroundColor = [UIColor redColor];</div><div class="line">    [self.view addSubview:pageContrl];</div><div class="line"> </div><div class="line">    //禁用分页控件</div><div class="line">    pageContrl.enabled = NO;</div><div class="line">    pageContrl.numberOfPages = 4;</div><div class="line">    </div><div class="line">    //选中的颜色</div><div class="line">    pageContrl.currentPageIndicatorTintColor = [UIColor redColor];</div><div class="line">    pageContrl.pageIndicatorTintColor = [UIColor grayColor];</div><div class="line">    </div><div class="line">    //绑定事件方法</div><div class="line">    [pageContrl addTarget:self action:@selector(pageAction:) forControlEvents:UIControlEventValueChanged];</div><div class="line">&#125;</div><div class="line">- (void)pageAction:(UIPageControl *)page&#123;</div><div class="line">   NSInteger index = page.currentPage;</div><div class="line">   CGFloat x = index * 340;</div><div class="line">   scroll.contentOffset = CGPointMake(x, 0);</div><div class="line">&#125;</div><div class="line">#pragma mark UIScrollViewDelage</div><div class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView &#123;</div><div class="line">    //计算页数</div><div class="line">    NSInteger index = scrollView.contentOffset.x / 340;</div><div class="line">    pageContrl.currentPage = index;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UIPageControl </tag>
            
            <tag> UIScrollView </tag>
            
            <tag> 捏合手势 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UITabBarController的基本使用]]></title>
      <url>http://yoursite.com/2017/01/10/UITabBarController%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>首先介绍创建一个UITabBarController，并将其设置为根控制器的一般方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//创建标签控制器</div><div class="line">    UITabBarController *tabBarCtrl = [[UITabBarController alloc] init];</div><div class="line">    </div><div class="line">    tabBarCtrl.delegate = self;</div><div class="line">    </div><div class="line">    //创建子控制器</div><div class="line">    UIViewController *ctrl1 = [[UIViewController alloc] init];</div><div class="line">    ctrl1.title = @&quot;首页&quot;;</div><div class="line">    ctrl1.view.backgroundColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    UIViewController *ctrl2 = [[UIViewController alloc] init];</div><div class="line">    ctrl2.title = @&quot;通讯录&quot;;</div><div class="line">    ctrl2.view.backgroundColor = [UIColor greenColor];</div><div class="line">    </div><div class="line">    UIViewController *ctrl3 = [[UIViewController alloc] init];</div><div class="line">    ctrl3.title = @&quot;设置&quot;;</div><div class="line">    ctrl3.view.backgroundColor = [UIColor orangeColor];</div><div class="line">    </div><div class="line">    //设置子控制器(以后无法改变)</div><div class="line">    tabBarCtrl.viewControllers = @[ctrl1,ctrl2,ctrl3];</div><div class="line">    </div><div class="line">    //将标签控制器设为窗口的根控制器</div><div class="line">    self.window.rootViewController = tabBarCtrl;</div><div class="line">    </div><div class="line">    </div><div class="line"> //delegate</div><div class="line">//- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController  &#123;</div><div class="line">//    return YES;</div><div class="line">//&#125;</div><div class="line">- (void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    NSLog(@&quot;%ld&quot;,[tabBarController.viewControllers indexOfObject:viewController]);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>tabarItem的创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//第一种方式</div><div class="line">    UITabBarItem *item1 = [[UITabBarItem alloc] initWithTabBarSystemItem:UITabBarSystemItemFeatured tag:1];</div><div class="line">    //取得一个子控制器,设置item</div><div class="line">    UIViewController *ctrl1 = [viewCtrls objectAtIndex:0];</div><div class="line">    ctrl1.tabBarItem = item1;</div><div class="line">    </div><div class="line">    UITabBarItem *item2 = [[UITabBarItem alloc] initWithTabBarSystemItem:UITabBarSystemItemHistory tag:2];</div><div class="line">    //取得第二个子控制器,设置item</div><div class="line">    UIViewController *ctrl2 = [viewCtrls objectAtIndex:1];</div><div class="line">    ctrl2.tabBarItem = item2;</div><div class="line">    </div><div class="line">    //第二种方式</div><div class="line">    UITabBarItem *item3 = [[UITabBarItem alloc] initWithTitle:@&quot;通讯录&quot; image:[UIImage imageNamed:@&quot;3.png&quot;] tag:3];</div><div class="line">    //提示文字</div><div class="line">    item3.badgeValue = @&quot;New&quot;;</div><div class="line">    //取得第三个子控制器</div><div class="line">    UIViewController *ctrl3 = [viewCtrls objectAtIndex:2];</div><div class="line">    ctrl3.tabBarItem = item3;</div></pre></td></tr></table></figure>
</li>
<li><p>UITabar属性与方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//更改item选中的颜色</div><div class="line">    tabarCtrl.tabBar.tintColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    //设置选中的图片</div><div class="line">    tabarCtrl.tabBar.selectionIndicatorImage = [UIImage imageNamed:@&quot;选中.png&quot;];</div><div class="line">    [tabbar setSelectedImageTintColor:&lt;#(UIColor *)#&gt;];</div><div class="line">    //设置背景图片</div><div class="line">    UIImage *image = [UIImage imageNamed:@&quot;navbg.png&quot;];</div><div class="line">    image = [image stretchableImageWithLeftCapWidth:2 topCapHeight:0];</div><div class="line">    [tabbar setBackgroundImage:image];</div><div class="line">//    tabarCtrl.tabBar.backgroundImage = [UIImage imageNamed:@&quot;navbg.png&quot;];</div><div class="line">    </div><div class="line">    //设置背景颜色</div><div class="line">//    tabarCtrl.tabBar.backgroundColor = [UIColor greenColor];</div><div class="line">    tabarCtrl.tabBar.barTintColor = [UIColor greenColor];</div><div class="line">    </div><div class="line">    //item上的图标</div><div class="line">    item1.badgeValue = @&quot;new&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义Tabbar（这里自定义的继承UITabBarController的一个类，self为UITabBarController子类的对象）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//1.隐藏系统tabbar</div><div class="line">    self.tabBar.hidden = YES;</div><div class="line">    </div><div class="line">    //2.创建图片视图</div><div class="line">    UIImageView *tabar = [[UIImageView alloc] initWithFrame:CGRectMake(0, kSreenHeight - 49, kScreenWidth, 49)];</div><div class="line">    </div><div class="line">    tabar.userInteractionEnabled = YES;</div><div class="line">    tabar.image = [UIImage imageNamed:@&quot;navbg.png&quot;];</div><div class="line">    </div><div class="line">    [self.view addSubview:tabar];</div><div class="line">    </div><div class="line">    </div><div class="line">    //创建选中视图</div><div class="line">    selectImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 53, 45)];</div><div class="line">    selectImageView.image = [UIImage imageNamed:@&quot;选中.png&quot;];</div><div class="line">    [tabar addSubview:selectImageView];</div><div class="line">    </div><div class="line">    </div><div class="line">    //3.创建tabbar按钮</div><div class="line">    </div><div class="line">    for (NSInteger i = 0; i &lt; 5; i++) &#123;</div><div class="line">        NSString *imageName = [NSString stringWithFormat:@&quot;%ld.png&quot;,i + 1];</div><div class="line">        UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">        btn.frame = CGRectMake(i *  kScreenWidth / 5, 0, kScreenWidth / 5, 49);</div><div class="line">        [btn setImage:[UIImage imageNamed:imageName] forState:UIControlStateNormal];</div><div class="line">        </div><div class="line">        [btn addTarget:self action:@selector(clickAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [tabar addSubview:btn];</div><div class="line">        </div><div class="line">        btn.tag = i;</div><div class="line">        if (i == 0) &#123;</div><div class="line">            </div><div class="line">            selectImageView.center = btn.center;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将UINavigationController变成UITabBarController的根视图控制器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//个人中心 创建第三级控制器</div><div class="line">    ProfileViewController *proCtrl = [[ProfileViewController alloc] init];</div><div class="line"></div><div class="line">    //广场</div><div class="line">    SquareViewController *squeCtrl = [[SquareViewController alloc] init];</div><div class="line">    //搜索</div><div class="line">    SearchViewController *searchCtrl = [[SearchViewController alloc] init];</div><div class="line">    //微评</div><div class="line">    ComentViewController *comentCtrl = [[ComentViewController alloc] init];</div><div class="line">    //消息</div><div class="line">    MessageViewController *messageCtrl = [[MessageViewController alloc] init];</div><div class="line">    </div><div class="line">    NSArray *viewCtrls = @[proCtrl,squeCtrl,searchCtrl,comentCtrl,messageCtrl];</div><div class="line">    </div><div class="line">    //创建数组用于存放导航控制器</div><div class="line">    NSMutableArray *navCtrls = [NSMutableArray array];</div><div class="line">    </div><div class="line">    //创建导航控制器 二级控制器</div><div class="line">    for (NSInteger i = 0; i &lt; viewCtrls.count; i++) &#123;</div><div class="line">        </div><div class="line">        //取到对应的子控制器</div><div class="line">        UIViewController *ctrl =  viewCtrls[i];</div><div class="line">        </div><div class="line">        //将第三级控制器交给导航控制器管理</div><div class="line">        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:ctrl];</div><div class="line">        </div><div class="line">        //将导航控制器加入到数组中</div><div class="line">        [navCtrls addObject:nav];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //将导航控制器(二级控制器)交给标签控制器管理</div><div class="line">    self.viewControllers = navCtrls;</div></pre></td></tr></table></figure>
</li>
<li><p>当第一个视图有导航控制器的时候，当push到第二个视图的时候要隐藏tabbar，这个时候就需要实现导航控制器的代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">- (void)_creatSubViewCtrls&#123;</div><div class="line"></div><div class="line">    //个人中心 创建第三级控制器</div><div class="line">    ProfileViewController *proCtrl = [[ProfileViewController alloc] init];</div><div class="line"></div><div class="line">    //广场</div><div class="line">    SquareViewController *squeCtrl = [[SquareViewController alloc] init];</div><div class="line">    //搜索</div><div class="line">    SearchViewController *searchCtrl = [[SearchViewController alloc] init];</div><div class="line">    //微评</div><div class="line">    ComentViewController *comentCtrl = [[ComentViewController alloc] init];</div><div class="line">    //消息</div><div class="line">    MessageViewController *messageCtrl = [[MessageViewController alloc] init];</div><div class="line">    </div><div class="line">    NSArray *viewCtrls = @[proCtrl,squeCtrl,searchCtrl,comentCtrl,messageCtrl];</div><div class="line">    </div><div class="line">    //创建数组用于存放导航控制器</div><div class="line">    NSMutableArray *navCtrls = [NSMutableArray array];</div><div class="line">    </div><div class="line">    //创建导航控制器 二级控制器</div><div class="line">    for (NSInteger i = 0; i &lt; viewCtrls.count; i++) &#123;</div><div class="line">        </div><div class="line">        //取到对应的子控制器</div><div class="line">        UIViewController *ctrl =  viewCtrls[i];</div><div class="line">        </div><div class="line">        //将第三级控制器交给导航控制器管理</div><div class="line">        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:ctrl];</div><div class="line">        </div><div class="line">        //设置代理监听导航控制器的切换</div><div class="line">        nav.delegate = self;</div><div class="line">        </div><div class="line">        //将导航控制器加入到数组中</div><div class="line">        [navCtrls addObject:nav];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    //将导航控制器(二级控制器)交给标签控制器管理</div><div class="line">    self.viewControllers = navCtrls;</div><div class="line"></div><div class="line">&#125;</div><div class="line"> //- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;</div><div class="line"></div><div class="line">pragma mark UINavigationControllerDelegate</div><div class="line"></div><div class="line">  //导航控制器切换子控制器时,会调用此协议方法</div><div class="line"></div><div class="line">- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated&#123;</div><div class="line">    NSLog(@&quot;%@将要显示&quot;,viewController);</div><div class="line">    [UIView beginAnimations:nil context:nil];</div><div class="line">    [UIView setAnimationDuration:.2];</div><div class="line">    //隐藏标签栏</div><div class="line">    if (navigationController.viewControllers.count == 1)&#123; // 显示标签栏</div><div class="line">  //        tabar.hidden = NO;</div><div class="line">        CGRect frame = tabar.frame;</div><div class="line">        frame.origin.x = 0;</div><div class="line">        tabar.frame = frame;</div><div class="line">      </div><div class="line">        &#125;</div><div class="line">    else if(navigationController.viewControllers.count &gt; 1)&#123;//隐藏标签</div><div class="line">  //        tabar.hidden = YES;</div><div class="line">        //将tabbar移动到屏幕的左侧</div><div class="line">        CGRect frame = tabar.frame;</div><div class="line">        frame.origin.x = -kScreenWidth;</div><div class="line">        tabar.frame = frame;</div><div class="line">    &#125;</div><div class="line">    [UIView commitAnimations];</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UITabBarController </tag>
            
            <tag> tabarItem </tag>
            
            <tag> 自定义Tabbar </tag>
            
            <tag> 隐藏tabbar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UINavigationController的常用属性和方法]]></title>
      <url>http://yoursite.com/2017/01/10/UINavigationController%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<ul>
<li><p>UINavigationControllerDelegate</p>
<p>首先在当前的视图控制其中挂失自己的导航控制器的代理</p>
<p><code>self.navigationController.delegate = self;</code></p>
<p>然后实现代理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#pragma mark - navigationController delegate</div><div class="line"></div><div class="line">- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;视图将要显示:%@&quot;, viewController);</div><div class="line">&#125;</div><div class="line">- (void)navigationController:(UINavigationController *)navigationController didShowViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;视图已经显示:%@&quot;, viewController);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>导航控制器的常用属性</p>
<p>导航控制器中 最顶层的视图控制器</p>
<p><code>self.navigationController.topViewController</code></p>
<p>导航控制器中 当前显示的试图控制器</p>
<p><code>self.navigationController.visibleViewController</code></p>
<p>导航控制器中 所有的子控制器</p>
<p><code>self.navigationController.viewControllers</code></p>
<p>导航栏</p>
<p><code>self.navigationController.navigationBar</code></p>
<p>设置导航栏的渲染色</p>
<p><code>self.navigationController.navigationBar.tintColor = [UIColor redColor];</code></p>
<p>​</p>
</li>
<li><p>导航控制器的常用方法</p>
<p>push</p>
<p><code>[self.navigationController pushViewController:second animated:YES];</code></p>
<p>pop - 弹出当前的视图控制器 显示前一个视图控制器</p>
<p><code>[self.navigationController popViewControllerAnimated:YES];</code></p>
<p>弹出到指定视图控制器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSArray *array = self.navigationController.viewControllers;</div><div class="line">UIViewController *vc = array[0];</div><div class="line">[self.navigationController popToViewController:vc animated:YES];</div></pre></td></tr></table></figure>
</li>
<li><p>UINavigationBar</p>
<ol>
<li><p>设置标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 改变navigationItem中title 不会影响self.title</div><div class="line">    self.navigationItem.title = @&quot;title2&quot;;</div><div class="line">// 改变self.title 会影响navigationItem.title</div><div class="line">    self.title = @&quot;12345678&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义标题视图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 自定义标题视图</div><div class="line">    // 任何一个 UIView 以及 子类 都是可以作为 titleView的</div><div class="line">    // 用button 作为标题 依然能够响应点击事件</div><div class="line">    UIButton *titleButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [titleButton setTitle:@&quot;首页&quot; forState:UIControlStateNormal];</div><div class="line">    titleButton.backgroundColor = [UIColor redColor];</div><div class="line">    titleButton.frame = CGRectMake(344, 3245, 120, 40);  // x,y值 不会决定标题视图的位置</div><div class="line">    [titleButton addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    self.navigationItem.titleView = titleButton;</div></pre></td></tr></table></figure>
</li>
<li><p>使用文字标题来创建item</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UIBarButtonItem *backItem = [[UIBarButtonItem alloc] initWithTitle:@&quot;返回&quot;</div><div class="line">                                                                style:UIBarButtonItemStylePlain</div><div class="line">                                                               target:self</div><div class="line">                                                               action:@selector(buttonAction:)];</div><div class="line">   self.navigationItem.leftBarButtonItem = backItem;</div></pre></td></tr></table></figure>
</li>
<li><p>使用图片来创建item</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UIBarButtonItem *backItem = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@&quot;back&quot;]</div><div class="line">                                                                 style:UIBarButtonItemStylePlain</div><div class="line">                                                                target:self</div><div class="line">                                                                action:@selector(buttonAction:)];</div><div class="line">    self.navigationItem.leftBarButtonItem = backItem;</div></pre></td></tr></table></figure>
</li>
<li><p>使用自定义视图来创建item</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建UIButton</div><div class="line">    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [button setTitle:@&quot;返回&quot; forState:UIControlStateNormal];</div><div class="line">    [button setBackgroundImage:[UIImage imageNamed:@&quot;back&quot;] forState:UIControlStateNormal];</div><div class="line">    button.frame = CGRectMake(0, 0, 68, 33);</div><div class="line">    [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    // 创建item</div><div class="line">    UIBarButtonItem *backItem = [[UIBarButtonItem alloc] initWithCustomView:button];</div><div class="line">    self.navigationItem.leftBarButtonItem = backItem;</div></pre></td></tr></table></figure>
</li>
<li><p>设置导航栏的风格</p>
<ul>
<li><p>设置导航栏的风格  会影响状态栏的颜色</p>
<p><code>self.navigationController.navigationBar.barStyle = UIBarStyleDefault;</code></p>
</li>
<li><p>设置 导航栏是否透明 改变透明度 会影响self.view的高度</p>
<p><code>self.navigationController.navigationBar.translucent = YES;</code></p>
</li>
<li><p>iOS 6 之前 用来修改导航栏背景颜色的方法  在iOS7 之后 能够用来修改系统自带的返回按钮字体颜色</p>
<p><code>self.navigationController.navigationBar.tintColor = [UIColor purpleColor];</code></p>
</li>
<li><p>iOS 7之后 修改导航栏背景颜色的方法</p>
<p><code>self.navigationController.navigationBar.barTintColor = [UIColor purpleColor];</code></p>
</li>
<li><p>使用图片来作为导航栏的背景</p>
<p><code>[self.navigationController.navigationBar setBackgroundImage:[UIImage imageNamed:@&quot;navbar_bg_normal&quot;] forBarMetrics:UIBarMetricsDefault];</code></p>
</li>
<li><p>导航上的 提示内容</p>
<p><code>self.navigationItem.prompt = nil;//默认情况下是nil</code></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UINavigationController </tag>
            
            <tag> UINavigationBar </tag>
            
            <tag> UIBarButtonItem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发基本动画-Transform]]></title>
      <url>http://yoursite.com/2017/01/10/iOS%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%8A%A8%E7%94%BB-Transform/</url>
      <content type="html"><![CDATA[<h4 id="iOS开发中最普通的也是入门的动画就是transform了。"><a href="#iOS开发中最普通的也是入门的动画就是transform了。" class="headerlink" title="iOS开发中最普通的也是入门的动画就是transform了。"></a>iOS开发中最普通的也是入门的动画就是transform了。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">//缩放视图</div><div class="line">- (IBAction)scaleAction:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    if (sender.tag == 1) &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;放大&quot;);</div><div class="line">        /*</div><div class="line">        _myView.transform = CGAffineTransformScale(_myView.transform, 1.2, 1.2);</div><div class="line">         */</div><div class="line">        </div><div class="line">        CGAffineTransform t =  _myView.transform;</div><div class="line">        </div><div class="line">        t = CGAffineTransformScale(t, 1.2, 1.2);</div><div class="line">        </div><div class="line">        _myView.transform = t;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if(sender.tag == 2)&#123;</div><div class="line">    </div><div class="line">        NSLog(@&quot;缩小&quot;);</div><div class="line">        </div><div class="line">        CGAffineTransform t =  _myView.transform;</div><div class="line">        </div><div class="line">        t = CGAffineTransformScale(t, 0.5, 0.5);</div><div class="line">        </div><div class="line">        _myView.transform = t;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//旋转</div><div class="line">- (IBAction)rotateAction:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    CGAffineTransform t = _myView.transform;</div><div class="line">    </div><div class="line">    // PI 180   M_PI 180度</div><div class="line">    </div><div class="line">    t = CGAffineTransformRotate(t, M_PI / 10);</div><div class="line">    </div><div class="line">    _myView.transform = t;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//恢复</div><div class="line">- (IBAction)backAction:(id)sender &#123;</div><div class="line">    </div><div class="line">    //恢复视图的tansform值</div><div class="line">    _myView.transform = CGAffineTransformIdentity;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//平移</div><div class="line">- (IBAction)tanslationAction:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    CGAffineTransform t =  _myView.transform;</div><div class="line">    </div><div class="line">    t = CGAffineTransformTranslate(t, 100, 100);</div><div class="line">    _myView.transform = t;</div><div class="line">    </div><div class="line">    </div><div class="line">//    _myView.frame.origin.y = 100;</div><div class="line">    </div><div class="line">    /*</div><div class="line">    //通过修改视图的坐标平移</div><div class="line">    CGRect rect = _myView.frame;</div><div class="line">    rect.origin.y = 300;</div><div class="line">    _myView.frame = rect;</div><div class="line">    */</div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> transform </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发基础-视图层次结构和UIWindow的基本使用以及常用控件和iOS基本动画的使用]]></title>
      <url>http://yoursite.com/2017/01/08/iOS%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<ul>
<li><p>视图的层次结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//直接将view2添加到父视图上</div><div class="line">//    [self.window addSubview:view2];</div><div class="line">    </div><div class="line">    /*</div><div class="line">    当把一个视图添加到父试图上显示时,会有一个索引,第一个被添加的试图索引值为0,然后依次递增,索引值越大,显示的优先级越高,也就是后添加的会把前面添加的覆盖</div><div class="line">     */</div><div class="line">    </div><div class="line">    //1. 将view2添加到window中,并且将索引设置为0</div><div class="line">//    [self.window insertSubview:view2 atIndex:0];</div><div class="line">    </div><div class="line">    //2.将view2添加到window中,并且放到view1的下面</div><div class="line">//    [self.window insertSubview:view2 belowSubview:view1];</div><div class="line">    </div><div class="line">    //3.将view2添加到window中,并且放到view1的上面</div><div class="line">      [self.window insertSubview:view2 aboveSubview:view1];</div><div class="line">    /*</div><div class="line">    //4.将view1放到子视图的最上层显示</div><div class="line">    [self.window bringSubviewToFront:view1];</div><div class="line">    //5.将view1放到子视图的最下层显示</div><div class="line">    [self.window sendSubviewToBack:view1];</div><div class="line">     */</div><div class="line">    </div><div class="line">    //6.交换两个试图的索引值</div><div class="line">    [self.window exchangeSubviewAtIndex:0 withSubviewAtIndex:1];</div><div class="line">    </div><div class="line">    //7.设置视图对象的属性tag，通过tag查找子视图</div><div class="line">        UIView *subView = [self.view viewWithTag:102];</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>UIWindow的基本使用</p>
<p>UIWindow的作用：</p>
<pre><code>1.提供区域显示界面

2.接收用户的点击事件，分发到具体的控件

3.一般和控制器一起管理视图
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">UIWindow的基本使用：</div><div class="line"> //手机屏幕 UIScreen</div><div class="line">    //单例类  一般提供一个类方法创建对象 shareInstansce main....   default....</div><div class="line">    </div><div class="line">//    CGFloat height = [UIScreen mainScreen].bounds.size.height;</div><div class="line">//    CGFloat width = [UIScreen mainScreen].bounds.size.width;</div><div class="line">    </div><div class="line">    UIWindow *window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">    self.window = window;</div><div class="line">    </div><div class="line">    self.window.backgroundColor = [UIColor whiteColor];</div><div class="line">    </div><div class="line">    /*</div><div class="line">     窗口于视图的区别</div><div class="line">     </div><div class="line">     1.视图需要添加到一个父视图上才能显示</div><div class="line">     2.window可以直接显示</div><div class="line">    </div><div class="line">     */</div><div class="line">    //1.把创建好的窗口设置为主窗口 2.将此窗口显示出来</div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line">    </div><div class="line">    //创建另外一个窗口(很少会这样做)</div><div class="line">    myWindow = [[UIWindow alloc] initWithFrame:CGRectMake(0, 0, 320, 20)];</div><div class="line">    myWindow.backgroundColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    //设置显示的级别覆盖状态栏</div><div class="line">    myWindow.windowLevel = UIWindowLevelStatusBar;</div><div class="line">    </div><div class="line">//    [window makeKeyAndVisible]; 错误,只能有一个主窗口</div><div class="line">    //将窗口显示出来</div><div class="line">    myWindow.hidden = NO;</div><div class="line">    </div><div class="line">    //获取当前的keyWindow</div><div class="line">    UIApplication *app = [UIApplication sharedApplication];</div><div class="line">    NSLog(@&quot;主窗口 = %@&quot;,app.keyWindow);</div><div class="line">    NSLog(@&quot;self.window = %@&quot;,self.window);</div><div class="line">    </div><div class="line">    </div><div class="line">    //窗口显示级别 UIWindowLevelNormal &lt; UIWindowLevelStatusBar &lt; UIWindowLevelAlert</div><div class="line">    //状态栏也是一个窗口 高度是20,宽度是屏幕宽  显示级别为UIWindowLevelStatusBar</div><div class="line">//    self.window.windowLevel = UIWindowLevelAlert;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>iOS动画的基本使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">//方法一：</div><div class="line">	//开始动画</div><div class="line">    [UIView beginAnimations:nil context:NULL];</div><div class="line">    </div><div class="line">    //设置动画的时间</div><div class="line">    [UIView setAnimationDuration:1];</div><div class="line">    </div><div class="line">    //设置动画执行的次数</div><div class="line">//    [UIView setAnimationRepeatCount:100];</div><div class="line"></div><div class="line">//    [UIView setAnimationsEnabled:YES];</div><div class="line">    //动画的运动趋势</div><div class="line">    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];</div><div class="line">    </div><div class="line">    //设置动画延迟执行的时间</div><div class="line">//    [UIView setAnimationDelay:5];</div><div class="line">    </div><div class="line">    //更改透明度</div><div class="line">      _myView.alpha = 0;</div><div class="line">      </div><div class="line">    //获取属性</div><div class="line">     CGAffineTransform transform =  self.myView.transform;</div><div class="line">    </div><div class="line">    //旋转</div><div class="line">    _myView.transform = CGAffineTransformRotate(transform, M_PI / 10);</div><div class="line">    </div><div class="line">    //平移</div><div class="line">    _myView.transform = CGAffineTransformTranslate(transform, 0, 200);</div><div class="line">    </div><div class="line">    //恢复</div><div class="line">    self.myView.transform = CGAffineTransformIdentity;</div><div class="line">    </div><div class="line">   //放大视图:在视图原有的尺寸的基础上进行放大</div><div class="line">    self.myView.transform = CGAffineTransformScale(transform, 1.5, 2.0);</div><div class="line"></div><div class="line">    //提交动画</div><div class="line">    [UIView commitAnimations];</div><div class="line">    </div><div class="line">//方法二：   使用Block，动画块进行动画的播放</div><div class="line">     [UIView animateWithDuration:1 animations:^&#123;</div><div class="line">        </div><div class="line">        //获取属性</div><div class="line">        CGAffineTransform transform =  self.myView.transform;</div><div class="line">        //</div><div class="line">        //旋转视图:在视图原有的位置的基础上进行旋转</div><div class="line">        //以视图的中心旋转，顺时针旋转</div><div class="line">        transform = CGAffineTransformRotate(transform, M_PI_2);</div><div class="line">        </div><div class="line">        </div><div class="line">        self.myView.transform = transform;</div><div class="line">        </div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        </div><div class="line">        self.myView.transform = CGAffineTransformIdentity;</div><div class="line">        </div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
</li>
<li><p>UILabel的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//创建UILabel对象(标签)</div><div class="line">    </div><div class="line">    UILabel *lable =  [[UILabel alloc] initWithFrame:CGRectMake(50, 50, 100, 0)];</div><div class="line">    </div><div class="line">    lable.backgroundColor = [UIColor grayColor];</div><div class="line">    //1. 设置显示的文本</div><div class="line">//    [lable setText:&lt;#(NSString *)#&gt;];</div><div class="line">    lable.text = @&quot;huiwenjiaoyuhuiwenjiaoyu&quot;;</div><div class="line">    </div><div class="line">    //2. 设置自动换行,默认是1行,设置为0为自动换行</div><div class="line">    lable.numberOfLines = 0;</div><div class="line">    </div><div class="line">    //3.设置字体</div><div class="line">    </div><div class="line">    UIFont *font = [UIFont fontWithName:@&quot;Telugu Sangam MN&quot; size:25];</div><div class="line">//    lable.font = font;</div><div class="line">    //默认字体</div><div class="line">    lable.font = [UIFont systemFontOfSize:25];</div><div class="line">    //粗体</div><div class="line">    lable.font = [UIFont boldSystemFontOfSize:25];</div><div class="line">    //斜体</div><div class="line">    lable.font = [UIFont italicSystemFontOfSize:25];</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    //4.设置字体的颜色</div><div class="line">//    lable.textColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    //5.设置文本的位置 默认为居左</div><div class="line">    lable.textAlignment = NSTextAlignmentCenter;</div><div class="line">    </div><div class="line">    </div><div class="line">    //6.自适应</div><div class="line">    [lable sizeToFit];</div><div class="line">    </div><div class="line">    //获取系统所有的字体</div><div class="line">    NSArray *fontNames = [UIFont familyNames];</div><div class="line">    NSLog(@&quot;%@&quot;,fontNames);</div><div class="line">    </div><div class="line">    [self.view addSubview:lable];</div><div class="line">    </div><div class="line">    //断点形式</div><div class="line">    label.lineBreakMode = NSLineBreakByWordWrapping;</div><div class="line"></div><div class="line">    </div><div class="line">    //7.设置字体的阴影</div><div class="line">    lable.shadowColor = [UIColor orangeColor];</div><div class="line">    //阴影大小</div><div class="line">    lable.shadowOffset = CGSizeMake(2, 2);</div></pre></td></tr></table></figure>
</li>
<li><p>UIButton的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">   //1.UIButon的创建</div><div class="line">    UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];</div><div class="line">    </div><div class="line">    //设置frame</div><div class="line">    button.frame = CGRectMake(50, 100, 60, 50);</div><div class="line">    button.backgroundColor = [UIColor greenColor];</div><div class="line">    </div><div class="line">    //设置标题</div><div class="line">//    button.titleLabel.text = @&quot;标题&quot;;通过此种方式无法设置标题</div><div class="line">    /*</div><div class="line">        给按钮设置标题,标题颜色需要绑定一个状态</div><div class="line">     UIControlStateNormal       平常状态     ,</div><div class="line">     UIControlStateHighlighted  高亮状态  (按钮被点击时,系统自动切换)            i</div><div class="line">     UIControlStateDisabled     禁用状态    (通过代码设置)</div><div class="line">     UIControlStateSelected     选择状态    (通过代码设置)</div><div class="line">     </div><div class="line">     </div><div class="line">     */</div><div class="line">    //设置平常状态下的标题</div><div class="line">    [button setTitle:@&quot;按钮&quot; forState:UIControlStateNormal];</div><div class="line">    //设置高亮状态下的标题</div><div class="line">    [button setTitle:@&quot;正在点我&quot; forState:UIControlStateHighlighted];</div><div class="line">    </div><div class="line">    //设置标题颜色</div><div class="line">    [button setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</div><div class="line">    [button setTitleColor:[UIColor yellowColor] forState:UIControlStateHighlighted];</div><div class="line">    </div><div class="line">    //设置字体时不需要绑定状态</div><div class="line">    button.titleLabel.font = [UIFont systemFontOfSize:20];</div><div class="line">    </div><div class="line">    // Target靶  MVC  给按钮绑定一个方法,当按钮被点击时,会调用绑定的方法</div><div class="line">    [button addTarget:self action:@selector(clickAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    </div><div class="line">    //是否禁用按钮</div><div class="line">//    button.enabled = NO;</div><div class="line">    </div><div class="line">    // 禁止按钮响应触摸事件</div><div class="line">//    button.userInteractionEnabled = NO;</div><div class="line">    </div><div class="line">    //当按钮被点击时,会发光</div><div class="line">    button.showsTouchWhenHighlighted = YES;</div><div class="line">    </div><div class="line">    [self.view addSubview:button];</div><div class="line">    </div><div class="line">    //______________________图片按钮___________________________</div><div class="line">    </div><div class="line">    /*</div><div class="line">        设置背景图片时,如果按钮比较大,会将图片拉伸  setBackgroundImage</div><div class="line">        设置图片时,如果按钮比较大,不会拉伸图片,图片以原图显示,居中  setImage</div><div class="line">     </div><div class="line">        以上两种方式都需要绑定状态</div><div class="line">     */</div><div class="line">    UIButton *but1 = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    </div><div class="line">    /*</div><div class="line">    //设置背景图片   NSString UIImage  NSData</div><div class="line">    UIImage *image = [UIImage imageNamed:@&quot;back_on_black.png&quot;];</div><div class="line">    //设置平常状态下的背景图片</div><div class="line">    [but1 setBackgroundImage:image forState:UIControlStateNormal];</div><div class="line">    </div><div class="line">    UIImage *image1 = [UIImage imageNamed:@&quot;back_on.png&quot;];</div><div class="line">    //设置平常状态下的高亮图片</div><div class="line">    [but1 setBackgroundImage:image1 forState:UIControlStateHighlighted];</div><div class="line">    </div><div class="line">    but1.frame = CGRectMake(100, 200, 90, 44);</div><div class="line">    </div><div class="line">    //设置标题</div><div class="line">    [but1 setTitle:@&quot;保存&quot; forState:UIControlStateNormal];</div><div class="line">    */</div><div class="line">    </div><div class="line">    </div><div class="line">    self.view.backgroundColor = [UIColor darkGrayColor];</div><div class="line"></div><div class="line">    //如果同时设置了图片又设置了标题,那么图片和标题会并列显示</div><div class="line">    //同事设置背景图片与标题时,标题会显示在图片的上方</div><div class="line">    //设置图片</div><div class="line">    but1.frame = CGRectMake(100, 150, 300, 44);</div><div class="line">    but1.backgroundColor = [UIColor blueColor];</div><div class="line">    [but1 setImage:[UIImage imageNamed:@&quot;back_on_black.png&quot;] forState:UIControlStateNormal];</div><div class="line">    [but1 setImage:[UIImage imageNamed:@&quot;back_on.png&quot;] forState:UIControlStateHighlighted];</div><div class="line">    </div><div class="line">    </div><div class="line">    [but1 setTitle:@&quot;保存&quot; forState:UIControlStateNormal];</div><div class="line">    </div><div class="line">    </div><div class="line">//    UIEdgeInsets edge = UIEdgeInsetsMake(0, 0, 0, 100);</div><div class="line">//    //设置按钮标题的偏移量</div><div class="line">//    [but1 setTitleEdgeInsets:edge];</div><div class="line">    </div><div class="line">//    [but1 setImageEdgeInsets:&lt;#(UIEdgeInsets)#&gt;];</div><div class="line">    </div><div class="line">    [self.view addSubview:but1];</div><div class="line">    </div><div class="line">    //按钮的选择状态</div><div class="line">    </div><div class="line">    UIButton *checkBtn = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    //设置平常状态下的图片</div><div class="line">    [checkBtn setImage:[UIImage imageNamed:@&quot;playing_btn_love_disable.png&quot;] forState:UIControlStateNormal];</div><div class="line">    </div><div class="line">    //设置选择状态下的图片</div><div class="line">    [checkBtn setImage:[UIImage imageNamed:@&quot;playing_btn_in_myfavor.png&quot;] forState:UIControlStateSelected];</div><div class="line">    </div><div class="line">    //绑定事件方法</div><div class="line">    [checkBtn addTarget:self action:@selector(loveAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    </div><div class="line">    //设置按钮为选择状态</div><div class="line">//    checkBtn.selected = YES; 默认为NO</div><div class="line">    checkBtn.frame = CGRectMake(50, 300, 50, 50);</div><div class="line">    [self.view addSubview:checkBtn];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>UITextField的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">   </div><div class="line">    </div><div class="line">    //1.创建输入框</div><div class="line">    UITextField *textField = [[UITextField alloc] initWithFrame:CGRectMake(50, 50, 200, 30)];</div><div class="line">    </div><div class="line">    //2.设置边框样式</div><div class="line">    textField.borderStyle = UITextBorderStyleRoundedRect;</div><div class="line">    </div><div class="line">    </div><div class="line">    [self.view addSubview:textField]; //</div><div class="line">    </div><div class="line">    //3.设置文本的颜色</div><div class="line">    textField.textColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    //4.设置清除按钮模式</div><div class="line">    textField.clearButtonMode = UITextFieldViewModeWhileEditing;</div><div class="line">    </div><div class="line">    //5.当输入框为空时,显示的提示字符</div><div class="line">    textField.placeholder = @&quot;请输入密码&quot;;</div><div class="line">    </div><div class="line">    //6.设置字体</div><div class="line">    textField.font = [UIFont italicSystemFontOfSize:17];</div><div class="line">    </div><div class="line">    //7.安全输入</div><div class="line">//    textField.secureTextEntry = YES;</div><div class="line">    </div><div class="line">    //8.设置return按钮</div><div class="line">    textField.returnKeyType = UIReturnKeySend;</div><div class="line">    </div><div class="line">    //9.键盘外观</div><div class="line">    textField.keyboardAppearance = UIKeyboardAppearanceDefault;</div><div class="line">    </div><div class="line">     UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];</div><div class="line">    imageView.image = [UIImage imageNamed:@&quot;left&quot;];</div><div class="line"></div><div class="line">    //10.键盘左侧视图</div><div class="line">    textF.leftView = imageView;</div><div class="line">    textF.leftViewMode = UITextFieldViewModeAlways;</div><div class="line">    </div><div class="line">    //11.清除按钮</div><div class="line">    textF.clearButtonMode = UITextFieldViewModeAlways;</div><div class="line">    </div><div class="line">    </div><div class="line">    //12.设置输入框的键盘类型</div><div class="line">    textF.keyboardType = UIKeyboardTypeDefault;</div><div class="line">    </div><div class="line">    </div><div class="line">    //设置为第一相应者,会直接弹出键盘</div><div class="line">    [textField becomeFirstResponder];</div><div class="line">    </div><div class="line">    //设置代理</div><div class="line">    textField.delegate = self;</div><div class="line">    </div><div class="line">   </div><div class="line">    // textFiled -&gt; self -&gt; view -&gt; textFiled 循环引用</div><div class="line">    </div><div class="line">    // a -&gt; b -&gt; c - &gt; d -&gt; a</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    /*</div><div class="line">         //点击return</div><div class="line">        [self.delegate  协议方法]</div><div class="line">     </div><div class="line">     </div><div class="line">     */</div><div class="line">    </div><div class="line">    //是否开启首字母大写</div><div class="line">    textField.autocapitalizationType = UITextAutocapitalizationTypeNone;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">#pragma mark -UITextFieldDeleagte</div><div class="line"></div><div class="line">//当return按钮被点击时,会调用次协议方法</div><div class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField&#123;</div><div class="line">    </div><div class="line">    //让键盘返回,缩回</div><div class="line">    </div><div class="line">    //方式1</div><div class="line">//    [textField endEditing:YES];</div><div class="line">    </div><div class="line">    //方式2</div><div class="line">    //失去第一响应者</div><div class="line"></div><div class="line">    [textField resignFirstResponder];</div><div class="line">    </div><div class="line">    return YES;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//如果然会NO,则键盘不会弹出</div><div class="line">- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    NSLog(@&quot;键盘将要弹出&quot;);</div><div class="line">    return YES;</div><div class="line"></div><div class="line">&#125;        // return NO to disallow editing.</div><div class="line"></div><div class="line">- (void)textFieldDidBeginEditing:(UITextField *)textField &#123;</div><div class="line">  NSLog(@&quot;键盘已经弹出&quot;);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">- (BOOL)textFieldShouldEndEditing:(UITextField *)textField &#123;</div><div class="line">    NSLog(@&quot;键盘将要返回&quot;);</div><div class="line">    return YES;</div><div class="line">  &#125;         // return YES to allow editing to stop and to resign first responder status. NO to disallow the editing session to end</div><div class="line">- (void)textFieldDidEndEditing:(UITextField *)textField &#123;</div><div class="line"></div><div class="line">      NSLog(@&quot;键盘已经返回&quot;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  //当输入框被编辑时,会实时调用</div><div class="line"></div><div class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string &#123;</div><div class="line">    NSLog(@&quot;%@&quot;,string);</div><div class="line">    if ([string isEqualToString:@&quot;a&quot;]) &#123;</div><div class="line">        </div><div class="line">        return NO; //如果返回NO,输入的字符不会显示在输入框中</div><div class="line">    &#125;</div><div class="line">    return YES;</div><div class="line"></div><div class="line">  &#125;   // return NO to not change text</div><div class="line"></div><div class="line">  @end</div></pre></td></tr></table></figure>
</li>
<li><p>UIImageView的基本使用(包含图片数组的循环播放动画)</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  #import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">  @interface ViewController ()</div><div class="line"></div><div class="line">  @end</div><div class="line"></div><div class="line">  @implementation ViewController</div><div class="line"></div><div class="line">  - (void)viewDidLoad &#123;</div><div class="line">      [super viewDidLoad];</div><div class="line">      // Do any additional setup after loading the view, typically from a nib.</div><div class="line">      </div><div class="line">      //1. UIImageView的创建</div><div class="line">      /*</div><div class="line">      UIImageView *imageView = [[UIImageView alloc] initWithFrame:&lt;#(CGRect)#&gt;];</div><div class="line">      imageView.image</div><div class="line">      */</div><div class="line">      </div><div class="line">      //layer层：设置视图的 边框，圆角的弧度</div><div class="line">//    imageView.layer.borderWidth = 2;</div><div class="line">//    imageView.layer.borderColor = [UIColor redColor].CGColor;</div><div class="line">//    imageView.layer.cornerRadius = 5;</div><div class="line"></div><div class="line"></div><div class="line">      </div><div class="line">      UIImage *image = [UIImage imageNamed:@&quot;back_on_black.png&quot;];</div><div class="line">  //    图片的大小</div><div class="line">  //    image.size</div><div class="line">      UIImageView *imageView = [[UIImageView alloc] initWithImage:image];</div><div class="line">      imageView.frame = CGRectMake(50, 0, 200, 200);</div><div class="line">      </div><div class="line">      imageView.backgroundColor = [UIColor orangeColor];</div><div class="line">      </div><div class="line">      //设置内容模式</div><div class="line">      /*</div><div class="line">          默认为UIViewContentModeScaleToFill拉伸填充,会是图片变形</div><div class="line">          UIViewContentModeScaleAspectFit 等比例缩放</div><div class="line">          UIViewContentModeScaleAspectFill, 等比例的充满整个视图</div><div class="line">       */</div><div class="line">      imageView.contentMode = UIViewContentModeScaleAspectFit;</div><div class="line">      [self.view addSubview:imageView];</div><div class="line">      </div><div class="line">      //2. 设置高亮图片</div><div class="line">      imageView.highlightedImage = [UIImage imageNamed:@&quot;Icon.png&quot;];</div><div class="line">      //需要手动设置为高亮状态,才能显示高亮状态下的图片</div><div class="line">  //    imageView.highlighted = YES;</div><div class="line">      </div><div class="line">      //3.不接受用户交互事件 默认为NO,如果在图片视图上添加按钮,则按钮也不接受点击事件</div><div class="line">      imageView.userInteractionEnabled = YES;</div><div class="line">      </div><div class="line">      UIButton *btn = [UIButton buttonWithType:UIButtonTypeSystem];</div><div class="line">      [btn setTitle:@&quot;保存&quot; forState:UIControlStateNormal];</div><div class="line">      [btn setFrame:CGRectMake(0, 0, 100, 100)];</div><div class="line">      </div><div class="line">      [btn addTarget:self action:@selector(clickAction:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">      [imageView addSubview:btn];</div><div class="line">      </div><div class="line">      //4.可以加载网络上的图片</div><div class="line">      UIImageView *imageView1 = [[UIImageView alloc] initWithFrame:CGRectMake(0, 200, 100, 100)];</div><div class="line">      NSURL *url = [NSURL URLWithString:@&quot;https://www.baidu.com/img/bd_logo1.png&quot;];</div><div class="line">      </div><div class="line">      NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">      </div><div class="line">      UIImage *imageNet = [UIImage imageWithData:data];</div><div class="line">      imageView1.image = imageNet;</div><div class="line">      [self.view addSubview:imageView1];</div><div class="line">      </div><div class="line">      //播放动画</div><div class="line">      UIImageView *imageView3 = [[UIImageView alloc] initWithFrame:CGRectMake(20, 300, 200, 200)];</div><div class="line">      </div><div class="line">      imageView3.tag = 100;</div><div class="line">      </div><div class="line">      //图片数组</div><div class="line">      imags = [NSMutableArray array];</div><div class="line">      for (NSInteger i = 1; i &lt;= 21; i++) &#123;</div><div class="line">      </div><div class="line">          NSString *imageName = [NSString stringWithFormat:@&quot;%ld.jpg&quot;,i];</div><div class="line">          UIImage *image = [UIImage imageNamed:imageName];</div><div class="line">          </div><div class="line">          [imags addObject:image];</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      /*</div><div class="line">      //将图片数组交给图片视图</div><div class="line">      imageView3.animationImages = imags;</div><div class="line">      //设置动画的时间</div><div class="line">      imageView3.animationDuration = 2.1;</div><div class="line">      </div><div class="line">      //动画重复的次数：默认循环播放</div><div class="line">      imageView.animationRepeatCount = 3;</div><div class="line">      </div><div class="line">      //开始动画</div><div class="line">      [imageView3 startAnimating];</div><div class="line">      </div><div class="line">      */</div><div class="line">      [self.view addSubview:imageView3];</div><div class="line">      </div><div class="line">      </div><div class="line">      //通过定时器实现图片的播放</div><div class="line">      [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(timerAction:) userInfo:nil repeats:YES];</div><div class="line">      </div><div class="line">      </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  - (void)timerAction:(NSTimer *)timer&#123;</div><div class="line"></div><div class="line">      </div><div class="line">      UIImageView *imageView = (UIImageView *)[self.view viewWithTag:100]; //UIView</div><div class="line">       //切换图片</div><div class="line">      imageView.image = imags[index];</div><div class="line">      </div><div class="line">      index++;</div><div class="line">      </div><div class="line">      if (index &gt;= imags.count) &#123;</div><div class="line">          </div><div class="line">          </div><div class="line">          index = 0;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      </div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  - (void)clickAction:(UIButton *)btn&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  &#125;</div><div class="line">  - (void)didReceiveMemoryWarning &#123;</div><div class="line">      [super didReceiveMemoryWarning];</div><div class="line">      // Dispose of any resources that can be recreated.</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @end</div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li><p>UISlider的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    </div><div class="line">    //滑块的创建</div><div class="line">    </div><div class="line">    UISlider *slider = [[UISlider alloc] initWithFrame:CGRectMake(20, 100, 300, 30)];</div><div class="line">    </div><div class="line">//    slider.backgroundColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    [self.view addSubview:slider];</div><div class="line">    </div><div class="line">    // 默认最小值为0 最大值为1</div><div class="line">    slider.value = .5;</div><div class="line">    </div><div class="line">    //设置最大值</div><div class="line">    slider.maximumValue = 100;</div><div class="line">    </div><div class="line">    //设置最小值</div><div class="line">//    slider.minimumValue = 0;</div><div class="line">    </div><div class="line">    //绑定方法,监听滑动事件</div><div class="line">//    [slider addTarget:self action:@selector(sliderAction:) forControlEvents:UIControlEventValueChanged];</div><div class="line">    </div><div class="line">     [slider addTarget:self action:@selector(sliderAction:) forControlEvents:UIControlEventValueChanged];</div><div class="line">    </div><div class="line">    //设置进度条的颜色</div><div class="line">    [slider setMaximumTrackTintColor:[UIColor redColor]];</div><div class="line">    [slider setMinimumTrackTintColor:[UIColor greenColor]];</div><div class="line">    </div><div class="line">//    [slider setMaximumTrackImage:&lt;#(UIImage *)#&gt; forState:&lt;#(UIControlState)#&gt;];</div><div class="line">    </div><div class="line">    //设置拇指视图</div><div class="line">//    [slider setThumbImage:&lt;#(UIImage *)#&gt; forState:&lt;#(UIControlState)#&gt;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sliderAction:(UISlider *)slider&#123;</div><div class="line"> NSLog(@&quot;%f&quot;,slider.value);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>模态视图的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//切换视图</div><div class="line"> SecondViewController *ctrl = [[SecondViewController alloc] init];</div><div class="line"> </div><div class="line"> //通过模态视图弹出,将第二个控制器的视图弹出</div><div class="line">  //设置动画效果</div><div class="line">  ctrl.modalTransitionStyle = UIModalTransitionStyleFlipHorizontal;</div><div class="line">  </div><div class="line">  /*</div><div class="line">      将 ctrl的视图添加到窗口上面</div><div class="line">   */</div><div class="line">  [self presentViewController:ctrl animated:YES completion:NULL];</div><div class="line">  </div><div class="line">  </div><div class="line">  //返回  </div><div class="line">  [self dismissViewControllerAnimated:YES completion:NULL];</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>网络加载活动视图UIActivityIndicatorView的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//活动视图</div><div class="line">    /*</div><div class="line">        样式</div><div class="line">1. UIActivityIndicatorViewStyleWhiteLarge 大白</div><div class="line">2. UIActivityIndicatorViewStyleGray 灰色</div><div class="line">3. UIActivityIndicatorViewStyleWhite</div><div class="line"> */</div><div class="line"> </div><div class="line">   //self.view.backgroundColor = [UIColor orangeColor];</div><div class="line">   </div><div class="line">   activityView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];</div><div class="line">   activityView.frame = CGRectMake(100, 200, 0, 0);</div><div class="line">   //activityView.backgroundColor = [UIColor redColor];</div><div class="line">         </div><div class="line">  //停止转动时,是否消失,默认是YES</div><div class="line"></div><div class="line">   //activityView.hidesWhenStopped = NO;</div><div class="line">   //开始动画</div><div class="line">  [activityView startAnimating];</div><div class="line">  </div><div class="line">  //hideaAction方法中调用[activityView stopAnimating]来停止动画</div><div class="line">  [self performSelector:@selector(hideaAction) withObject:nil afterDelay:4];</div><div class="line">  </div><div class="line">  [self.view addSubview:activityView];</div><div class="line">  </div><div class="line">  //创建应用程序对象</div><div class="line">  UIApplication *app =  [UIApplication sharedApplication];</div><div class="line">  [app setNetworkActivityIndicatorVisible:YES];</div></pre></td></tr></table></figure>
</li>
<li><p>UISwitch的基本使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//开关  UISwitch</div><div class="line">    UISwitch *switchBtn = [[UISwitch alloc] initWithFrame:CGRectMake(50, 50, 100, 100)];</div><div class="line">    </div><div class="line">    //开关是否打开</div><div class="line">    switchBtn.on = YES;</div><div class="line">    </div><div class="line">    //绑定事件</div><div class="line">    [switchBtn addTarget:self action:@selector(switchAction:) forControlEvents:UIControlEventValueChanged];</div><div class="line">    </div><div class="line">    [self.view addSubview:switchBtn];</div><div class="line">    switchBtn.onTintColor = [UIColor redColor];</div><div class="line">    switchBtn.thumbTintColor = [UIColor blueColor];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>分页控件UIPageControl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">UIPageControl *pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(50, 80, 300, 30)];</div><div class="line">    </div><div class="line">    pageControl.backgroundColor = [UIColor orangeColor];</div><div class="line">    pageControl.currentPage = 0;</div><div class="line">    pageControl.numberOfPages = 5;</div><div class="line">    [pageControl addTarget:self action:@selector(pageControlAction) forControlEvents:UIControlEventValueChanged];</div><div class="line">    [self.view addSubview:pageControl];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>分段控件UISegmentedControl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//分段控件</div><div class="line">    </div><div class="line">    NSArray *array = @[@&quot;娱乐&quot;,@&quot;综艺&quot;,@&quot;体育&quot;];</div><div class="line">    UISegmentedControl *segment = [[UISegmentedControl alloc] initWithItems:array];</div><div class="line">    segment.frame = CGRectMake(100, 150, 200, 40);</div><div class="line">    [self.view addSubview:segment];</div><div class="line">    </div><div class="line">    //被选中的索引</div><div class="line">    segment.selectedSegmentIndex = 2;</div><div class="line">    </div><div class="line">    //设置渲染的颜色</div><div class="line">    segment.tintColor = [UIColor orangeColor];</div><div class="line">    </div><div class="line">    [segment addTarget:self action:@selector(segementAction:) forControlEvents:UIControlEventValueChanged];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>AVAudioPlayer</p>
<p>首先需要导入AVFoundation.framework</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;AVFoundation/AVFoundation.h&gt;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">&#123;</div><div class="line">    AVAudioPlayer *_player;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    //创建播放器对象</div><div class="line">   </div><div class="line">    </div><div class="line">    //播放的音乐</div><div class="line">    //获取资源文件的路径</div><div class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;小苹果&quot; ofType:@&quot;mp3&quot;];</div><div class="line">    </div><div class="line">    //转换成url</div><div class="line">    NSURL *url = [NSURL fileURLWithPath:path];</div><div class="line">    </div><div class="line">    _player = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:nil];</div><div class="line">    </div><div class="line">    //音频文件中的时间</div><div class="line">    NSLog(@&quot;%f&quot;,_player.duration);</div><div class="line">    </div><div class="line">    //播放文件</div><div class="line">    [_player play];</div><div class="line">    </div><div class="line">    //暂停播放</div><div class="line">//    [player pause];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UIWindow </tag>
            
            <tag> iOS动画 </tag>
            
            <tag> 旋转 </tag>
            
            <tag> 平移 </tag>
            
            <tag> UILabel </tag>
            
            <tag> UIButton </tag>
            
            <tag> UITextField </tag>
            
            <tag> UIImageView </tag>
            
            <tag> UISlider </tag>
            
            <tag> 模态视图 </tag>
            
            <tag> UIActivityIndicatorView </tag>
            
            <tag> UISwitch </tag>
            
            <tag> UIPageControl </tag>
            
            <tag> UISegmentedControl </tag>
            
            <tag> AVAudioPlayer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Foundation框架的基本使用]]></title>
      <url>http://yoursite.com/2017/01/07/Foundation%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<ul>
<li><p>NSObject常用方法</p>
<p>首先创建一个基类：Person</p>
<p>Person.m中增加一个私有方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)_privateFunc &#123;</div><div class="line">    NSLog(@&quot;Person的私有方法&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在创建一个子类：Student继承Person</p>
<p>下面通过代码来介绍NSObject常用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Student.h&quot;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">   </div><div class="line">    NSObject *obj1 = [[NSObject alloc] init];</div><div class="line">    NSObject *obj2 = [[NSObject alloc] init];</div><div class="line">    //1. 判断两个实例对象是否是同一个实例对象</div><div class="line">    if (![obj1 isEqualTo:obj2]) &#123;</div><div class="line">        NSLog(@&quot;两个实例对象地址不同&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (obj1 == obj2) &#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    //2.isMemberOfClass:判断实例对象是否是Person类创建的。</div><div class="line">    //isKindOfClass:判断实例对象是否是当前类创建的或者继承自当前类。</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    if ([p isMemberOfClass:[Person class]]) &#123;</div><div class="line">        NSLog(@&quot;p是Person类创建的实例对象&quot;);</div><div class="line">    &#125;</div><div class="line">    if ([p isKindOfClass:[NSObject class]]) &#123;</div><div class="line">        NSLog(@&quot;p是NSObject类创建的实例对象或者是继承自NSObject&quot;);</div><div class="line">    &#125;</div><div class="line">    //间接继承也返回YES</div><div class="line">    Student *s = [[Student alloc] init];</div><div class="line">    if ([s isKindOfClass:[NSObject class]]) &#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //3.performSelector：通过包装好的SEL数据来调用方法</div><div class="line">    //respondsToSelector:判断当前类中是否已经定义了这个方法</div><div class="line">    //[p _privateFunc];</div><div class="line">    if ([p respondsToSelector:@selector(_privateFunc)]) &#123;</div><div class="line">        [p performSelector:@selector(_privateFunc)];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
<a id="more"></a></li>
<li><p>常用的结构体</p>
<p>常用的结构体有：</p>
<p> NSRange</p>
<p> NSPoint/CGPoint</p>
<p> NSSize/CGSize</p>
<p> NSRect/CGRect</p>
<p>下面通过代码来简单介绍一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">  void rangeUse(void) &#123;</div><div class="line">  //@&quot;I love programming!&quot;</div><div class="line">  //&#123;1,2,3,4,5&#125;;</div><div class="line">  NSRange range = &#123;2, 4&#125;;</div><div class="line">  NSRange range1 = &#123;.location = 3, .length = 2&#125;;</div><div class="line">  //OC常用此函数来创建NSRange结构体变量</div><div class="line">  NSRange range2 = NSMakeRange(2, 4);</div><div class="line">  </div><div class="line">  NSString *str = @&quot;I love Programming&quot;;</div><div class="line">  //查找@&quot;is&quot;的范围</div><div class="line">  NSRange r = [str rangeOfString:@&quot;is&quot;];</div><div class="line">  //如果查找不到，则location为NSNotFound,length为0</div><div class="line">  if (r.location == NSNotFound) &#123;</div><div class="line">      NSLog(@&quot;此字符串中没有is子串&quot;);</div><div class="line">  &#125;</div><div class="line">  else &#123;</div><div class="line">      //r.location,r.length</div><div class="line">      NSLog(@&quot;%@&quot;,NSStringFromRange(r));</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  //NSPoint CGPoint NSSize CGSize NSRect CGRect</div><div class="line"></div><div class="line">  void pointUse(void) &#123;</div><div class="line">  //CGPoint表示一个点</div><div class="line">  CGPoint p1 = CGPointMake(20, 30);</div><div class="line">  NSLog(@&quot;%@&quot;, NSStringFromPoint(p1));</div><div class="line">  </div><div class="line">  //CGSize表示一个尺寸</div><div class="line">  CGSize s1 = CGSizeMake(100, 100);</div><div class="line">  NSLog(@&quot;%@&quot;, NSStringFromSize(s1));</div><div class="line">  </div><div class="line">  //CGRect表示一个UI元素</div><div class="line">  CGRect r1 = CGRectMake(0, 0, 100, 100);</div><div class="line">  CGRect r2 = &#123;p1,s1&#125;;</div><div class="line">  CGRect r3 = &#123;CGPointZero,CGSizeMake(100, 100)&#125;;</div><div class="line">  NSLog(@&quot;%@&quot;,NSStringFromRect(r1));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  int main(int argc, const char * argv[]) &#123;</div><div class="line"></div><div class="line">//rangeUse();</div><div class="line">  //pointUse();</div><div class="line">  BOOL b = CGPointEqualToPoint(CGPointZero, CGPointMake(0, 100));</div><div class="line">  BOOL b2 = CGRectContainsPoint(CGRectMake(50, 10, 1, 2), CGPointZero);</div><div class="line">  NSLog(@&quot;%i&quot;, b2);</div><div class="line">  return 0;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>NSString</p>
<p> 下面通过代码来简单介绍一下：</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">//1.字符串创建</div><div class="line">void stringCreate(void) &#123;</div><div class="line">    NSString *s1 = @&quot;hello&quot;;</div><div class="line">    //NSString *s2 = [[NSString alloc] initWithString:@&quot;220&quot;];</div><div class="line">    //类方法创建</div><div class="line">    NSString *s3 = [NSString stringWithFormat:@&quot;age is %i&quot;,10];</div><div class="line">    //用C语言的字符串来创建</div><div class="line">    NSString *s4 = [NSString stringWithUTF8String:&quot;hello&quot;];</div><div class="line">    </div><div class="line">    //把字符串对象转换成C字符串</div><div class="line">    const char *cString = [s4 UTF8String];</div><div class="line">    </div><div class="line">    //从文件中读取字符串</div><div class="line">    NSError *error = nil;</div><div class="line">    NSString *s5 = [NSString stringWithContentsOfFile:@&quot;/Users/kangkathy/Desktop/1.txt&quot; encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">    </div><div class="line">    //NSLog(@&quot;%@&quot;, s5);</div><div class="line">    </div><div class="line">    //从网络资源中读取字符串</div><div class="line">    //URL:网络资源路径</div><div class="line">    NSURL *url = [NSURL URLWithString:@&quot;http://www.baidu.com&quot;];</div><div class="line">    NSString *s6 = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error];</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;, s6);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//2.字符串的导出</div><div class="line">void stringExport(void) &#123;</div><div class="line">    NSString *string = @&quot;hello world&quot;;</div><div class="line">    [string writeToFile:@&quot;/Users/kangkathy/Desktop/1.txt&quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//3.字符串的比较</div><div class="line">void stringCompare(void) &#123;</div><div class="line">    NSString *s1 = @&quot;abcd&quot;;</div><div class="line">    NSString *s2 = @&quot;ABCD&quot;;</div><div class="line">    </div><div class="line">    //对大小写敏感的比较 compare</div><div class="line">    if (![s1 isEqualToString:s2])</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;两个字符串内容不相同&quot;);</div><div class="line">    &#125;</div><div class="line">    //忽略大小写的比较</div><div class="line">    NSComparisonResult result = [s1 caseInsensitiveCompare:s2];</div><div class="line">    if (result == NSOrderedSame) &#123;</div><div class="line">        NSLog(@&quot;两个字符串忽略大小写内容相同&quot;);</div><div class="line">    &#125;</div><div class="line">    else if (result == NSOrderedAscending)</div><div class="line">    &#123;</div><div class="line">        NSLog(@&quot;s1 &lt; s2，升序&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    else if (result == NSOrderedDescending) &#123;</div><div class="line">        NSLog(@&quot;s1 &gt; s2，降序&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void stringOther(void) &#123;</div><div class="line"></div><div class="line">    //获取字符串字符的个数,一个中文按一个字符计数</div><div class="line">    NSString *str = @&quot;abcd一二&quot;;</div><div class="line">    NSLog(@&quot;count=%lu&quot;, str.length);</div><div class="line">    </div><div class="line">    //获取对应下标字符</div><div class="line">    unichar c = [str characterAtIndex:0];</div><div class="line">    NSLog(@&quot;%c&quot;, c);</div><div class="line">    </div><div class="line">    //字符串转换</div><div class="line">    //把字符串中的小写字母转换成大写字母</div><div class="line">    NSString *str2 = @&quot;hEhE&quot;;</div><div class="line">    NSLog(@&quot;%@&quot;, [str2 uppercaseString]);</div><div class="line">    NSLog(@&quot;%@&quot;, [str2 lowercaseString]);</div><div class="line">    </div><div class="line">    //字符串类型转换成基本类型</div><div class="line">    int i = [@&quot;123&quot; intValue];</div><div class="line">    double d = [@&quot;1.4&quot; doubleValue];</div><div class="line">    BOOL b = [@&quot;YES&quot; boolValue];</div><div class="line">    NSLog(@&quot;%i,%lf,%i&quot;, i, d, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//改变字符串的方法</div><div class="line">void stringChange(void) &#123;</div><div class="line">    //字符串截取</div><div class="line">    NSString *s1 = @&quot;kangxiangzhe@huiwen.com&quot;;</div><div class="line">    </div><div class="line">    //不可变字符一经创建不会改变里面的内容，如果要截取或者拼接则会产生新的字符串</div><div class="line">    //从字符串的起始位置截取到指定位置（不包含指定位置的字符)</div><div class="line">    NSString *subStr1 = [s1 substringToIndex:12];</div><div class="line">    //从指定位置截取到字符串的末尾（包含指定位置的字符)</div><div class="line">    NSString *subStr2 = [s1 substringFromIndex:12];</div><div class="line"></div><div class="line">    //从第2个开始后面的4个位置的数</div><div class="line">    NSString *subStr3 = [s1 substringWithRange:NSMakeRange(2,4)];</div><div class="line">//    NSLog(@&quot;subStr1:%@&quot;, subStr1);</div><div class="line">//    NSLog(@&quot;subStr2:%@&quot;, subStr2);</div><div class="line">//    NSLog(@&quot;subStr3:%@&quot;, subStr3);</div><div class="line">    </div><div class="line">    //字符串的拼接</div><div class="line">    NSString *str4 = @&quot;iOS&quot;;</div><div class="line">    NSString *str5 = [str4 stringByAppendingString:@&quot;23&quot;];</div><div class="line"> </div><div class="line">    NSString *str6 = [str4 stringByAppendingFormat:@&quot;%@--%i&quot;,str5,7];</div><div class="line">    NSLog(@&quot;str5:%@&quot;, str6);</div><div class="line">    </div><div class="line">    //字符串的查找</div><div class="line">    NSString *eMail = @&quot;sb@163.com,erhuo@163.com&quot;;</div><div class="line">    NSRange r = [eMail rangeOfString:@&quot;163.com&quot;];</div><div class="line">    if (r.location == NSNotFound) &#123;</div><div class="line">        NSLog(@&quot;找不到此字符串&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //字符串的替换</div><div class="line">    NSString *newEMail = [eMail stringByReplacingOccurrencesOfString:@&quot;163.com&quot; withString:@&quot;qq.com&quot;];</div><div class="line">    </div><div class="line">    NSLog(@&quot;newEMail:%@&quot;, newEMail);</div><div class="line">    </div><div class="line">    //分割字符串</div><div class="line">    NSString *str1=@&quot;qwbud,,qwdoi..qwdbiu&quot;;</div><div class="line">    NSArray *array=[str1 componentsSeparatedByString:@&quot;d&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;,array);</div><div class="line">    </div><div class="line">    //访问字符串指定位置字符</div><div class="line">    NSString *str2=@&quot;nhgsiohsoigniohewt&quot;;</div><div class="line">    char c = [str2 characterAtIndex:5];</div><div class="line">    NSLog(@&quot;%c&quot;,c);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    </div><div class="line">    //stringCreate();</div><div class="line">    //stringExport();</div><div class="line">    //stringCompare();</div><div class="line">    //stringOther();</div><div class="line">    stringChange();</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li><p>NSMutableString</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">   </div><div class="line">    //可变字符串的创建</div><div class="line">    //创建一个空的字符串</div><div class="line">    NSMutableString *ms = [NSMutableString string];</div><div class="line">    //根据不可字符串创建一个可变字符串</div><div class="line">    NSMutableString *ms1 = [NSMutableString stringWithString:@&quot;hello&quot;];</div><div class="line">    //按照某种格式创建字符串</div><div class="line">    NSMutableString *ms2 = [NSMutableString stringWithFormat:@&quot;字符串&quot;];</div><div class="line">    </div><div class="line">    //NSString和NSMutableString的区别</div><div class="line">//    NSString对象不可变，添加删除时会产生一个新的字符串，不能在自身上操作。</div><div class="line">//    NSMutableString可以自身的基础上添加和删除。</div><div class="line">    </div><div class="line">    //1.添加字符串</div><div class="line">    [ms2 insertString:@&quot;可变&quot; atIndex:0];</div><div class="line">    NSLog(@&quot;%@&quot;, ms2);</div><div class="line">    </div><div class="line">    //追加字符串</div><div class="line">    [ms2 appendString:@&quot;对象&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;, ms2);</div><div class="line">    </div><div class="line">    //2.删除字符串</div><div class="line">    NSRange r = [ms2 rangeOfString:@&quot;可变&quot;];</div><div class="line">    [ms2 deleteCharactersInRange:r];</div><div class="line">    NSLog(@&quot;%@&quot;, ms2);</div><div class="line">    </div><div class="line">    </div><div class="line">    //3.字符串的替换</div><div class="line">    NSRange r1 = [ms2 rangeOfString:@&quot;字符&quot;];</div><div class="line">    [ms2 replaceCharactersInRange:r1 withString:@&quot;羊肉&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;, ms2);</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是一个小demo，查找出一个字符串里面的数字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">NSString * stringWithoutNum(NSString *str)</div><div class="line">&#123;</div><div class="line">//    NSMutableString *str1 = [[NSMutableString alloc] init];</div><div class="line">//    NSMutableString *str2 = [[NSMutableString alloc] init];</div><div class="line">//    for (NSUInteger i =0; i&lt; str.length; i++) &#123;</div><div class="line">//        unichar c = [str characterAtIndex:i];</div><div class="line">//        NSRange range = NSMakeRange(i, 1);</div><div class="line">//        if (c &lt; &apos;0&apos; || c &gt; &apos;9&apos;) &#123;</div><div class="line">//            str1 = [NSMutableString stringWithString:[str substringWithRange:range]];</div><div class="line">//            [str2 appendString:str1];</div><div class="line">//        &#125;</div><div class="line">//    &#125;</div><div class="line">//   </div><div class="line">//    return str2;</div><div class="line">    </div><div class="line">    NSMutableString *strm = [NSMutableString stringWithString:str];</div><div class="line"></div><div class="line">    for (NSInteger i = 0; i &lt; 10; i++) &#123;</div><div class="line">        [strm replaceOccurrencesOfString:[NSString stringWithFormat:@&quot;%li&quot;,i] withString:@&quot;&quot; options:NSLiteralSearch range:NSMakeRange(0, strm.length)];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return strm;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>NSArray</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">//1.数组的创建</div><div class="line">//2.数组的遍历</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">void arrayCreate(void) &#123;</div><div class="line">    //创建一个空数组</div><div class="line">    NSArray *array = [NSArray array];</div><div class="line">    </div><div class="line">    //创建一个有一个元素的数组</div><div class="line">    NSArray *array1 = [NSArray arrayWithObject:@&quot;hello&quot;];</div><div class="line">    //创建一个有两个元素的数组</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    //nil表示数组结束的标记，并不是数组的元素</div><div class="line">    NSArray *array2 = [NSArray arrayWithObjects:@&quot;Kathy&quot;,@&quot;hello&quot;,p, nil];</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;, array2);</div><div class="line">    </div><div class="line">    //编译器新特性</div><div class="line">    NSArray *array3 = @[@&quot;kathy&quot;,@&quot;hello&quot;, p];</div><div class="line">    </div><div class="line">    //访问到数组中某下标对应的元素</div><div class="line">    NSLog(@&quot;数组的第一个元素是：%@&quot;,[array3 objectAtIndex:0]);</div><div class="line">    </div><div class="line">    //新语法a[0]</div><div class="line">    NSLog(@&quot;数组的第一个元素是：%@&quot;,array3[0]);</div><div class="line">    </div><div class="line">    //字符串分割的结果保存在数组中</div><div class="line">    NSString *str = @&quot;086-135880-99765&quot;;</div><div class="line">    NSArray *array4 = [str componentsSeparatedByString:@&quot;-&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;, array4);</div><div class="line">    </div><div class="line">    //是否包含</div><div class="line">    BOOL isContain = [array containsObject:@&quot;sunkeqiang&quot;];</div><div class="line">    NSLog(@&quot;%d&quot;,isContain);</div><div class="line">    </div><div class="line">    //某个值得索引</div><div class="line">    NSUInteger index = [array indexOfObject:@&quot;xuzhonglin&quot;];</div><div class="line">    NSLog(@&quot;%li&quot;,index);</div><div class="line">    </div><div class="line">    NSString *str = [array componentsJoinedByString:@&quot;-&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;,str);</div><div class="line">    </div><div class="line">    //最后一个</div><div class="line">    NSString *lastStr = [array lastObject];</div><div class="line">    NSLog(@&quot;%@&quot;,lastStr);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//数组的遍历</div><div class="line">void arrayEnumerate(void) &#123;</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    p.age = 10;</div><div class="line">    </div><div class="line">    NSArray *array = @[p, @&quot;kathy&quot;, @&quot;hi&quot;];</div><div class="line">    </div><div class="line">    //1.最直观的方法</div><div class="line">    for (NSUInteger i = 0; i &lt; array.count; i++) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, array[i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //2.快速遍历</div><div class="line">    for (id obj in array) &#123;</div><div class="line">        NSUInteger i = [array indexOfObject:obj];</div><div class="line">        NSLog(@&quot;%@&quot;, obj);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //3.block遍历</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    //int a[5] = &#123;1,2,3,4,5&#125;;</div><div class="line">    //OC数组只能存放OC对象，不能存放基本类型的数据，不能存放结构体变量，也不能存放nil。</div><div class="line">    //arrayCreate();</div><div class="line">    arrayEnumerate();</div><div class="line">    </div><div class="line">     NSArray *array2 = @[@&quot;zhangsan&quot;,@&quot;lisi&quot;,@&quot;wangwu&quot;,@&quot;zhaoliu&quot;,@&quot;hanba&quot;];</div><div class="line">    [array2 writeToFile:@&quot;/Users/kanzhetaiyangchishaobing/Desktop/1.txt&quot;  atomically:NO];</div><div class="line">    </div><div class="line">    NSArray *array3 = [NSArray arrayWithContentsOfFile:@&quot;/Users/kanzhetaiyangchishaobing/Desktop/1.txt&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;,array3);</div><div class="line"></div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>其中的block遍历</strong></p>
<p>首先是最基本的运用形式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//基于 块（block） 结构的遍历数组方法  enumerate:列举，数</div><div class="line"></div><div class="line">    //参数介绍： obj:值  idx:索引  stop：停止遍历</div><div class="line"></div><div class="line">    NSArray *arr1 = @[@&quot;好&quot;, @&quot;好&quot;, @&quot;学&quot;, @&quot;习&quot;, @&quot;天&quot;, @&quot;天&quot;, @&quot;向&quot;,@&quot;上&quot;];</div><div class="line"></div><div class="line">    [arr1 enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        //NSLog(@&quot;输出基于 块（block） 结构的遍历数组方法数组中的值.......%@&quot;, obj);</div><div class="line"></div><div class="line">        if ([obj isEqualToString:@&quot;习&quot;]) &#123;</div><div class="line"></div><div class="line">            *stop = YES;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    //基于 块（block） 结构的遍历字典方法，字典是无序的，每次值的顺序是不固定的  enumerate:列举，数</div><div class="line"></div><div class="line">    //参数介绍： key:键  obj：值  stop：停止遍历</div><div class="line"></div><div class="line">    NSDictionary *dict1 = @&#123;@&quot;1&quot;:@&quot;好好&quot;, @&quot;2&quot;:@&quot;学习&quot;, @&quot;3&quot;:@&quot;天天&quot;,@&quot;4&quot;:@&quot;向上&quot;&#125;;</div><div class="line"></div><div class="line">    [dict1 enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        //NSLog(@&quot;输出基于 块（block） 结构的遍历字典方法字典中的值........%@&quot;, obj);</div><div class="line"></div><div class="line">        if ([obj isEqualToString:@&quot;向上&quot;]) &#123;</div><div class="line"></div><div class="line">            *stop = YES;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;];</div><div class="line"></div><div class="line">若已知collection里对象的数据类型，可以修改块签名，知道对象的精确类型后，编译器就可以检测开发者是否调用了该对象所不具有的方法，并在发现问题时报错。</div><div class="line"></div><div class="line">如代码，直接把key和value的类型修改成NSString类型。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//基于 块（block） 结构的遍历字典，如果知道字典中的键、值类型，可以修改块儿中的键、值类型的方法，字典是无序的，每次值的顺序是不固定的  enumerate:列举，数</div><div class="line"></div><div class="line">    //参数介绍： key:键  obj：值  stop：停止遍历</div><div class="line"></div><div class="line">    NSDictionary *dict2 = @&#123;@&quot;1&quot;:@&quot;好好&quot;, @&quot;2&quot;:@&quot;学习&quot;, @&quot;3&quot;:@&quot;天天&quot;,@&quot;4&quot;:@&quot;向上&quot;&#125;;</div><div class="line"></div><div class="line">    [dict2 enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString *obj, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        //NSLog(@&quot;基于 块（block） 结构的遍历字典，修改键、值类型的方法字典中的值........%@&quot;, obj);</div><div class="line"></div><div class="line">        if ([obj isEqualToString:@&quot;向上&quot;]) &#123;</div><div class="line"></div><div class="line">            *stop = YES;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//基于 块（block） 结构的 反向 遍历数组方法  enumerate:列举，数   多添加一个参数：NSEnumerationReverse：Reverse：相反，</div><div class="line"></div><div class="line">    //参数介绍： obj:值  idx:索引  stop：停止遍历</div><div class="line"></div><div class="line">    NSArray *arr2 = @[@&quot;好&quot;, @&quot;好&quot;, @&quot;学&quot;, @&quot;习&quot;, @&quot;天&quot;, @&quot;天&quot;, @&quot;向&quot;,@&quot;上&quot;];</div><div class="line"></div><div class="line">    [arr2 enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(NSString *obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        //NSLog(@&quot;基于 块（block） 结构的 反向 遍历数组方法数组中的值.......%@&quot;, obj);</div><div class="line"></div><div class="line">        if ([obj isEqualToString:@&quot;习&quot;]) &#123;</div><div class="line"></div><div class="line">            *stop = YES;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//基于 块（block） 结构的 并发 遍历数组方法  enumerate:列举，数  Concurrent：同时发生的</div><div class="line"></div><div class="line">    //参数是：NSEnumerationConcurrent，也就是可以同时遍历collection中的几个元素，具体数量根据系统资源而定</div><div class="line"></div><div class="line">    //参数介绍： obj:值  idx:索引  stop：停止遍历</div><div class="line"></div><div class="line">    NSArray *arr3 = @[@&quot;好&quot;, @&quot;好&quot;, @&quot;学&quot;, @&quot;习&quot;, @&quot;天&quot;, @&quot;天&quot;, @&quot;向&quot;,@&quot;上&quot;];</div><div class="line"></div><div class="line">    NSMutableArray *newArr = [NSMutableArray arrayWithArray:arr3];</div><div class="line"></div><div class="line">    [newArr enumerateObjectsWithOptions:NSEnumerationConcurrent usingBlock:^(NSString *obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line"></div><div class="line">        obj = [NSString stringWithFormat:@&quot;_%@&quot;, obj];</div><div class="line"></div><div class="line">        [newArr replaceObjectAtIndex:idx withObject:obj];</div><div class="line"></div><div class="line">        NSLog(@&quot;基于 块（block） 结构的 并发 遍历数组方法数组中的值.......%@&quot;, obj);</div><div class="line"></div><div class="line">//        if ([obj isEqualToString:@&quot;_向&quot;]) &#123;</div><div class="line"></div><div class="line">//            *stop = YES;</div><div class="line"></div><div class="line">//        &#125;</div><div class="line"></div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>​</p>
<p><strong>block遍历优缺点总结：</strong></p>
<ul>
<li><p>优点：</p>
<p>1、可以完美实现for循环的所有功能；</p>
<p>2、可以方便获取集合中的每一项元素；</p>
<p>3、提供了循环遍历的参数，NSEnumerationReverse用来实现倒序循环。NSEnumerationConcurrent用来实现并发遍历，两个参数可以同时使用；</p>
<p>4、这种循环方式效率高，能够提升程序性能，开发者可以专注于业务逻辑，而不必担心内存和线程的问题；</p>
<p>5、当开启NSEnumerationConcurrent选项时，可以实现for循环和快速遍历无法轻易实现的并发循环功能，系统底层会通过GCD处理并发事宜，这样可以充分利用系统和硬件资源，达到最优的遍历效果；</p>
<p>6、可以修改块签名，当我们已经明确集合中的元素类型时，可以把默认的签名id类型修改成已知类型，比如常见的NSString，这样既可以节省系统资源开销，也可以防止误向对象发送不存在的方法是引起的崩溃。</p>
</li>
<li><p>缺点：</p>
<p>1、很多开发者不知道这种遍历方式；</p>
<p>2、这里使用了block，需要注意在block里容易引起的保留环问题，比如使用self调用方法时，把self转化成若引用即可打破保留环。如：<strong>weak </strong>typeof(self)weakSelf = self 或者 __weak MyController *weakSelf = self; 在block里使用weakSelf即可。</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<p>使用基于块的遍历时是可以修改遍历的元素的，不会导致崩溃，但是如果要删除遍历的元素会导致后面的元素无法遍历而崩溃，解决办法有2种，1、一种是复制一份原集合的副本，对副本进行操作，找出所要操作的元素后再处理原集合；2、使用反向遍历，反向遍历删除元素后不会导致崩溃。</p>
<p>​</p>
</li>
<li><p>NSDictionary</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">void dictionaryCreate(void) &#123;</div><div class="line">    //创建字典里面仅有一个键值对</div><div class="line">    NSDictionary *dic = [NSDictionary dictionaryWithObject:@&quot;kathy&quot; forKey:@&quot;name&quot;];</div><div class="line">    NSLog(@&quot;%@&quot;, dic);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        dictionaryCreate();</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>NSNumber和NSValue</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">void number(void) &#123;</div><div class="line">    //把基本类型的数据包装OC对象</div><div class="line">    NSNumber *num = [NSNumber numberWithInt:20];</div><div class="line">    NSDictionary *person = @&#123;@&quot;name&quot; : @&quot;zhangsan&quot;,</div><div class="line">                             @&quot;age&quot; : num&#125;;</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;, person);</div><div class="line">    NSNumber *num2 = person[@&quot;age&quot;];</div><div class="line">    //把NSNumber对象转成基本类型数据</div><div class="line">    NSLog(@&quot;%i&quot;, [num2 intValue]);</div><div class="line">    </div><div class="line">    //更为简单的方法把基本类型数据包装成OC对象,直接在基本类型数据前加@就可以把它包装成一个OC对象</div><div class="line">    NSArray *array = @[@1, @2];</div><div class="line">    </div><div class="line">    //    @15.2</div><div class="line">    //    @YES</div><div class="line">    //    @&apos;a&apos;</div><div class="line">    //对于基本类型的变量，不能前面直接加@,编译器会为是一个关键字，需要加括号。</div><div class="line">    int age = 10;</div><div class="line">    NSLog(@&quot;%@&quot;, @(age));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>int main(int argc, const char * argv[]) {<br>​      </p>
<pre><code>//NSValue--&gt;NSNumber
//NSValue中提供了把常用结构体转化成OC对象的方法
CGPoint p1 = CGPointMake(0, 1);
CGRect r1 = CGRectMake(0, 0, 100, 100);

NSValue *value1 = [NSValue valueWithPoint:p1];
NSValue *value2 = [NSValue valueWithRect:r1];

//NSValue--&gt;结构体变量
CGPoint p3 = [value1 pointValue];

NSArray *array = @[value1, value2];
NSLog(@&quot;%@&quot;, array);
</code></pre></li>
</ul>
<p>​<br>      return 0;<br>  }</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  ​</div><div class="line"></div><div class="line">- 异常处理</div><div class="line"></div><div class="line">  ```objective-c</div><div class="line">  #import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">  int main(int argc, const char * argv[]) &#123;</div><div class="line">      </div><div class="line">      @try &#123;</div><div class="line">          //有可能有问题的代码段会写在try块中</div><div class="line">          NSArray *array = [NSArray array];</div><div class="line">          </div><div class="line">          //id obj = [array objectAtIndex:3];</div><div class="line">      &#125;</div><div class="line">      @catch (NSException *exception)&#123;</div><div class="line">          //如果有异常情况发生，会执行Catch块中的内容，把错误信息包装成一个NSException对象。</div><div class="line">          NSLog(@&quot;------:%@&quot;, exception);</div><div class="line">      &#125;</div><div class="line">      @finally &#123;</div><div class="line">          //不管是否有异常，都会执行此代码段</div><div class="line">          NSLog(@&quot;finally&quot;);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      return 0;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  ​</p>
<ul>
<li><p>NSDate</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        //创建一个当前时间点的日期对象,格林威治时间0时区的时间</div><div class="line">        NSDate *date = [NSDate date];</div><div class="line">        NSLog(@&quot;%@&quot;, date);</div><div class="line">        NSDate *date1 = [NSDate dateWithTimeIntervalSinceNow:-24*60*60];</div><div class="line">        NSLog(@&quot;%@&quot;, date1);</div><div class="line">        </div><div class="line">        //获取时间戳</div><div class="line">        NSTimeInterval time = [date timeIntervalSince1970];</div><div class="line">        NSLog(@&quot;%lf&quot;, time);</div><div class="line">        </div><div class="line">        //日期格式化</div><div class="line">        //2015-05-09 13:10:10</div><div class="line">        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</div><div class="line">        formatter.dateFormat = @&quot;yyyy/MM/dd HH:mm:ss&quot;;</div><div class="line">        NSTimeZone *timeZone = [[NSTimeZone alloc] initWithName:@&quot;America/New_York&quot;];</div><div class="line">        formatter.timeZone = timeZone;</div><div class="line">        NSString *dateString = [formatter stringFromDate:date];</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;, dateString);</div><div class="line">        </div><div class="line">        NSArray *zoneNames = [NSTimeZone knownTimeZoneNames];</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;, zoneNames);</div><div class="line">        </div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>下面做个小练习</p>
<p>定义一个球类，有颜色属性（只有黑白两种颜色）。生成30个小球（颜色随机生成），放入数组中，从此数组中拿出前15个小球，放入另一个数组中，并打印出此数组中各小球的颜色。</p>
<p>创建一个Ball类</p>
<p>Ball.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">typedef enum &#123;</div><div class="line">    </div><div class="line">    Black,</div><div class="line">    White</div><div class="line">    </div><div class="line">&#125; Color;</div><div class="line"></div><div class="line">@interface Ball : NSObject</div><div class="line">&#123;</div><div class="line">    Color _color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@property Color color;</p>
</li>
</ul>
<ul>
<li>(id)ball;</li>
</ul>
<p>  @end</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Ball.m</div><div class="line"></div><div class="line">```objective-c</div><div class="line">#import &quot;Ball.h&quot;</div><div class="line"></div><div class="line">@implementation Ball</div><div class="line"></div><div class="line">+ (id)ball &#123;</div><div class="line">    Ball *ball = [[Ball alloc] init];</div><div class="line">    ball.color = arc4random() % 2 ? White : Black;</div><div class="line">    </div><div class="line">    return ball;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)description &#123;</div><div class="line">    </div><div class="line">//    NSString *ballColor = nil;</div><div class="line">//    if (self.color == White) &#123;</div><div class="line">//        ballColor = @&quot;黑色的&quot;;</div><div class="line">//    &#125;</div><div class="line">//    else &#123;</div><div class="line">//        ballColor = @&quot;白色的&quot;;</div><div class="line">//    &#125;</div><div class="line">//    return [NSString stringWithFormat:@&quot;小球的颜色是%@&quot;, ballColor];</div><div class="line">    return [NSString stringWithFormat:@&quot;%@&quot;, self.color ? @&quot;这个小球是白色的&quot;: @&quot;这个小球是黑色的&quot;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>  主函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;Ball.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">int main(int argc, const char * argv[])</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    NSMutableArray *ballArray = [NSMutableArray arrayWithCapacity:30];</div><div class="line">    </div><div class="line">    for (NSUInteger i = 0; i &lt; 30; i++) &#123;</div><div class="line">        [ballArray addObject:[Ball ball]];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSRange range = NSMakeRange(0, 15);</div><div class="line">    NSArray *ballSubArray = [ballArray subarrayWithRange:range];</div><div class="line">    </div><div class="line">    for (Ball* obj in ballSubArray) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, obj);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  ​</p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NSObject </tag>
            
            <tag> 结构体 </tag>
            
            <tag> NSString </tag>
            
            <tag> NSMutableString </tag>
            
            <tag> NSArray </tag>
            
            <tag> NSDictionary </tag>
            
            <tag> NSNumber </tag>
            
            <tag> NSValue </tag>
            
            <tag> NSDate </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> try </tag>
            
            <tag> catch </tag>
            
            <tag> finally </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[定时器的用法总结]]></title>
      <url>http://yoursite.com/2017/01/07/%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul>
<li><p>初始化方法：有五种初始化方法，分别是</p>
<p>(1)  + (NSTimer <em>)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation </em>)invocation repeats:(BOOL)yesOrNo;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    //初始化一个Invocation对象</div><div class="line">    NSInvocation * invo = [NSInvocation invocationWithMethodSignature:[[self class] instanceMethodSignatureForSelector:@selector(init)]];</div><div class="line">    [invo setTarget:self];</div><div class="line">    [invo setSelector:@selector(myLog)];</div><div class="line">    NSTimer * timer = [NSTimer timerWithTimeInterval:1 invocation:invo repeats:YES];</div><div class="line">    //加入主循环池中</div><div class="line">    [[NSRunLoop mainRunLoop]addTimer:timer forMode:NSDefaultRunLoopMode];</div><div class="line">    //开始循环</div><div class="line">    [timer fire];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<p>  (2) + (NSTimer <em>)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation </em>)invocation repeats:(BOOL)yesOrNo;</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSTimer * timer = [NSTimer scheduledTimerWithTimeInterval:1 invocation:invo repeats:YES];</div></pre></td></tr></table></figure>
<p>  (3) + (NSTimer *)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSTimer * timer = [NSTimer timerWithTimeInterval:1 target:self selector:@selector(myLog) userInfo:nil repeats:NO]</div></pre></td></tr></table></figure>
<p>  (4) + (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSTimer * timer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(myLog:) userInfo:@&quot;123&quot; repeats:YES]</div></pre></td></tr></table></figure>
<p>  (5) - (instancetype)initWithFireDate:(NSDate *)date interval:(NSTimeInterval)ti target:(id)t selector:(SEL)s userInfo:(id)ui repeats:(BOOL)rep </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSTimer * timer = [[NSTimer alloc]initWithFireDate:[NSDate distantPast] interval:1 target:self selector:@selector(myLog:) userInfo:nil repeats:YES];</div><div class="line">   [[NSRunLoop mainRunLoop]addTimer:timer forMode:NSDefaultRunLoopMode];</div></pre></td></tr></table></figure>
<p>  <strong>注意：五种初始化方法的异同：</strong></p>
<ul>
<li><p>参数repeats是指定是否循环执行，YES将循环，NO将只执行一次。</p>
</li>
<li><p>timerWithTimeInterval这两个类方法创建出来的对象如果不用 addTimer: forMode方法手动加入主循环池中，将不会循环执行。并且如果不手动调用fair，则定时器不会启动。</p>
</li>
<li><p>scheduledTimerWithTimeInterval这两个方法不需要手动调用fair，会自动执行，并且自动加入主循环池。</p>
</li>
<li><p>init方法需要手动加入循环池，它会在设定的启动时间启动。</p>
<p>​</p>
</li>
</ul>
<ul>
<li><p>成员变量</p>
<p><code>@property (copy) NSDate *fireDate;</code></p>
<p>这是设置定时器的启动时间，常用来管理定时器的启动与停止</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//启动定时器</div><div class="line"> timer.fireDate = [NSDate distantPast];</div><div class="line"> //停止定时器</div><div class="line"> timer.fireDate = [NSDate distantFuture];</div></pre></td></tr></table></figure>
<p><code>@property (readonly) NSTimeInterval timeInterval;</code></p>
<p>这个是一个只读属性，获取定时器调用间隔时间。</p>
<p><code>@property NSTimeInterval tolerance;</code></p>
<p>这是7.0之后新增的一个属性，因为NSTimer并不完全精准，通过这个值设置误差范围。</p>
<p><code>@property  (readonly, getter=isValid) BOOL valid;</code></p>
<p>获取定时器是否有效</p>
<p><code>@property (readonly, retain) id userInfo;</code></p>
<p>获取参数信息</p>
</li>
<li><p>关于内存释放</p>
<p>如果我们启动了一个定时器，在某个界面释放前，将这个定时器停止，甚至置为nil，都不能是这个界面释放，原因是系统的循环池中还保有这个对象。所以我们需要这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">-(void)dealloc&#123;</div><div class="line">    NSLog(@&quot;dealloc:%@&quot;,[self class]);</div><div class="line">&#125;</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    timer= [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(myLog:) userInfo:nil repeats:YES];</div><div class="line">    UIButton *btn = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 100, 100)];</div><div class="line">    btn.backgroundColor=[UIColor redColor];</div><div class="line">    [btn addTarget:self action:@selector(btn) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [self.view addSubview:btn];</div><div class="line">&#125;</div><div class="line">-(void)btn&#123;</div><div class="line">    if (timer.isValid) &#123;</div><div class="line">        [timer invalidate];</div><div class="line">    &#125;</div><div class="line">    timer=nil;</div><div class="line">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在官方文档中我们可以看到 [timer invalidate]是唯一的方法将定时器从循环池中移除。</p>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 定时器 </tag>
            
            <tag> NSTimer </tag>
            
            <tag> NSRunLoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分类的使用的注意点]]></title>
      <url>http://yoursite.com/2017/01/07/%E5%88%86%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<ul>
<li><p>分类</p>
<ul>
<li><p>分类的作用：</p>
<p>在不修改原始类模型的基础上，给某个类扩充方法。分类提供简单的方式将类的定义模块化到相应的分类中，不需要创建子类就可以扩充方法。</p>
</li>
<li><p>分类的语法：</p>
<p>分类的声明</p>
<p> @interface 原始类名 (分类名)</p>
<p> //扩充方法的声明</p>
<p> @end</p>
<p> 分类的实现</p>
<p> @implenmentation 原始类名（分类名）</p>
<p> //扩充方法的实现</p>
<p> @end</p>
<a id="more"></a></li>
<li><p>分类思想的好处</p>
<p>使一个庞大的类可以分功能模块进行开发，可以分多人开发，更有利于团队合作。</p>
</li>
<li><p>分类命名的规则</p>
<p>分类名一般为模块的功能。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>分类使用的注意要点</p>
<p>(1) 分类中不能扩充成员变量</p>
<p>(2) 在分类的方法中可以访问到原始类中定义的成员变量</p>
<p>(3) 分类中允许重新实现原始类中的方法，但是会覆盖掉原始类的中方法，导致其无法再使用，开发不建议在分类中重新实现原始类中的方法。</p>
<p>(4) 当原始类，不同的分类中有相同的方法时，遵循下列原则：</p>
<p> 方法调用的优先顺序： 分类（最后参与编译的分类优先）–&gt;原始类。</p>
<p>​</p>
</li>
</ul>
<ul>
<li><p>延展</p>
<ul>
<li><p>1.本质：</p>
<p>延展就是分类，但是只有一个@interface，方法的实现在原始类中进行</p>
</li>
<li><p>2.作用</p>
<p>（1）最初时设计的目的是在.m声明所有的私有方法，使当前类的公有方法和私有方法区分开来，使程序更规范。</p>
<p>（2）现在也可以在.h中加入延展，使类的方法按照功能模块进行区分，方便阅读和查找。Foundation框架中经常使用此种用法。</p>
</li>
</ul>
</li>
</ul>
<pre><code>​
</code></pre><p><strong>下面简单举个例子</strong></p>
<p>创建一个Person类</p>
<p>Person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line">&#123;</div><div class="line">    NSInteger _age;</div><div class="line">    NSArray *_array;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@property NSInteger age;</div></pre></td></tr></table></figure>
<p>Person.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Person_p4.h&quot;</div><div class="line">//延展的作用：作私有方法的声明。在原始类中实现私有方法。</div><div class="line">//延展的本质就是分类</div><div class="line">@interface Person ()</div><div class="line">- (void)_showInfo;</div><div class="line">- (void)_demo;</div><div class="line">@end</div><div class="line"></div><div class="line">@interface Person ()</div><div class="line"></div><div class="line">//私有方法2</div><div class="line">//私有方法3</div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@implementation Person</div><div class="line"></div><div class="line">- (void)work &#123;</div><div class="line">    NSLog(@&quot;我在认真工作&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//私有方法的命名规则：方法名前加下划线</div><div class="line">- (void)_showInfo &#123;</div><div class="line">    NSLog(@&quot;我的信息是....&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//私有方法1</div><div class="line"></div><div class="line">- (void)_demo &#123;</div><div class="line">    NSLog(@&quot;demo&quot;);</div><div class="line">&#125;</div><div class="line">//私有方法2</div><div class="line"></div><div class="line">- (void)shabi &#123;</div><div class="line">    NSLog(@&quot;asdasd&quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>创建一个Person的延展</p>
<p>Person_p4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">//新建一个延展，只有.h文件，其中做方法的声明</div><div class="line">@interface Person ()</div><div class="line">- (void)shabi;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>创建一个Person的分类</p>
<p>Person+Eat.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@interface Person (Eat)</div><div class="line">//分类中不能扩充成员变量</div><div class="line">//&#123;</div><div class="line">//    NSInteger _count;</div><div class="line">//&#125;</div><div class="line"></div><div class="line">- (void)eat;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Person+Eat.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person+Eat.h&quot;</div><div class="line"></div><div class="line">@implementation Person (Eat)</div><div class="line">- (void)eat &#123;</div><div class="line">    NSLog(@&quot;年龄是%li的人在使劲吃饭&quot;,_age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)work &#123;</div><div class="line">   // [self work];</div><div class="line">    NSLog(@&quot;Eat work&quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>创建另一个Person的分类</p>
<p>Person+Sleep.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@interface Person (Sleep)</div><div class="line">- (void)sleep;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>Person+Sleep.m</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#import &quot;Person+Sleep.h&quot;</div><div class="line"></div><div class="line">@implementation Person (Sleep)</div><div class="line">- (void)sleep &#123;</div><div class="line">    NSLog(@&quot;我在休息&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)work &#123;</div><div class="line">    //[self work];</div><div class="line">    NSLog(@&quot;sleep work&quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后在主程序中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;Person+Eat.h&quot;</div><div class="line">#import &quot;Person+Sleep.h&quot;</div><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Person_p4.h&quot;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    p.age = 10;</div><div class="line"></div><div class="line">    [p shabi];</div><div class="line">    [p sleep];</div><div class="line">    [p eat];</div><div class="line">    [p work];</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2017-01-07 22:03:19.480 02-分类中需要注意的问题[4824:111908] asdasd</div><div class="line">2017-01-07 22:03:19.482 02-分类中需要注意的问题[4824:111908] 我在休息</div><div class="line">2017-01-07 22:03:19.482 02-分类中需要注意的问题[4824:111908] 年龄是10的人在使劲吃饭</div><div class="line">2017-01-07 22:03:19.482 02-分类中需要注意的问题[4824:111908] sleep work</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分类 </tag>
            
            <tag> 延展 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5新手教学-表单（表单-表单元素）]]></title>
      <url>http://yoursite.com/2016/12/26/HTML5%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%A6-%E8%A1%A8%E5%8D%95%EF%BC%88%E8%A1%A8%E5%8D%95-%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%EF%BC%89/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单-表单元素（兼容性不是很好很少用）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">    姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">    地区: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"area"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--datalist需要和list属性一起使用。datalist里面的option注意一定要写在value里面，写在两个标签之间的会显示在右边--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">   课程： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"course"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"course"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"python"</span>&gt;</span>p<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"php"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"photoshop"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"软件工程"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--请求服务器的时候，公钥和私钥的问题</span></div><div class="line">用户将信息生成公钥和私钥，将私钥和信息一起进行二次加密，然后发给服务器，服务器用公钥解密。</div><div class="line">其中公钥和私钥是成对存在的。只能用对应的公钥才能解开对应的私钥</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">    加密类型：<span class="tag">&lt;<span class="name">keygen</span> <span class="attr">name</span>=<span class="string">"security"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--生成公钥--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">   结果：<span class="tag">&lt;<span class="name">output</span>&gt;</span>一些结果<span class="tag">&lt;/<span class="name">output</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--和span差不多--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">    度量器：<span class="tag">&lt;<span class="name">meter</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">low</span>=<span class="string">"60"</span> <span class="attr">high</span>=<span class="string">"80"</span> <span class="attr">value</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></div><div class="line">    度量器：<span class="tag">&lt;<span class="name">meter</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">low</span>=<span class="string">"60"</span> <span class="attr">high</span>=<span class="string">"80"</span> <span class="attr">value</span>=<span class="string">"70"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></div><div class="line">    度量器：<span class="tag">&lt;<span class="name">meter</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">low</span>=<span class="string">"60"</span> <span class="attr">high</span>=<span class="string">"80"</span> <span class="attr">value</span>=<span class="string">"90"</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--low和high将颜色分为三类，根据value的值--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"保存"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> datalist </tag>
            
            <tag> keygen </tag>
            
            <tag> output </tag>
            
            <tag> meter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发笔记-OC语言语法注意点]]></title>
      <url>http://yoursite.com/2016/12/25/iOS%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-OC%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h4 id="Objective-C是面向对象的语言，专门为iOS开发所设计，下面我就自己所学过程中遇到的注意点来告诉大家，OC（下面Objective-C的简写）语言的一些重点和注意点。"><a href="#Objective-C是面向对象的语言，专门为iOS开发所设计，下面我就自己所学过程中遇到的注意点来告诉大家，OC（下面Objective-C的简写）语言的一些重点和注意点。" class="headerlink" title="Objective-C是面向对象的语言，专门为iOS开发所设计，下面我就自己所学过程中遇到的注意点来告诉大家，OC（下面Objective-C的简写）语言的一些重点和注意点。"></a>Objective-C是面向对象的语言，专门为iOS开发所设计，下面我就自己所学过程中遇到的注意点来告诉大家，OC（下面Objective-C的简写）语言的一些重点和注意点。</h4><ul>
<li><p>self</p>
<ul>
<li>self的定义：</li>
</ul>
<p>（1）self是方法中一个隐藏的形参，它是一个指针，谁调用了当前方法，self就指向谁。</p>
<p>（2）self出现在对象方法中，其指向了调用当前方法的实例对象。</p>
<p>（3）self出现在类方法中，其指向了当前类。</p>
<ul>
<li>self的作用</li>
</ul>
<p>（1）当方法中的局部变量和实例变量重名时，使用Self可以进行区分。</p>
<p>（2） 在方法中使用[self 方法名]来调用其它的方法，实现代码的复用。</p>
<a id="more"></a>
<ul>
<li>self使用注意的要点</li>
</ul>
<p>（1）不能在方法中使用Self来调用当前方法，会引发死循环。</p>
<p>（2）类方法不能使用self来调用对象方法，对象方法中不能使用Self来调用类方法。</p>
<p>（3）在类方法和对象方法中都不能使用self来调用普通函数。</p>
<p>（4）self只能出现在方法（类方法和对象方法）中。</p>
<p>​</p>
</li>
<li><p>property和synthesize</p>
<ul>
<li>Xcode4.4之前</li>
</ul>
<p>（1）@property自动生成set和get方法的声明</p>
<p>​           <code>@propterty NSInteger age;</code></p>
<p>（2）@synthesize自动生成Set和get方法的实现</p>
<p>​            <code>@synthesize age = _age;</code></p>
<p>​            左边的age表示Set和get方法名这里的age。</p>
<p>​            右边的_age表示要在set方法中对_age这个成员进行设置，在get方法中获取_age这个成员变量。</p>
<ul>
<li><p>Xcode4.4之后</p>
<pre><code>@property可以自动生成Set方法和get方法的声明和实现
</code></pre></li>
</ul>
<p>​         （1）自动生成成员变量_age</p>
<p>​         （2）自动生成get和set方法的声明</p>
<p>​         （3）自动生成get和set方法的实现</p>
<ul>
<li>规则：</li>
</ul>
<p>​     （1）如果手动实现了set方法，则编译器只会自动生成get方法。</p>
<p>​     （2）反之也相同。</p>
<p>​     （3）如果手动实现了set方法和get方法，此时编译器不会自动生成成员变量。</p>
<ul>
<li><p>利用@property的最佳方法</p>
<p>   （1）声明带下划线的成员变量</p>
<p>   （2）利用@property生成set和get方法的声明和实现。</p>
</li>
</ul>
</li>
<li><p>继承</p>
<ul>
<li><p>我们为什么要使用继承呢？</p>
<ol>
<li>建立类与类之间关联。</li>
<li>子类继承父类的所有实例变量和方法，避免了重复代码的出现，实现代码复用。</li>
</ol>
</li>
<li><p>NSObject类：基类</p>
<ol>
<li><p>OC中所有的类都必须直接或者间接的继承自NSObject，因为NSObject这个类中定义了很多常用的方法。如new, init，alloc</p>
</li>
<li><p>每个实例对象中的isa指针也是继承自NSObject.</p>
</li>
</ol>
</li>
<li><p>继承使用注意要点</p>
<ol>
<li>子类中不能定义和父类相同名称的实例变量</li>
<li>子类可以重写父类的方法，子类的方法必须和父类方法的原型完全一致，通过子类实例对象去调用该方法时，优先调用子类重写的方法，如果子类中没有重写则调用父类的方法。</li>
</ol>
</li>
<li><p>继承关系的缺点</p>
<p>父类和子类的关系紧密，耦合性强，如果删除父类，则子类不能单独存在。</p>
</li>
<li><p>self在继承关系中的使用</p>
<p> 在子类方法中使用Self调用其它方法时，如果子类重写了方法，则调用子类的方法，如果没重写，则调用父类的方法。</p>
</li>
<li><p>super关键字</p>
<ol>
<li><p>当子类想保留父类的一些行为时，要强制使用super关键字来调用父类方法。</p>
</li>
<li><p>当super出现在对象方法中，会强制调用父类的对象方法。</p>
</li>
<li><p>当super出现在类方法中，会强制调用父类的类方法。</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>多态</p>
<ul>
<li><p>什么是多态</p>
<ol>
<li><p>一种类型，多种形态</p>
</li>
<li><p>在OC中表现为父类指针可以指向父类对象，也可以指向子类对象</p>
</li>
<li><p>直到运行期，才能根据父类指针实际指向的对象来确定调用哪个一类的方法，父类方法还是子类重写的方法。</p>
</li>
</ol>
</li>
<li><p>多态产生的条件</p>
<ol>
<li><p>必须有继承关系</p>
</li>
<li><p>子类要重写父类的方法</p>
</li>
<li><p>父类指针指向子类对象</p>
</li>
</ol>
</li>
<li><p>多态的好处</p>
<p> 使用多态后，可以用父类指针操纵所有的子类对象，程序的可扩展性就会增强。</p>
</li>
<li><p>多态使用的限制</p>
<p> 父类指针不能调用子类新增的方法。</p>
<p><strong>下面使用最简单的打印机的例子</strong></p>
<ol>
<li><p>父类：Printer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)print &#123;</div><div class="line">    NSLog(@&quot;打印机在打印&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>彩色打印子类：ColorPrinter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//重写父类的print方法</div><div class="line">- (void)print &#123;</div><div class="line">    NSLog(@&quot;彩色打印机打印彩色效果&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>黑白打印子类：BlackPrinter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//重写父类的print方法</div><div class="line">- (void)print &#123;</div><div class="line">    NSLog(@&quot;黑白打印机打印黑白效果&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来见证奇迹的时刻到了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Printer *printer = [BlackPrinter new];</div><div class="line">[printer print];</div></pre></td></tr></table></figure>
<p>虽然创建的对象是父类，但是初始化的时候是其中一个子类的，所以运行之后打印出来的就是子类的方法（前提是重写父类的方法，然后调用的方法也是重写的这个方法名）</p>
<p><strong>打印结果如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">黑白打印机打印黑白效果</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>import</p>
<ul>
<li><p>#import和#include的区别</p>
<ol>
<li><p>#include多次导入同一文件，会导致重复包含。</p>
<ol>
<li>#import多次导入，在第二次导入时，会自动判断之前此文件是否已被导入过，如果已经导入则不做导入操作。</li>
</ol>
</li>
<li><p>#import可以确保头文件只被导入一次。</p>
</li>
</ol>
</li>
<li><p>@class和#import的区别</p>
<p>@class告诉编译器该类是一个类名，但是这个类具体有什么样的实例变量和方法无法确定。</p>
<p> #import XXX.h是一个预处理命令，把包含的文件的全部内容插入当前文件中来。</p>
<p> 尽量在头文件中使用@class,在源文件一般使用#import。</p>
</li>
<li><p>@class的优点</p>
<p> （1）可以避免循环引用引起的嵌套包含</p>
<p> （2）如果一个工程中有多个文件#import了同一个头文件，当头文件需要修改时，所有包含了此头文件的文件都需要重新进行编译，编译效率较低，而@class不需要重新编译。</p>
</li>
</ul>
</li>
<li><p>构造方法</p>
<ul>
<li><p>子类重写构造方法的规则：</p>
<ol>
<li>一定要调用父类的init方法，初始化从父类继承过来的成员变量。</li>
<li>判断父类成员是否初始化成功，如果成功才有必要去初始化子类新增的成员变量</li>
<li>返回经过了初始后的当前实例对象self</li>
</ol>
</li>
<li><p>自定义的构造方法的规范：</p>
<ol>
<li>一定是对象方法。</li>
<li>返回值类型必须为id类型。</li>
<li>方法名以init开头，如果传参数,init后接With。</li>
</ol>
</li>
<li><p>子类对象的初始化过程：</p>
<p>首选调用NSObject类的init方法–》Person类（Student父类）的init方法–》Student类的init方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">      Student *s = [[Student alloc] init];</div></pre></td></tr></table></figure>
<p>alloc init组合：alloc:分配存储空间；init:初始化。初始化方法以init开头，如果初始化失败返回nil。</p>
</li>
</ul>
</li>
<li><p>类的本质</p>
<ul>
<li><p>类也是对象，类型为Class,也叫类对象，Person对象叫实例对象。</p>
</li>
<li><p>类就是类对象，因此可以直接用类对象来调用类方法。</p>
</li>
<li><p>获取类方法的方法</p>
<p> 1、对象方法：[p class];</p>
<p> 2、类方法：[Person class];</p>
</li>
<li><p>类的加载和初始化过程</p>
<p> 1、+ load:类对象加载后调用的方法</p>
<p> 当程序开始运行时，会加载当前项目中所有的类，加载完成后自动调用+load方法，只调用一次。</p>
<p>2、 + initialize：类对象初始化的方法。</p>
<p> 当程序中第一次使用某个类时，会调用+ initialize方法，只调用一次。</p>
</li>
<li><p>类对象加载和初始化的规则：</p>
<p>（1）先加载父类，再加载子类。</p>
<p>（2）如果使用子类实例对象，则先初始化父类对象，再初始化子类对象。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//通过对象获取类对象</div><div class="line">    Class c1 = [p1 class];//类对象在内存中只有一个，一个类对应一个类对象</div><div class="line"></div><div class="line">//通过类方法获取类对象</div><div class="line">    Class c4 = [Person class];</div><div class="line"></div><div class="line">//类就是类对象，类名就是类对象</div><div class="line">    Person *p = [[Person alloc] init];</div><div class="line">    Class c = [p class];</div></pre></td></tr></table></figure>
</li>
<li><p>description方法</p>
<ul>
<li><p>需求：想直接输出实例对象，把对象的所有成员变量的值全部一一输出。</p>
</li>
<li><p>-description方法–》决定了以%@输出一个实例对象的结果</p>
<p>（1）方法的返回值是NSString *，把这个字符串输出到屏幕上。</p>
<p>（2）NSObject类的-description方法默认返回的是&lt;类名：实例对象的内存地址&gt;</p>
<p>（3）如果想根据需求进行处理，则在当前类中重写-description方法，把所有的实例变量按照格式拼接成一个字符串输出，方便用户进行查看。</p>
</li>
<li><p>+description方法–》决定了以%@输出一个类对象的结果</p>
<p>（1）方法的返回值是NSString *，把这个字符串输出到屏幕上。</p>
<p>（2）NSObject类的+description方法默认返回的是类名。</p>
<p>（3）如果想输出其它内容，则重写类方法。</p>
</li>
</ul>
<p><strong>直接在类里面书写下面的代码，然后再输出该累的对象，然后会自动执行对象方法；同时类方法也是同样的使用方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (NSString *)description &#123;</div><div class="line">    return [NSString stringWithFormat:@&quot;age=%li,name=%@&quot;,_age,_name];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (NSString *)description &#123;</div><div class="line">    return @&quot;helloworld&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person *p = [[Person alloc] initWithAge:10 andName:@</div><div class="line">                &quot;kathy&quot;];    </div><div class="line">NSLog(@&quot;%@&quot;, p);</div><div class="line">Class c = [p class];</div><div class="line">NSLog(@&quot;%@&quot;, c);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2016-12-25 19:54:50.340 06-description方法[10195:373710] age=10,name=kathy</div><div class="line">2016-12-25 19:54:50.341 06-description方法[10195:373710] helloworld</div></pre></td></tr></table></figure>
</li>
<li><p>SEL类型</p>
<ol>
<li><p>封装成SEL类型的目的，可以通过两种方式来调用方法</p>
<p>（1）方法名直接调用</p>
<p>（2）传SEL类型的数据去找到方法的入口地址，间接调用方法。</p>
<ol>
<li>包装成selector的语法</li>
</ol>
<p>（1）无参</p>
</li>
</ol>
<p>​       [p performSelector:@selector(demo)];</p>
<p> （2）带参数的</p>
<p>​       [p performSelector:s3 withObject:@”kathy” withObject:@”13588099765”];</p>
<ol>
<li><p>OC中的私有方法：在.m在定义的方法，在.h没有声明。</p>
<p> 可以包装成selector来调用私有方法。</p>
</li>
<li><p>字符串对象转换成selector的函数</p>
<p>  SEL s = NSSelectorFromString(name);</p>
</li>
<li><p>selector的作用： </p>
<p>  本质类似于C语言的回调函数，主要用于两个对象之间的通信。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//方法名包装成一个selector数据,进行方法调用</div><div class="line">    SEL s1 = @selector(demo);</div><div class="line">    SEL s2 = @selector(demo:);</div><div class="line">    SEL s3 = @selector(setName:andTel:);</div><div class="line"></div><div class="line">//调用私有方法</div><div class="line">    [p performSelector:@selector(showInfo)];</div><div class="line">    </div><div class="line">//只知道方法名，而方法名是一个字符串，可以把字符串对象转换为一个SEL类型的数据</div><div class="line">    NSString *name = @&quot;showInfo&quot;;</div><div class="line">    SEL s = NSSelectorFromString(name);</div><div class="line">    [p performSelector:s];</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 继承 </tag>
            
            <tag> self </tag>
            
            <tag> property </tag>
            
            <tag> synthesize </tag>
            
            <tag> 多态 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5新手教学-表单（输入类型）]]></title>
      <url>http://yoursite.com/2016/12/25/HTML5%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%A6-%E8%A1%A8%E5%8D%95%EF%BC%88%E8%BE%93%E5%85%A5%E7%B1%BB%E5%9E%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">		<span class="selector-tag">label</span> &#123;</div><div class="line">			<span class="attribute">display</span>: block;</div><div class="line">		&#125;</div><div class="line">		<span class="selector-tag">input</span> &#123;</div><div class="line">			<span class="attribute">display</span>: block;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">legend</span>&gt;</span>输入类型<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"demo"</span>&gt;</span></div><div class="line">				email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				tel:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				url:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				number:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">step</span>=<span class="string">"3"</span> <span class="attr">max</span>=<span class="string">"10"</span> <span class="attr">min</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				search:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 上面的几个大胆的用，下面的带有选择的使用 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				range:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">value</span>=<span class="string">"80"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> 	</div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				color:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				time:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				date:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				datetime:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				month:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"month"</span> &gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				week:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week "</span> &gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span> 	</div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> type </tag>
            
            <tag> email </tag>
            
            <tag> tel </tag>
            
            <tag> erl </tag>
            
            <tag> number </tag>
            
            <tag> search </tag>
            
            <tag> range </tag>
            
            <tag> color </tag>
            
            <tag> time </tag>
            
            <tag> date </tag>
            
            <tag> datetime </tag>
            
            <tag> month </tag>
            
            <tag> week </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5新手教学-多媒体]]></title>
      <url>http://yoursite.com/2016/12/22/HTML5%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%A6-%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
      <content type="html"><![CDATA[<h5 id="HTML5新增的音频标签（audio）和视频标签（video），基本使用方法见下面的代码："><a href="#HTML5新增的音频标签（audio）和视频标签（video），基本使用方法见下面的代码：" class="headerlink" title="HTML5新增的音频标签（audio）和视频标签（video），基本使用方法见下面的代码："></a>HTML5新增的音频标签（audio）和视频标签（video），基本使用方法见下面的代码：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>多媒体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 音频 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"See You Again.mp3"</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- controls:页面显示音频播放器的一些控件</span></div><div class="line">	autoplay:页面显示后立即播放</div><div class="line">	loop:循环播放几次 --&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 有些浏览器不支持音频格式的采用下面方法来兼容 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"See You Again.mp3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"See You Again.wav"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"See You Again.ogg"</span>&gt;</span></div><div class="line">		如果浏览器不支持这个H5标签的话，显示这段文字</div><div class="line">	<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 视频 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- controls:页面显示视频播放器的一些控件</span></div><div class="line">	autoplay:页面显示后立即播放</div><div class="line">	loop:循环播放几次 </div><div class="line">	width:设置视频窗口宽度</div><div class="line">	height:设置视频窗口宽高度</div><div class="line">	但是宽高会自动调整。因为视频不会拉伸，所以浏览器会按照视频的比例有所调整，不像img标签，图片标签会拉伸</div><div class="line">	--&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 有些浏览器不支持视频格式的采用下面方法来兼容 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.wav"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogg"</span>&gt;</span></div><div class="line">		如果浏览器不支持这个H5标签的话，显示这段文字</div><div class="line">	<span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> audio </tag>
            
            <tag> video </tag>
            
            <tag> source </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[H5新手教学-语义化标签]]></title>
      <url>http://yoursite.com/2016/12/21/H5%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%A6-%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h5 id="HTML5其实并不是新的语言，相比于HTML来说只是多了几个新的标签，属性而已。下面的代码将首先介绍几个常用的HTML5的语义化标签。"><a href="#HTML5其实并不是新的语言，相比于HTML来说只是多了几个新的标签，属性而已。下面的代码将首先介绍几个常用的HTML5的语义化标签。" class="headerlink" title="HTML5其实并不是新的语言，相比于HTML来说只是多了几个新的标签，属性而已。下面的代码将首先介绍几个常用的HTML5的语义化标签。"></a>HTML5其实并不是新的语言，相比于HTML来说只是多了几个新的标签，属性而已。下面的代码将首先介绍几个常用的HTML5的语义化标签。</h5><h5 id="所谓语义化标签就是带有语义的标签，本质还是div和span。"><a href="#所谓语义化标签就是带有语义的标签，本质还是div和span。" class="headerlink" title="所谓语义化标签就是带有语义的标签，本质还是div和span。"></a>所谓语义化标签就是带有语义的标签，本质还是div和span。</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>语义化标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- H5增加了大量的更有意义的语义标签，更有利于搜索引擎或辅助设备来理解HTML页面内容,使用方法和普通的标签一样，并不会有什么样式 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"></div><div class="line">		<span class="selector-tag">header</span> &#123;</div><div class="line">			<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			<span class="attribute">width</span>: <span class="number">980px</span>;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="comment">/*页面居中处理*/</span></div><div class="line">			<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="selector-tag">nav</span> &#123;</div><div class="line">			<span class="attribute">background-color</span>: red;</div><div class="line">		&#125;</div><div class="line">		<span class="selector-tag">section</span> &#123;</div><div class="line">			<span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">			<span class="attribute">width</span>: <span class="number">980px</span>;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">			<span class="attribute">background-color</span>: pink;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="selector-tag">article</span> &#123;</div><div class="line">			<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">			<span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">			<span class="attribute">float</span>: left;</div><div class="line">			<span class="attribute">background-color</span>: blue;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="selector-tag">aside</span> &#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">			<span class="attribute">float</span>: right;</div><div class="line">			<span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">			<span class="attribute">background-color</span>: orange;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="selector-tag">footer</span> &#123;</div><div class="line">			<span class="attribute">text-align</span>: center;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- header:页眉 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- nav:导航栏 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- section:区块 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- article:文章 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">			主题文章</div><div class="line">			<span class="comment">&lt;!-- progress:进度条 浏览器的样式不怎么兼容，样式css也不怎么能修改--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">progress</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">value</span>=<span class="string">"70"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- aside:侧边栏 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aside</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>其他链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- footer:页脚 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">footer</span>&gt;</span>Feyddy版权所有<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 本质上新语义标签与&lt;div&gt;\&lt;span&gt;没有区别，只是其具有语义性。 --&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> header </tag>
            
            <tag> nav </tag>
            
            <tag> section </tag>
            
            <tag> article </tag>
            
            <tag> aside </tag>
            
            <tag> footer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改UITextField的光标颜色]]></title>
      <url>http://yoursite.com/2016/12/19/%E4%BF%AE%E6%94%B9UITextField%E7%9A%84%E5%85%89%E6%A0%87%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<p>有时候，我们的背景色调比较暗，因此需要亮点的光标来显示textField的输入区域。于是我们可以通过以下的方法去改变：</p>
<ul>
<li><p>通过xib来修改</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fawffco40rj20le0ba40u.jpg" alt=""></p>
</li>
<li><p>通过一句代码</p>
<p><code>textField.tintColor = [UIColor whiteColor];</code></p>
</li>
<li><p>封装一个UITextField为FDLoginRegisterTextField</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//通过xib加载</div><div class="line">- (void)awakeFromNib</div><div class="line">&#123;</div><div class="line">    //修改光标颜色</div><div class="line">    self.tintColor = [UIColor whiteColor];</div><div class="line">    self.textColor = [UIColor whiteColor];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在xib中设置类别</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fawfer71ckj20lg08yabw.jpg" alt=""></p>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UITextField修改光标颜色 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发小技巧]]></title>
      <url>http://yoursite.com/2016/12/18/iOS%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<ul>
<li>设置按钮圆角：</li>
</ul>
<p>1、利用纯代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.loginButton.layer.cornerRadius = 5;</div><div class="line">self.loginButton.layer.masksToBounds = YES;//设置按钮里面的内容也会切换成圆角(如按钮的图片）</div></pre></td></tr></table></figure>
<p>2、利用KVC</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[self.loginButton setValue:@5 forKeyPath:@&quot;layer.cornerRadius&quot;];</div><div class="line">[self.loginButton setValue:@YES forKeyPath:@&quot;layer.masksToBounds&quot;];</div></pre></td></tr></table></figure>
<p> 3、xib里面<br> <img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fauhctmivgj20lb09gtas.jpg" alt="image"></p>
<ul>
<li>UIView动画的原理以及根据约束条件来设置动画的方法（layoutIfNeeded）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">if (self.showLoginOrRegister.constant) &#123;</div><div class="line">     self.showLoginOrRegister.constant = 0;</div><div class="line">     [button setTitle:@&quot;注册帐号&quot; forState:UIControlStateNormal];</div><div class="line">&#125;else </div><div class="line">&#123;</div><div class="line">    self.showLoginOrRegister.constant = -KscreenWidth;</div><div class="line">    [button setTitle:@&quot;已有帐号？&quot; forState:UIControlStateNormal];</div><div class="line">&#125;</div><div class="line">[UIView animateWithDuration:0.25 animations:^&#123;</div><div class="line">    //强制刷新界面，然最新的约束立马刷新到UI</div><div class="line">    [self.view layoutIfNeeded];</div><div class="line">    //一般这个方法里面可以直接修改UI的frame值，这样的话才有动画效果。</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<ul>
<li><p>当前一个界面弹出了键盘，切换界面的时候，让键盘退出</p>
<p> //退出键盘</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self.view endEditing:YES];</div></pre></td></tr></table></figure>
</li>
<li><p>根据按钮的不同状态来设置不同的文字，使用xib</p>
</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fav5yq39qij20km0c80vl.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 圆角 </tag>
            
            <tag> KVC </tag>
            
            <tag> UIView动画 </tag>
            
            <tag> 退出键盘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义图上字下的Button]]></title>
      <url>http://yoursite.com/2016/12/17/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E4%B8%8A%E5%AD%97%E4%B8%8B%E7%9A%84Button/</url>
      <content type="html"><![CDATA[<p>在开发过程中，有时候系统自带的按钮风格不满足我们的需求。这个时候的最佳方法就是自定义按钮。</p>
<p>接下来，我自定义一个图片在上，文字在下的按钮。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#import &quot;FDButton.h&quot;</div><div class="line">@implementation FDButton</div><div class="line">//为了适应xib文件</div><div class="line">-(id)initWithCoder:(NSCoder *)aDecoder&#123;</div><div class="line">    if (self=[super initWithCoder:aDecoder]) &#123;</div><div class="line">        [self commonInit];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">-(id)initWithFrame:(CGRect)frame&#123;</div><div class="line">    if (self=[super initWithFrame:frame]) &#123;</div><div class="line">        [self commonInit];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">//常用属性设置</div><div class="line">-(void)commonInit&#123;</div><div class="line">    self.titleLabel.textAlignment = NSTextAlignmentCenter;</div><div class="line">    self.imageView.contentMode = UIViewContentModeScaleAspectFit;</div><div class="line">    self.titleLabel.font = [UIFont systemFontOfSize:14];</div><div class="line">&#125;</div><div class="line">//文字的尺寸位置设置</div><div class="line">-(CGRect)titleRectForContentRect:(CGRect)contentRect&#123;</div><div class="line">    CGFloat titleX = 0;</div><div class="line">    CGFloat titleY = contentRect.size.height *0.75;</div><div class="line">    CGFloat titleW = contentRect.size.width;</div><div class="line">    CGFloat titleH = contentRect.size.height - titleY;</div><div class="line">    return CGRectMake(titleX, titleY, titleW, titleH);</div><div class="line">&#125;</div><div class="line">//图片的尺寸位置设置</div><div class="line">-(CGRect)imageRectForContentRect:(CGRect)contentRect&#123;</div><div class="line">    CGFloat imageW = CGRectGetWidth(contentRect);</div><div class="line">    CGFloat imageH = contentRect.size.height * 0.7;</div><div class="line">    return CGRectMake(0, 0, imageW, imageH);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自定义button </tag>
            
            <tag> contentRect </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改状态栏样式]]></title>
      <url>http://yoursite.com/2016/12/14/%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<ul>
<li>使用UIApplication来管理<br><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1famk07qeguj20nn09y777.jpg" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在Info.plist中做了图中的配置,可能会出现以下警告信息<br><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1famk0akfupj20ys049q8c.jpg" alt=""><br><a id="more"></a></p>
<ul>
<li>使用UIViewController来管理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@implementation XMGLoginRegisterViewController</div><div class="line">- (UIStatusBarStyle)preferredStatusBarStyle</div><div class="line">&#123;</div><div class="line">    return UIStatusBarStyleLightContent;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>详情请参考：<a href="https://my.oschina.net/shede333/blog/304560" target="_blank" rel="external">https://my.oschina.net/shede333/blog/304560</a></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UIApplication </tag>
            
            <tag> 状态栏颜色 </tag>
            
            <tag> UIStatusBarStyle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文字内容换行]]></title>
      <url>http://yoursite.com/2016/12/13/%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E6%8D%A2%E8%A1%8C/</url>
      <content type="html"><![CDATA[<ul>
<li>如何让storyboard\xib中的文字内容换行<ul>
<li>快捷键: option + 回车键</li>
<li>在storyboard\xib输入\n是无法实现换行的</li>
</ul>
</li>
<li>在代码中输入\n是可以实现换行的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.label.text = @&quot;534534534\n5345345\n5345&quot;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> storyboard\xib </tag>
            
            <tag> 文字换行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[frame、bounds、contentOffset以及contentInset的认识]]></title>
      <url>http://yoursite.com/2016/12/12/frame%E3%80%81bounds%E3%80%81contentOffset%E4%BB%A5%E5%8F%8AcontentInset%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="frame和bounds的重新认识"><a href="#frame和bounds的重新认识" class="headerlink" title="frame和bounds的重新认识"></a>frame和bounds的重新认识</h3><ul>
<li>frame<ul>
<li>以<code>父控件</code> <code>内容</code>的左上角为坐标原点, 计算出的<code>控件自己</code> <code>矩形框</code>的位置和尺寸</li>
</ul>
</li>
<li>bounds<ul>
<li>以<code>控件自己</code> <code>内容</code>的左上角为坐标原点, 计算出的<code>控件自己</code> <code>矩形框</code>的位置和尺寸</li>
</ul>
</li>
<li>概括<ul>
<li>frame.size == bounds.size</li>
<li>scrollView.bounds.origin == scrollView.contentOffset<a id="more"></a>
<h3 id="bounds和frame的区别"><a href="#bounds和frame的区别" class="headerlink" title="bounds和frame的区别"></a>bounds和frame的区别</h3></li>
</ul>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1falg9mc7ywj21170va0uq.jpg" alt=""></p>
<h3 id="矩形框和内容的理解"><a href="#矩形框和内容的理解" class="headerlink" title="矩形框和内容的理解"></a>矩形框和内容的理解</h3><ul>
<li>矩形框<ul>
<li>控件自己的显示位置和尺寸</li>
</ul>
</li>
<li>内容<ul>
<li>控件内部的东西,比如它的子控件</li>
</ul>
</li>
</ul>
<h3 id="contentInset的调整"><a href="#contentInset的调整" class="headerlink" title="contentInset的调整"></a>contentInset的调整</h3><ul>
<li>默认情况下, 如果一个控制器A处在导航控制器管理中, 并且控制器A的第一个子控件是UIScrollView, 那么就会自动调整这个UIScrollView的contentInset<ul>
<li>UIEdgeInsetsMake(64, 0, 0, 0) // 有导航栏</li>
<li>UIEdgeInsetsMake(20, 0, 0, 0) // 没有导航栏</li>
</ul>
</li>
<li>默认情况下, 如果一个控制器A处在导航控制器管理中, 并且导航控制器又处在UITabBarController管理中, 并且控制器A的第一个子控件是UIScrollView, 那么就会自动调整这个UIScrollView的contentInset<ul>
<li>UIEdgeInsetsMake(64, 0, 49, 0)</li>
</ul>
</li>
<li>如何禁止上述的默认问题?</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">控制器A.automaticallyAdjustsScrollViewInsets = NO;</div></pre></td></tr></table></figure>
<p><strong>注</strong>：如果只有UITabBarController在管理而没有导航栏在管理的话，只能手动设置内容偏移量了</p>
<pre><code>- UIEdgeInsetsMake(0, 0, 49, 0)
</code></pre><h3 id="在使用UITableViewController过程中-可能会出现的错误"><a href="#在使用UITableViewController过程中-可能会出现的错误" class="headerlink" title="在使用UITableViewController过程中,可能会出现的错误"></a>在使用UITableViewController过程中,可能会出现的错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface TestTableViewController : UITableViewController</div><div class="line">@end</div><div class="line">&apos;-[UITableViewController loadView] instantiated view controller with identifier &quot;UIViewController-BYZ-38-t0r&quot; from storyboard &quot;Main&quot;, but didn&apos;t get a UITableView.&apos;</div></pre></td></tr></table></figure>
<ul>
<li>造成这个错误的原因<ul>
<li>错误地将一个UIViewController当做UITableViewController来用</li>
</ul>
</li>
<li>错误做法</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1falga4z2z7j20ny09y75i.jpg" alt=""></p>
<ul>
<li>正确做法</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1falga8qzemj20i207n0tv.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1falgabupcxj20k809yq3y.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> frame </tag>
            
            <tag> bounds </tag>
            
            <tag> contentOffset </tag>
            
            <tag> contentInset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[抽取uiview的分类来实现设置frame的简单操作]]></title>
      <url>http://yoursite.com/2016/12/11/%E6%8A%BD%E5%8F%96uiview%E7%9A%84%E5%88%86%E7%B1%BB%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%AE%BE%E7%BD%AEframe%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>在开发过程中，我们有很多地方需要设置控件的<strong>width</strong>，<strong>height</strong>等<strong>frame</strong>属性，如：<code>self.frame.size.width</code>。</p>
<p>但是这样的操作难免比较繁琐，作为一个程序员，一定要想尽办法省去不必要的代码。这样不仅能节省时间，还能愉悦心情。因此，如果我们能直接写<code>self.width</code>就可以直接设置那不是更好吗？那就需要我们抽取一个UIView类，在里面大设特设。<br><a id="more"></a></p>
<ul>
<li><p>先创建一个分类文件</p>
<ul>
<li><p>按住<strong>cmd + N</strong>，创建一个UIView的分类。<br><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1faj4w0fgp0j20k40eamyl.jpg" alt="image"></p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1faj4w3loxtj20jy0e0q3h.jpg" alt="image"></p>
</li>
<li><p>为分类设置属性和创建<strong>setter</strong>和<strong>getter</strong>方法。</p>
<ul>
<li><p>UIView+FDExtension.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">		\#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@interface UIView (FDExtension)</div><div class="line">//加上前缀fd的原因是为了不与内部或其他三方的width属性值重名，防止混乱的造成</div><div class="line">@property (nonatomic, assign) CGFloat fd_width;</div><div class="line">@property (nonatomic, assign) CGFloat fd_height;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>- UIView+FDExtension.m

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">		\#import &quot;UIView+FDExtension.h&quot;</div><div class="line">\@implementation UIView (FDExtension)</div><div class="line">\- (CGFloat)fd_height</div><div class="line">&#123;</div><div class="line">    return self.frame.size.height;</div><div class="line">&#125;</div><div class="line">\- (void)setFd_height:(CGFloat)fd_height</div><div class="line">&#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.size.height = fd_height;</div><div class="line">    self.frame = frame;</div><div class="line">&#125;</div><div class="line">\- (CGFloat)fd_width</div><div class="line">&#123;</div><div class="line">    return self.frame.size.width;</div><div class="line">&#125;</div><div class="line">\- (void)setFd_width:(CGFloat)fd_width</div><div class="line">&#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.size.width = fd_width;</div><div class="line">    self.frame = frame;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</code></pre><p>这样我们以后设置frame的宽高就不用<code>self.frame.size.width</code>，只需要<code>self.fd_width</code>就可以了。</p>
<p>不仅是宽高，其他的比如：<strong>x，y，center，top，left，right，bottom</strong>等属性的简便设置也是类似的。</p>
<p><strong>UIView+FDExtension.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@interface UIView (FDExtension)</div><div class="line">//加上前缀fd的原因是为了不与内部或其他三方的width属性值重名，防止混乱的造成</div><div class="line">@property (nonatomic, assign) CGFloat fd_width;</div><div class="line">@property (nonatomic, assign) CGFloat fd_height;</div><div class="line">@property (nonatomic, assign) CGFloat fd_x;</div><div class="line">@property (nonatomic, assign) CGFloat fd_y;</div><div class="line">@property (nonatomic, assign) CGFloat fd_centerX;</div><div class="line">@property (nonatomic, assign) CGFloat fd_centerY;</div><div class="line">@property (nonatomic, assign) CGFloat fd_right;</div><div class="line">@property (nonatomic, assign) CGFloat fd_bottom;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>UIView+FDExtension.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">\#import &quot;UIView+FDExtension.h&quot;</div><div class="line">@implementation UIView (FDExtension)</div><div class="line">- (CGFloat)fd_height</div><div class="line">&#123;</div><div class="line">    return self.frame.size.height;</div><div class="line">&#125;</div><div class="line">- (void)setFd_height:(CGFloat)fd_height</div><div class="line">&#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.size.height = fd_height;</div><div class="line">    self.frame = frame;</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_width</div><div class="line">&#123;</div><div class="line">    return self.frame.size.width;</div><div class="line">&#125;</div><div class="line">- (void)setFd_width:(CGFloat)fd_width</div><div class="line">&#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.size.width = fd_width;</div><div class="line">    self.frame = frame;</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_x</div><div class="line">&#123;</div><div class="line">    return self.frame.origin.x;</div><div class="line">&#125;</div><div class="line">- (void)setFd_x:(CGFloat)fd_x</div><div class="line">&#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.origin.x = fd_x;</div><div class="line">    self.frame = frame;</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_y</div><div class="line">&#123;</div><div class="line">    return self.frame.origin.y;</div><div class="line">&#125;</div><div class="line">- (void)setFd_y:(CGFloat)fd_y</div><div class="line">&#123;</div><div class="line">    CGRect frame = self.frame;</div><div class="line">    frame.origin.y = fd_y;</div><div class="line">    self.frame = frame;</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_centerX</div><div class="line">&#123;</div><div class="line">    return self.center.x;</div><div class="line">&#125;</div><div class="line">- (void)setFd_centerX:(CGFloat)fd_centerX</div><div class="line">&#123;</div><div class="line">    CGPoint center = self.center;</div><div class="line">    center.x = fd_centerX;</div><div class="line">    self.center = center;</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_centerY</div><div class="line">&#123;</div><div class="line">    return self.center.y;</div><div class="line">&#125;</div><div class="line">- (void)setFd_centerY:(CGFloat)fd_centerY</div><div class="line">&#123;</div><div class="line">    CGPoint center = self.center;</div><div class="line">    center.y = fd_centerY;</div><div class="line">    self.center = center;</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_right</div><div class="line">&#123;</div><div class="line">    //    return self.xmg_x + self.xmg_width;</div><div class="line">    return CGRectGetMaxX(self.frame);</div><div class="line">&#125;</div><div class="line">- (CGFloat)fd_bottom</div><div class="line">&#123;</div><div class="line">    //    return self.xmg_y + self.xmg_height;</div><div class="line">    return CGRectGetMaxY(self.frame);</div><div class="line">&#125;</div><div class="line">- (void)setFd_right:(CGFloat)fd_right</div><div class="line">&#123;</div><div class="line">    self.fd_x = fd_right - self.fd_width;</div><div class="line">&#125;</div><div class="line">- (void)setFd_bottom:(CGFloat)fd_bottom</div><div class="line">&#123;</div><div class="line">    self.fd_y = fd_bottom - self.fd_height;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> frame </tag>
            
            <tag> 分类 </tag>
            
            <tag> center </tag>
            
            <tag> height </tag>
            
            <tag> width </tag>
            
            <tag> 属性的封装类 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义导航控制器，以及解决自定义导航控制器后右滑pop手势失效问题]]></title>
      <url>http://yoursite.com/2016/12/10/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8%EF%BC%8C%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8%E5%90%8E%E5%8F%B3%E6%BB%91pop%E6%89%8B%E5%8A%BF%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>通过自定义导航控制器，来给所有<strong>push</strong>的控制器自动加上自定义的返回键。</p>
<p>只需要重写<code>- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated</code>这个push方法。重写的目的就是拦截所有<strong>push</strong>进来的子控制器。然后对他们进行返回键的设置。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    if (self.childViewControllers.count &gt; 0) &#123; // 如果viewController不是最早push进来的子控制器</div><div class="line">        // 左上角</div><div class="line">        UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">        [backButton setImage:[UIImage imageNamed:@&quot;navigationButtonReturn&quot;] forState:UIControlStateNormal];</div><div class="line">        [backButton setImage:[UIImage imageNamed:@&quot;navigationButtonReturnClick&quot;] forState:UIControlStateHighlighted];</div><div class="line">        [backButton setTitle:@&quot;返回&quot; forState:UIControlStateNormal];</div><div class="line">        [backButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class="line">        [backButton setTitleColor:[UIColor redColor] forState:UIControlStateHighlighted];</div><div class="line">        [backButton sizeToFit];</div><div class="line">        // 这句代码放在sizeToFit后面</div><div class="line">        backButton.contentEdgeInsets = UIEdgeInsetsMake(0, -20, 0, 0);</div><div class="line">        [backButton addTarget:self action:@selector(back) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        viewController.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:backButton];</div><div class="line">        // 隐藏底部的工具条</div><div class="line">        viewController.hidesBottomBarWhenPushed = YES;</div><div class="line">    &#125;</div><div class="line">    // 所有设置搞定后, 再push控制器</div><div class="line">    [super pushViewController:viewController animated:animated];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们会发现，<strong>push</strong>完后，右滑<strong>pop</strong>手势不起作用了。</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>在<strong>viewDidLoad</strong>方法里面重新设置手势代理<code>self.interactivePopGestureRecognizer.delegate = self;</code>。记得挂上代理<code>&lt;UIGestureRecognizerDelegate&gt;</code>。</li>
<li>实现代理方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">\/**</div><div class="line"> \*  手势识别器对象会调用这个代理方法来决定手势是否有效</div><div class="line"> \*  @return YES : 手势有效, NO : 手势无效</div><div class="line"> */</div><div class="line">\- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer</div><div class="line">&#123;</div><div class="line">    //    if (self.childViewControllers.count == 1) &#123; // 导航控制器中只有1个子控制器</div><div class="line">    //        return NO;</div><div class="line">    //    &#125;</div><div class="line">    //    return YES;</div><div class="line">    // 手势何时有效 : 当导航控制器的子控制器个数 &gt; 1就有效</div><div class="line">    return self.childViewControllers.count &gt; 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自定义导航栏 </tag>
            
            <tag> 右滑pop手势返回 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[导航栏内容的相关设置]]></title>
      <url>http://yoursite.com/2016/12/09/%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%86%85%E5%AE%B9%E7%9A%84%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ul>
<li>设置导航栏标题</li>
</ul>
<p><code>self.navigationItem.title = @&quot;首页&quot;;// 标题(不建议使用self.title属性)</code></p>
<ul>
<li>给导航栏的标题添加一个图片</li>
</ul>
<p><code>self.navigationItem.titleView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;MainTitle&quot;]];</code></p>
<a id="more"></a>
<ul>
<li>导航栏左侧按钮图片设置两种状态：normal和highlight。创建一个<strong>button</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [button setImage:[UIImage imageNamed:@&quot;MainTagSubIcon&quot;] forState:UIControlStateNormal];</div><div class="line">    [button setImage:[UIImage imageNamed:@&quot;MainTagSubIconClick&quot;] forState:UIControlStateHighlighted];</div><div class="line">    [button addTarget:self action:@selector(tagClick) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [button sizeToFit];</div><div class="line">    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:button];</div></pre></td></tr></table></figure>
<p>   <strong>注</strong>：其中的按钮的设置有很多种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[button imageForState:UIControlStateNormal].size;</div><div class="line">button.currentImage.size;</div><div class="line">[button backgroundImageForState:UIControlStateNormal];</div><div class="line">button.currentBackgroundImage;</div><div class="line">[button titleForState:UIControlStateNormal];</div><div class="line">button.currentTitle;</div><div class="line">[button titleColorForState:UIControlStateNormal];</div><div class="line">button.currentTitleColor;</div></pre></td></tr></table></figure>
<ul>
<li>导航栏右侧设置两个按钮</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 右边1</div><div class="line">    UIButton *settingButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [settingButton setImage:[UIImage imageNamed:@&quot;mine-setting-icon&quot;] forState:UIControlStateNormal];</div><div class="line">    [settingButton setImage:[UIImage imageNamed:@&quot;mine-setting-icon-click&quot;] forState:UIControlStateHighlighted];</div><div class="line">    [settingButton addTarget:self action:@selector(settingClick) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [settingButton sizeToFit];</div><div class="line">    UIBarButtonItem *settingItem = [[UIBarButtonItem alloc] initWithCustomView:settingButton];</div><div class="line">    // 右边2</div><div class="line">    UIButton *moonButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [moonButton setImage:[UIImage imageNamed:@&quot;mine-moon-icon&quot;] forState:UIControlStateNormal];</div><div class="line">    [moonButton setImage:[UIImage imageNamed:@&quot;mine-moon-icon-click&quot;] forState:UIControlStateHighlighted];</div><div class="line">    [moonButton addTarget:self action:@selector(moonClick) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [moonButton sizeToFit];</div><div class="line">    UIBarButtonItem *moonItem = [[UIBarButtonItem alloc] initWithCustomView:moonButton];</div><div class="line">    self.navigationItem.rightBarButtonItems = @[settingItem, moonItem];</div></pre></td></tr></table></figure>
<p>看到这里，很多有经验的人肯定认为我的水平不高，为什么呢？因为在创建<code>button</code>时很多重复代码。下面我就为<strong>UIBarButtonItem</strong>创建一个分类，来自定义UIBarButtonItem。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)itemWithImage:(NSString *)image highImage:(NSString *)highImage target:(id)target action:(SEL)action</div><div class="line">&#123;</div><div class="line">    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [button setImage:[UIImage imageNamed:image] forState:UIControlStateNormal];</div><div class="line">    [button setImage:[UIImage imageNamed:highImage] forState:UIControlStateHighlighted];</div><div class="line">    [button addTarget:target action:action forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    [button sizeToFit];</div><div class="line">    return [[self alloc] initWithCustomView:button];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分类里面只需要实现上面的代码就行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.navigationItem.leftBarButtonItem = [UIBarButtonItem itemWithImage:@&quot;MainTagSubIcon&quot; highImage:@&quot;MainTagSubIconClick&quot; target:self action:@selector(tagClick)];</div></pre></td></tr></table></figure>
<p>调用只需要一个方法。这样是不是就方便了很多呢！！！</p>
<ul>
<li>设置导航栏的返回键</li>
</ul>
<p><strong>注</strong>：在push的时候记得设置<code>vc.hidesBottomBarWhenPushed = YES;</code>，这样就能隐藏<strong>vc</strong>的<strong>tabbar</strong>了。</p>
<p>返回按钮如果不设置，系统是会自动提供的。但是系统的一般无法满足我们的需求。而且返回按钮的文字是和前一个控制器的<strong>title</strong>一样的。如果文字太长，系统就会显示为<strong>Back</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//返回按钮</div><div class="line">    UIButton *backButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [backButton setImage:[UIImage imageNamed:@&quot;navigationButtonReturn&quot;] forState:UIControlStateNormal];</div><div class="line">    [backButton setImage:[UIImage imageNamed:@&quot;navigationButtonReturnClick&quot;] forState:UIControlStateHighlighted];</div><div class="line">    [backButton setTitle:@&quot;返回&quot; forState:UIControlStateNormal];</div><div class="line">    [backButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class="line">    [backButton setTitleColor:[UIColor redColor] forState:UIControlStateHighlighted];</div><div class="line">    [backButton sizeToFit];</div><div class="line">    [backButton addTarget:self action:@selector(backAction) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    //这句代码一定要放在sizeToFit后面</div><div class="line">    backButton.contentEdgeInsets = UIEdgeInsetsMake(0, -20, 0, 0);//设置整个按钮向左偏移20个单位</div><div class="line">    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:backButton];</div></pre></td></tr></table></figure>
<p>这里涉及到<strong>设置按钮的内边距</strong>。他可以设置<strong>button</strong>的文字、图片以及两者共同的偏移量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property(nonatomic) UIEdgeInsets contentEdgeInsets UI_APPEARANCE_SELECTOR;</div><div class="line">@property(nonatomic) UIEdgeInsets titleEdgeInsets;</div><div class="line">@property(nonatomic) UIEdgeInsets imageEdgeInsets;</div></pre></td></tr></table></figure>
<p>做到这里，肯定有人会问，如果我每一次<strong>push</strong>之后都要在新的控制器里面重复写上上面设置返回键的代码，那不是很繁琐吗？答案是肯定的。下面有两种方式来解决这个问题。</p>
<ul>
<li><p>方法一：自定义<strong>BaseViewController</strong></p>
<ul>
<li>只需要在<strong>BaseViewController</strong>里面设置一次就行了，后面所有的控制器都继承自它即可。但是这种方式不建议使用。<ul>
<li>这样子比较麻烦，每一次创建控制器都必须继承<strong>BaseViewController</strong></li>
<li>有些控制器无法继承<strong>BaseViewController</strong>。例如：<strong>UITableViewController</strong>，<strong>UICollectionViewController</strong>。如果这两个继承了，他们很多的方法都必须自己手动添加书写，比较麻烦。</li>
</ul>
</li>
</ul>
</li>
<li><p>方法二：自定义导航栏控制器（推荐）。具体实现参考我的下一篇博客。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 隐藏tabbar </tag>
            
            <tag> navigationItem </tag>
            
            <tag> 导航栏的设置 </tag>
            
            <tag> 导航栏返回按钮的设置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何给tabbar的中间添加一个不同于其他UITabBarItem的发布按钮]]></title>
      <url>http://yoursite.com/2016/12/08/%E5%A6%82%E4%BD%95%E7%BB%99tabbar%E7%9A%84%E4%B8%AD%E9%97%B4%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%90%8C%E4%BA%8E%E5%85%B6%E4%BB%96tabbarbuttond%E7%9A%84%E5%8F%91%E5%B8%83%E6%8C%89%E9%92%AE/</url>
      <content type="html"><![CDATA[<p>很多的社交软件都有发布状态这一功能，例如：新浪微博。它的APP中的tabbar上中间有一个不同于其他四个风格的按钮，而且他的点击事件也是不一样的。那么我们该如何创建它呢？下面我来介绍创建它的两种方式。</p>
<ul>
<li><p>第一种方式：</p>
<ul>
<li>自定义一个UITabBarController。</li>
<li>在添加子控制器的时候，中间多添加一个自控制器来占用位置。</li>
<li>它的图片，文字等都不用设置。</li>
<li><p>通过懒加载的方式创建一个<strong>button</strong>，然后在<code>viewWillApper:</code>方法中添加到self.tabBar上就行了。</p>
<p><strong>注</strong>：一定要添加在<code>viewWillApper:</code>方法中。因为当viewWillAppear:方法被调用的时候, tabBar内部已经添加了5个UITabBarButton。这样就可以实现一个效果 : [发布按钮]盖在其他UITabBarButton上面。</p>
<a id="more"></a>
<p><strong>为什么一定要慵懒加载呢？</strong></p>
<p>因为<code>viewWillApper:</code>方法可能会执行多次，如果使用懒加载就只会创建以此按钮而已，后面无论添加多少次，都只是会出现一个按钮。</p>
<p>具体代码如下：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">\#import &quot;FDTabBarViewController.h&quot;</div><div class="line">@interface FDTabBarViewController ()</div><div class="line">/** 中间的发布按钮 */</div><div class="line">@property (nonatomic , strong) UIButton *publishButton;</div><div class="line">@end</div><div class="line">@implementation FDTabBarViewController</div><div class="line">\#pragma mark - 懒加载</div><div class="line">/** 发布按钮 */</div><div class="line"> - (UIButton *)publishButton</div><div class="line">&#123;</div><div class="line">    if (!_publishButton) &#123;</div><div class="line">        _publishButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">        _publishButton.frame = CGRectMake(0, 0, self.tabBar.frame.size.width / 5, self.tabBar.frame.size.height);</div><div class="line">        _publishButton.center = CGPointMake(self.tabBar.frame.size.width * 0.5, self.tabBar.frame.size.height * 0.5);</div><div class="line">        [_publishButton setImage:[UIImage imageNamed:@&quot;tabBar_publish_icon&quot;] forState:UIControlStateNormal];</div><div class="line">        [_publishButton setImage:[UIImage imageNamed:@&quot;tabBar_publish_click_icon&quot;] forState:UIControlStateHighlighted];</div><div class="line">        [_publishButton addTarget:self action:@selector(publishButtonAction) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    &#125;</div><div class="line">    return _publishButton;</div><div class="line">&#125;</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    /**** 设置所有UITabBarItem的文字属性 ****/</div><div class="line">    UITabBarItem *item = [UITabBarItem appearance];</div><div class="line">    // 普通状态下的文字属性</div><div class="line">    NSMutableDictionary *normalAttrs = [NSMutableDictionary dictionary];</div><div class="line">    normalAttrs[NSFontAttributeName] = [UIFont systemFontOfSize:14];</div><div class="line">    normalAttrs[NSForegroundColorAttributeName] = [UIColor grayColor];</div><div class="line">    [item setTitleTextAttributes:normalAttrs forState:UIControlStateNormal];</div><div class="line">    // 选中状态下的文字属性</div><div class="line">    NSMutableDictionary *selectedAttrs = [NSMutableDictionary dictionary];</div><div class="line">    selectedAttrs[NSForegroundColorAttributeName] = [UIColor darkGrayColor];</div><div class="line">    [item setTitleTextAttributes:selectedAttrs forState:UIControlStateSelected];</div><div class="line">    /**** 添加子控制器 ****/</div><div class="line">    [self setupOneChildViewController:[[UITableViewController alloc] init] title:@&quot;精华&quot; image:@&quot;tabBar_essence_icon&quot; selectedImage:@&quot;tabBar_essence_click_icon&quot;];</div><div class="line">    [self setupOneChildViewController:[[UITableViewController alloc] init] title:@&quot;新帖&quot; image:@&quot;tabBar_new_icon&quot; selectedImage:@&quot;tabBar_new_click_icon&quot;];</div><div class="line">    //中间用来占位置的子控制器</div><div class="line">    [self setupOneChildViewController:[[UIViewController alloc] init] title:nil image:nil selectedImage:nil];</div><div class="line">    [self setupOneChildViewController:[[UIViewController alloc] init] title:@&quot;关注&quot; image:@&quot;tabBar_friendTrends_icon&quot; selectedImage:@&quot;tabBar_friendTrends_click_icon&quot;];</div><div class="line">    [self setupOneChildViewController:[[UITableViewController alloc] init] title:@&quot;我&quot; image:@&quot;tabBar_me_icon&quot; selectedImage:@&quot;tabBar_me_click_icon&quot;];</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> *  为什么要在viewWillAppear:方法中添加发布按钮?</div><div class="line"> *  当viewWillAppear:方法被调用的时候, tabBar内部已经添加了5个UITabBarButton</div><div class="line"> *  就可以实现一个效果 : [发布按钮]盖在其他UITabBarButton上面</div><div class="line"> */</div><div class="line">- (void)viewWillAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">    /**** 增加一个发布按钮 ****/</div><div class="line">    [self.tabBar addSubview:self.publishButton];//重复添加只会添加一次而已</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> *  初始化一个子控制器</div><div class="line"> *  @param vc            子控制器</div><div class="line"> *  @param title         标题</div><div class="line"> *  @param image         图标</div><div class="line"> *  @param selectedImage 选中的图标</div><div class="line"> */</div><div class="line">- (void)setupOneChildViewController:(UIViewController *)vc title:(NSString *)title image:(NSString *)image selectedImage:(NSString *)selectedImage</div><div class="line">&#123;</div><div class="line">    vc.view.backgroundColor = FDRandomColor;</div><div class="line">    vc.tabBarItem.title = title;</div><div class="line">    //这样判断的好处就是防止控制台打印出警告。因为如果image为nil或者@“”的时候都会打印出警告。</div><div class="line">    if (image.length) &#123;// 图片名有具体值</div><div class="line">        vc.tabBarItem.image = [UIImage imageNamed:image];</div><div class="line">        vc.tabBarItem.selectedImage = [UIImage imageNamed:selectedImage];</div><div class="line">    &#125;</div><div class="line">    [self addChildViewController:vc];</div><div class="line">&#125;</div><div class="line">\#pragma mark - 点击事件监听</div><div class="line">- (void)publishButtonAction &#123;</div><div class="line">    DLOG(@&quot;事件点击了&quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<ul>
<li><p>第二种方式：通过直接更换TabBar来实现</p>
<ul>
<li>自定义一个UITabBarController。</li>
<li>自定义一个UITabBar，重写<code>layoutSubviews</code>方法。<strong>注</strong>：<code>[super layoutSubviews]</code>方法要先写上。</li>
<li><code>layoutSubviews</code>方法中遍历tabBar的所有子视图，来获取所有的<strong>UITabBarButton</strong>，然后一个一个设置他们的<strong>frame</strong>,让中间空出一个按钮的大小。</li>
<li><p>通过懒加载的方式创建一个<strong>button</strong>，然后在<code>layoutSubviews</code>方法中设置发布按钮的<strong>frame</strong>。<br><strong>注</strong>：因为<strong>UITabBarButton</strong>是苹果内部的类型，所以无法直接使用，所以在遍历子视图判断的时候无法直接用类来判断，而是通过转换成字符串的形式来的判断。</p>
<p><code>subview.class != NSClassFromString(@&quot;UITabBarButton&quot;)</code></p>
</li>
</ul>
</li>
</ul>
<p><strong>具体实现如下：</strong></p>
<p>自定义的FDTabBar类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">\#import &quot;FDTabBar.h&quot;</div><div class="line">@interface FDTabBar()</div><div class="line">/** 中间的发布按钮 */</div><div class="line">@property (nonatomic, weak) UIButton *publishButton;</div><div class="line">@end</div><div class="line">@implementation FDTabBar</div><div class="line">\#pragma mark - 懒加载</div><div class="line">/** 发布按钮 */</div><div class="line">- (UIButton *)publishButton</div><div class="line">&#123;</div><div class="line">    if (!_publishButton) &#123;</div><div class="line">        UIButton *publishButton = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">        publishButton.backgroundColor = FDRandomColor;</div><div class="line">        [publishButton setImage:[UIImage imageNamed:@&quot;tabBar_publish_icon&quot;] forState:UIControlStateNormal];</div><div class="line">        [publishButton setImage:[UIImage imageNamed:@&quot;tabBar_publish_click_icon&quot;] forState:UIControlStateHighlighted];</div><div class="line">        [publishButton addTarget:self action:@selector(publishClick) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [self addSubview:publishButton];</div><div class="line">        _publishButton = publishButton;</div><div class="line">    &#125;</div><div class="line">    return _publishButton;</div><div class="line">&#125;</div><div class="line">\#pragma mark - 初始化</div><div class="line">/**</div><div class="line"> *  布局子控件</div><div class="line"> */</div><div class="line">- (void)layoutSubviews</div><div class="line">&#123;</div><div class="line">    [super layoutSubviews];</div><div class="line">    // NSClassFromString(@&quot;UITabBarButton&quot;) == [UITabBarButton class]</div><div class="line">    // NSClassFromString(@&quot;UIButton&quot;) == [UIButton class]</div><div class="line">    /**** 设置所有UITabBarButton的frame ****/</div><div class="line">    // 按钮的尺寸</div><div class="line">    CGFloat buttonW = self.frame.size.width / 5;</div><div class="line">    CGFloat buttonH = self.frame.size.height;</div><div class="line">    CGFloat buttonY = 0;</div><div class="line">    // 按钮索引</div><div class="line">    int buttonIndex = 0;</div><div class="line">    for (UIView *subview in self.subviews) &#123;</div><div class="line">        // 过滤掉非UITabBarButton</div><div class="line">        //        if (![@&quot;UITabBarButton&quot; isEqualToString:NSStringFromClass(subview.class)]) continue;</div><div class="line">        if (subview.class != NSClassFromString(@&quot;UITabBarButton&quot;)) continue;</div><div class="line">        // 设置frame</div><div class="line">        CGFloat buttonX = buttonIndex * buttonW;</div><div class="line">        if (buttonIndex &gt;= 2) &#123; // 右边的2个UITabBarButton</div><div class="line">            buttonX += buttonW;</div><div class="line">        &#125;</div><div class="line">        subview.frame = CGRectMake(buttonX, buttonY, buttonW, buttonH);</div><div class="line">        // 增加索引</div><div class="line">        buttonIndex++;</div><div class="line">    &#125;</div><div class="line">    /**** 设置中间的发布按钮的frame ****/</div><div class="line">    self.publishButton.frame = CGRectMake(0, 0, buttonW, buttonH);</div><div class="line">    self.publishButton.center = CGPointMake(self.frame.size.width * 0.5, self.frame.size.height * 0.5);</div><div class="line">&#125;</div><div class="line">\#pragma mark - 监听</div><div class="line">- (void)publishClick</div><div class="line">&#123;</div><div class="line">    DLOG(@&quot;点击发布按钮&quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>注</strong>：在设置中间的发布按钮的frame的时候，一定要先设置size然后再设置center。</p>
<p>自定义的FDTabBarViewController类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">\#import &quot;FDTabBarViewController.h&quot;</div><div class="line">\#import &quot;FDTabBar.h&quot;</div><div class="line">@interface FDTabBarViewController ()</div><div class="line">@end</div><div class="line">@implementation FDTabBarViewController</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    /**** 设置所有UITabBarItem的文字属性 ****/</div><div class="line">    UITabBarItem *item = [UITabBarItem appearance];</div><div class="line">    // 普通状态下的文字属性</div><div class="line">    NSMutableDictionary *normalAttrs = [NSMutableDictionary dictionary];</div><div class="line">    normalAttrs[NSFontAttributeName] = [UIFont systemFontOfSize:14];</div><div class="line">    normalAttrs[NSForegroundColorAttributeName] = [UIColor grayColor];</div><div class="line">    [item setTitleTextAttributes:normalAttrs forState:UIControlStateNormal];</div><div class="line">    // 选中状态下的文字属性</div><div class="line">    NSMutableDictionary *selectedAttrs = [NSMutableDictionary dictionary];</div><div class="line">    selectedAttrs[NSForegroundColorAttributeName] = [UIColor darkGrayColor];</div><div class="line">    [item setTitleTextAttributes:selectedAttrs forState:UIControlStateSelected];</div><div class="line">    /**** 添加子控制器 ****/</div><div class="line">    [self setupOneChildViewController:[[UITableViewController alloc] init] title:@&quot;精华&quot; image:@&quot;tabBar_essence_icon&quot; selectedImage:@&quot;tabBar_essence_click_icon&quot;];</div><div class="line">    [self setupOneChildViewController:[[UITableViewController alloc] init] title:@&quot;新帖&quot; image:@&quot;tabBar_new_icon&quot; selectedImage:@&quot;tabBar_new_click_icon&quot;];</div><div class="line">    [self setupOneChildViewController:[[UIViewController alloc] init] title:@&quot;关注&quot; image:@&quot;tabBar_friendTrends_icon&quot; selectedImage:@&quot;tabBar_friendTrends_click_icon&quot;];</div><div class="line">    [self setupOneChildViewController:[[UITableViewController alloc] init] title:@&quot;我&quot; image:@&quot;tabBar_me_icon&quot; selectedImage:@&quot;tabBar_me_click_icon&quot;];</div><div class="line">    /**** 更换TabBar ****/</div><div class="line">    //    self.tabBar = [[XMGTabBar alloc] init];</div><div class="line">    [self setValue:[[FDTabBar alloc] init] forKeyPath:@&quot;tabBar&quot;];</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> *  初始化一个子控制器</div><div class="line"> *</div><div class="line"> *  @param vc            子控制器</div><div class="line"> *  @param title         标题</div><div class="line"> *  @param image         图标</div><div class="line"> *  @param selectedImage 选中的图标</div><div class="line"> */</div><div class="line">- (void)setupOneChildViewController:(UIViewController *)vc title:(NSString *)title image:(NSString *)image selectedImage:(NSString *)selectedImage</div><div class="line">&#123;</div><div class="line">    vc.view.backgroundColor = FDRandomColor;</div><div class="line">    vc.tabBarItem.title = title;</div><div class="line">    //这样判断的好处就是防止控制台打印出警告。因为如果image为nil或者@“”的时候都会打印出警告。</div><div class="line">    if (image.length) &#123;// 图片名有具体值</div><div class="line">        vc.tabBarItem.image = [UIImage imageNamed:image];</div><div class="line">        vc.tabBarItem.selectedImage = [UIImage imageNamed:selectedImage];</div><div class="line">    &#125;</div><div class="line">    [self addChildViewController:vc];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自定义UITabBarButton </tag>
            
            <tag> 懒加载 </tag>
            
            <tag> 设置所有UITabBarItem的文字属性 </tag>
            
            <tag> 自定义tabbar,size和center的设置顺序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在设置一些控件的图片时，有些图片显示出来会自动渲染成蓝色]]></title>
      <url>http://yoursite.com/2016/12/07/%E5%9C%A8%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%BA%9B%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%9B%BE%E7%89%87%E6%97%B6%EF%BC%8C%E6%9C%89%E4%BA%9B%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%87%BA%E6%9D%A5%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93%E6%88%90%E8%93%9D%E8%89%B2/</url>
      <content type="html"><![CDATA[<h4 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h4><ul>
<li>设置tabBarItem的选中图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vc.tabBarItem.selectedImage = image;</div></pre></td></tr></table></figure>
<p>我使用的图片都是灰色的，但是选中之后出现下面的效果</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fai1ix7xu6j20a90j3q33.jpg" alt="image"></p>
<a id="more"></a>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>再次产生一张不会进行渲染的图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 加载图片</div><div class="line">UIImage *tempImage = [UIImage imageNamed:@&quot;tabBar_essence_click_icon&quot;];</div><div class="line">// 产生一张不会进行自动渲染的图片</div><div class="line">UIImage *selectedImage = [tempImage imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];</div><div class="line">vc.tabBarItem.selectedImage = selectedImage;</div></pre></td></tr></table></figure>
<ul>
<li>直接在<code>Assets.xcassets</code>中设置（推荐）</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1fai1nq2yy8j211f0cytbb.jpg" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图片变蓝 </tag>
            
            <tag> 图片渲染 </tag>
            
            <tag> tabBarItem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pch文件的设置以及宏定义的注意事项：（包含的oc与c的兼容问题）]]></title>
      <url>http://yoursite.com/2016/12/07/pch%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%BE%E7%BD%AE%EF%BC%9A%EF%BC%88%E5%8C%85%E5%90%AB%E7%9A%84oc%E4%B8%8Ec%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      <content type="html"><![CDATA[<ul>
<li>首先我们先建立一个pch文件，然后与项目进行配置。如下：</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fai2mxk4g5j20uz0i8whm.jpg" alt="image"></p>
<p>这种方法只能在本地读取到，因为这个路径是绝对的。但是如果在公司开发项目，一般好几个人一起开发。这个时候这个路径就会出现问题，最好使用相对路径。路径的设置为<strong>$(SRCROOT)</strong>+<strong>项目名</strong>+<strong>pch文件名</strong>。如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fai2sgsfwij20jl05g3z7.jpg" alt="image"></p>
<p>到这里我们的pch文件就和项目关联上了。<br><a id="more"></a></p>
<ul>
<li>接下来如果在项目中需要兼容C语言文件的时候，就需要设置一下<code>#ifdef __OBJC__</code>。</li>
</ul>
<p>否则会出现以下的错误提示：</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fai3952o3oj208l0ktgn9.jpg" alt="image"></p>
<p>具体实现方案：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/*** 如果希望某些内容能拷贝到任何源代码文件(OC\C\C++等), 那么就不要写在#ifdef __OBJC__和#endif之间 ***/</div><div class="line">/***** 在#ifdef __OBJC__和#endif之间的内容, 只会拷贝到OC源代码文件中, 不会拷贝到其他语言的源代码文件中 *****/</div><div class="line">\#ifdef __OBJC__</div><div class="line">/**</div><div class="line"> *  日志</div><div class="line"> *  在Debug模式下，输出内容</div><div class="line"> */</div><div class="line">\#ifdef DEBUG</div><div class="line">\#define DLOG(...)   NSLog(__VA_ARGS__)</div><div class="line">\#endif</div><div class="line">\#endif</div><div class="line">/***** 在#ifdef __OBJC__和#endif之间的内容, 只会拷贝到OC源代码文件中, 不会拷贝到其他语言的源代码文件中 *****/</div></pre></td></tr></table></figure>
<ul>
<li><p>配置宏有两种方式</p>
<ol>
<li>在pch文件中或者在每个类文件中创建代码来设置宏定义。</li>
<li><p>在<strong>Build Setting</strong>中配置宏。</p>
<ul>
<li><p>如果项目中有些宏找不到, 可能是配置在Build Setting中</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fai382ve8xj20vf0clacj.jpg" alt="image"></p>
</li>
<li><p>注意点:宏的名字不能全部是小写字母</p>
</li>
<li><p>如果宏的名字全部是小写, 会出现以下错误</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fai3952o3oj208l0ktgn9.jpg" alt="image"></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pch文件 </tag>
            
            <tag> 宏定义 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中appearence的特殊用法]]></title>
      <url>http://yoursite.com/2016/12/06/iOS%E4%B8%ADappearence%E7%9A%84%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在开发过程中，有时候需要对一些对象进行统一的属性设置，例如，对UITabBarItem的显示的文字属性进行统一设置。这样的话，我们就可以使用appearence来做，而不是一个一个UITabBarItem设置。</p>
<h6 id="通过UITabBarItem的appearance对象统一设置："><a href="#通过UITabBarItem的appearance对象统一设置：" class="headerlink" title="通过UITabBarItem的appearance对象统一设置："></a>通过UITabBarItem的appearance对象统一设置：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**** 设置所有UITabBarItem的文字属性 ****/</div><div class="line">UITabBarItem *item = [UITabBarItem appearance];</div><div class="line">// 普通状态下的文字属性</div><div class="line">NSMutableDictionary *normalAttrs = [NSMutableDictionary dictionary];</div><div class="line">normalAttrs[NSFontAttributeName] = [UIFont systemFontOfSize:14];</div><div class="line">normalAttrs[NSForegroundColorAttributeName] = [UIColor grayColor];</div><div class="line">[item setTitleTextAttributes:normalAttrs forState:UIControlStateNormal];</div><div class="line">// 选中状态下的文字属性</div><div class="line">NSMutableDictionary *selectedAttrs = [NSMutableDictionary dictionary];</div><div class="line">selectedAttrs[NSForegroundColorAttributeName] = [UIColor darkGrayColor];</div><div class="line">[item setTitleTextAttributes:normalAttrs forState:UIControlStateSelected];</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当然不仅仅是UITabBarItem对象可以使用，凡是在对象属性后面有UI_APPEARANCE_SELECTOR的字样的，都是可以通过appearence来统一设置。</p>
<p><strong>注</strong>：必须在创建每个对象之前进行统一的设置。</p>
<p>如果在对象创建完成后还想通过appearence来设置属性，就必须先将视图移除，然后在添加上去。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">\#import &quot;ViewController.h&quot;</div><div class="line">@interface ViewController ()</div><div class="line">@end</div><div class="line">@implementation ViewController</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    UISwitch *s1 = [[UISwitch alloc] init];</div><div class="line">    s1.center = CGPointMake(100, 100);</div><div class="line">    s1.on = YES;</div><div class="line">    [self.view addSubview:s1];</div><div class="line">    UISwitch *s2 = [[UISwitch alloc] init];</div><div class="line">    s2.center = CGPointMake(200, 100);</div><div class="line">    s2.on = YES;</div><div class="line">    [self.view addSubview:s2];</div><div class="line">    UISwitch *s3 = [[UISwitch alloc] init];</div><div class="line">    s3.center = CGPointMake(300, 100);</div><div class="line">    s3.on = YES;</div><div class="line">    [self.view addSubview:s3];</div><div class="line">&#125;</div><div class="line">- (IBAction)changeColor:(UISegmentedControl *)sender &#123;</div><div class="line">    switch (sender.selectedSegmentIndex) &#123;</div><div class="line">        case 0:</div><div class="line">            [UISwitch appearance].onTintColor = [UIColor redColor];</div><div class="line">            break;</div><div class="line">        case 1:</div><div class="line">            [UISwitch appearance].onTintColor = [UIColor blueColor];</div><div class="line">            break;</div><div class="line">        case 2:</div><div class="line">            [UISwitch appearance].onTintColor = [UIColor orangeColor];</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    //重新添加控件，如果不重新添加控件就不会刷新设置。</div><div class="line">    [self.view removeFromSuperview];//因为控制器的view都是强引用的，所以移除之后没有被销毁掉</div><div class="line">    [[UIApplication sharedApplication].keyWindow addSubview:self.view];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> appearence </tag>
            
            <tag> UITabBarItem等对象统一设置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新建控制器时自动加上一个前缀]]></title>
      <url>http://yoursite.com/2016/12/06/%E6%96%B0%E5%BB%BA%E6%8E%A7%E5%88%B6%E5%99%A8%E6%97%B6%E8%87%AA%E5%8A%A8%E5%8A%A0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%89%8D%E7%BC%80/</url>
      <content type="html"><![CDATA[<p>当我们在公司中开发项目的时候，一般每个公司都会在自己的项目代码类中加上一个前缀，来表明这是本公司创建的。那么怎么才能在我们创建类的时候就自动加上前缀呢？</p>
<p>其实很简单，只需要按照下面图片展示的三步就可以轻松实现了。</p>
<p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1fahi7x1933j20d302odfy.jpg" alt="图片展示"></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 前缀 </tag>
            
            <tag> 控制器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[APP的资源提取方法]]></title>
      <url>http://yoursite.com/2016/12/06/APP%E7%9A%84%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="APP的资源提取方法"><a href="#APP的资源提取方法" class="headerlink" title="APP的资源提取方法"></a>APP的资源提取方法</h1><h4 id="打开iTunes-找到应用。-前提是你已经买过了"><a href="#打开iTunes-找到应用。-前提是你已经买过了" class="headerlink" title="打开iTunes,找到应用。(前提是你已经买过了)"></a>打开iTunes,找到应用。(前提是你已经买过了)</h4><p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fah3utwpxxj20o0071dgj.jpg" alt="应用图片演示"></p>
<h4 id="将app拖到桌面上，然后将-api格式转换成-zip格式。"><a href="#将app拖到桌面上，然后将-api格式转换成-zip格式。" class="headerlink" title="将app拖到桌面上，然后将.api格式转换成.zip格式。"></a>将app拖到桌面上，然后将.api格式转换成.zip格式。</h4><p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fah3ybmk2ej208o03cjre.jpg" alt="应用图片演示"></p>
<h4 id="解压后打开文件，找到Payload文件夹里面的项目，右击显示包内容。"><a href="#解压后打开文件，找到Payload文件夹里面的项目，右击显示包内容。" class="headerlink" title="解压后打开文件，找到Payload文件夹里面的项目，右击显示包内容。"></a>解压后打开文件，找到Payload文件夹里面的项目，右击显示包内容。</h4><p><img src="http://ww1.sinaimg.cn/large/e3aca1a1jw1fah461q2afj20bp042wep.jpg" alt="应用图片演示"></p>
<p><strong>注</strong>：有时候你会发现图片较少，这时候你可以找到一个文件叫<code>Assets.car</code>。这个里面很多资源压缩在里面。但是不能像之前一样使用.zip的格式解压。</p>
<p>这时，我们需要一个工具<a href="https://github.com/steventroughtonsmith/cartool" target="_blank" rel="external">cartool</a>。<br><a id="more"></a></p>
<ul>
<li>下载完成后打开直接运行生成cartool</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fah5aounmzj207p06amxl.jpg" alt="生成cartool图片"></p>
<ul>
<li>Finder打开cartool所在目录。</li>
<li>打开终端，cd到cartool所在目录。</li>
<li>创建一个接受解压后的图片的文件夹。（outputDirectory）</li>
<li><p>在终端中执行以下命令：</p>
<p>./cartool /xxx/Assets.car /xxx/outputDirectory</p>
</li>
</ul>
<p><strong>注</strong>：第一个<code>xxx</code>是<code>Assets.car</code>的路径，第二个<code>xxx</code>是图片接受文件夹的路径，二者缺一不可。</p>
<p>执行完成后，便可以显示出<code>Assets.car</code>里面的资源了。</p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> app资源提取 </tag>
            
            <tag> Assets.car文件解压 </tag>
            
            <tag> cartool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新手写swift应该注意什么]]></title>
      <url>http://yoursite.com/2016/12/06/%E6%96%B0%E6%89%8B%E5%86%99swift%E5%BA%94%E8%AF%A5%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h1 id="新手写Swift应该注意什么（Style）"><a href="#新手写Swift应该注意什么（Style）" class="headerlink" title="新手写Swift应该注意什么（Style）"></a>新手写Swift应该注意什么（Style）</h1><p>每个语言都有自己的推荐风格。显然OC与Swift有着不同的风格。但我们书写Swift代码的时候一定要用Swift的代码风格，而不是沿用OC的风格。</p>
<h3 id="省略句末的分号"><a href="#省略句末的分号" class="headerlink" title="省略句末的分号"></a>省略句末的分号</h3><p>Swift的语言风格就是越简洁越好。如果一行里面只有一句代码的话，代码的末尾就不需要写上分号了。</p>
<p><strong>注</strong>：不写代码的情况只限于一行里面只有一句代码，其他情况建议直接换行。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//tableView设置</span></div><div class="line">        tableView.estimatedRowHeight = <span class="number">200</span></div><div class="line">        tableView.rowHeight = <span class="type">UITableViewAutomaticDimension</span></div><div class="line">        tableView.delegate = <span class="keyword">self</span></div><div class="line">        tableView.dataSource = <span class="keyword">self</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="省略self"><a href="#省略self" class="headerlink" title="省略self."></a>省略self.</h3><p>不在闭包里面的时候，如果要调用自身的属性或者方法时省略self.。这是苹果强烈建议的，因为这样可以使得代码变得简介。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2.执行动画</span></div><div class="line">       <span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, animations: &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">           <span class="keyword">self</span>.tipLabel.transform = <span class="type">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>, <span class="number">44</span>)</div><div class="line">           &#125;) &#123; (<span class="number">_</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">               <span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>, delay: <span class="number">2.0</span>, options: <span class="type">UIViewAnimationOptions</span>(rawValue: <span class="number">0</span>), animations: &#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                   <span class="keyword">self</span>.tipLabel.transform = <span class="type">CGAffineTransformIdentity</span></div><div class="line">                   &#125;, completion: &#123; (<span class="number">_</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                        <span class="keyword">self</span>.tipLabel.hidden = <span class="literal">true</span></div><div class="line">               &#125;)</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<h3 id="类型声明的一些注意点"><a href="#类型声明的一些注意点" class="headerlink" title="类型声明的一些注意点"></a>类型声明的一些注意点</h3><p>在声明变量的时候，<code>:</code>要紧跟变量名后面，但是类型与冒号之间需要一个空格。另外，字典类型的声明也是需要遵守这样的规则的。(可以使用<a href="https://github.com/realm/SwiftLint" target="_blank" rel="external">SwiftLint</a>来帮你检查)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a: <span class="type">String</span> </div><div class="line"><span class="keyword">var</span> dict: [<span class="type">String</span>: <span class="type">AnyObject</span>]</div></pre></td></tr></table></figure>
<h3 id="函数名的后面与-之间需要一个空格"><a href="#函数名的后面与-之间需要一个空格" class="headerlink" title="函数名的后面与{ }之间需要一个空格"></a>函数名的后面与{ }之间需要一个空格</h3><p>下面是标准的函数与法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注</strong>： 二元操作符（+、-、*、/、%）的前后都有空格的，包含返回类型符号（-&gt;）。</p>
<h3 id="对象初始化的时候不要调用init方法"><a href="#对象初始化的时候不要调用init方法" class="headerlink" title="对象初始化的时候不要调用init方法"></a>对象初始化的时候不要调用init方法</h3><p>Swift语言通过()就已经调用对象的初始化方法了，因此不需要在调用init()。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> btn = <span class="type">UIButton</span>()<span class="comment">//正确</span></div><div class="line"><span class="keyword">let</span> btn = <span class="type">UIButton</span>.<span class="keyword">init</span>()<span class="comment">//错误</span></div></pre></td></tr></table></figure>
<h3 id="函数参数命名规则"><a href="#函数参数命名规则" class="headerlink" title="函数参数命名规则"></a>函数参数命名规则</h3><p>因为OC的第一个参数名是省略的所以会把第一个参数名直接带到方法名上。但是Swift3.0之后，在方法调用时，第一个参数名也是会展现出来的。所以函数命名的时候要注意命名的简洁性，比如不需要再加什么：with、and等连接词了。</p>
<h6 id="其他的相关风格可以参考："><a href="#其他的相关风格可以参考：" class="headerlink" title="其他的相关风格可以参考："></a>其他的相关风格可以参考：</h6><p><a href="https://github.com/Artwalk/swift-style-guide/blob/master/README_CN.md" target="_blank" rel="external">swift-style-guide</a></p>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Swift代码风格 </tag>
            
            <tag> 新手指导 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown新手教程]]></title>
      <url>http://yoursite.com/2016/12/05/Markdown%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Markdown新手指南"><a href="#Markdown新手指南" class="headerlink" title="Markdown新手指南"></a>Markdown新手指南</h1><p>Markdown是一中电子邮件风格的标记语言，通常为程序员群体所用。为什么？在此，我们总结Markdown的优点如下：</p>
<ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li>
<li>让你专注于文字而不是排版。</li>
<li>格式转换方便，Markdown的文本你可以轻松转换为html、电子书等。</li>
<li>Markdown的标记语法有极好的可读性。</li>
</ul>
<a id="more"></a>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题分为多级标题，你只需要在标题文本前加上<code>#</code>，便可显示标题文本本格式。当然你还可以增加二级标题、三级标题等一共六级，只需要增加<code>#</code>的个数即可，标题的字号变相应的降低。</p>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre><p><strong>注</strong>：<code>#</code>和一级标题之间建议保留一个字符的空格，这是最标准的Markdown写法。</p>
<p>效果图如下：</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fafwom6hvrj20cb06hglo.jpg" alt="Markdown标题效果图"></p>
<center><u>一级到六级标题</u></center>

<p><br></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>说到列表，一般都会分为两种情况：有序列表和无序列表。但是对于<br>Markdown来说都是同等的简单。</p>
<h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>只需要在文字的前面加上<code>1.</code> <code>2.</code> <code>3.</code>就行了。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 文本</div><div class="line">2. 文本</div><div class="line">3. 文本</div></pre></td></tr></table></figure>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>同样只要在文字前面加上<code>-</code>或者<code>*</code>即可，例如：</p>
<pre><code>-文本
-文本
-文本
</code></pre><p><strong>注</strong>：<code>-</code>、<code>*</code>、<code>1.</code>和文本之间要保留一个字符的空格。<br>列表案例截图如下：</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fafxebh284j20c7068weg.jpg" alt="Markdown列表"></p>
<p><br></p>
<h3 id="邮箱、连接和图片"><a href="#邮箱、连接和图片" class="headerlink" title="邮箱、连接和图片"></a>邮箱、连接和图片</h3><p>当我们需要显示一串文字为邮箱或者链接地址的时候，可以使用<code>&lt;example@example.com&gt;</code><br>在Markdown中插入连接不需要其他的按钮，只需要<code>[显示的文本](连接的地址 &quot;鼠标放到链接上弹出的文字提示&quot;)</code>这样的语法即可。例如：</p>
<pre><code>[百度](http://www.baidu.com)
</code></pre><p>同样插入图片也不需要其他的按钮，只需要<code>![图片的简介](图片的链接地址 &quot;鼠标放到链接上弹出的文字提示&quot;)</code>这样写即可。例如：</p>
<pre><code>![赵丽颖的图片](http://ww2.sinaimg.cn/large/e3aca1a1jw1fafxl66dmyj20sg0lcgnf.jpg)
</code></pre><p>插入链接和插入图片的效果图如下：</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fafxs3eg17j20c30er75a.jpg" alt="插入链接和插入图片的效果图"></p>
<p><strong>注</strong>：当我们页面的连接比较多的时候，可以统一写在页面的最下面。然后通过：</p>
<p><a href="http://resizesafari.com/favicon.ico" title="鼠标停下显示的文字" target="_blank" rel="external">链接显示的文本</a></p>
<p> <img src="http://resizesafari.com/favicon.ico" alt="图片简介" title="鼠标停下显示的文字"></p>
<p><br></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在我们写作的时候经常会应用到其他人的文字，这个时候加上引用就是必须的了，这个语法只需要在文字前加上<code>&gt;</code>即可，例如：</p>
<pre><code>&gt; 黑云压城城欲摧，甲光向日金鳞开。
</code></pre><p><strong>注</strong>：<code>&gt;</code>和文本之间要保留一个字符的空格。<br>最终的现实就是：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fafxygh3ukj20c701zdfq.jpg" alt="引用的图片"></p>
<p><br></p>
<h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>Markdown的粗体和斜体都是比较简单的，用两个<code>*</code>包含一段文字就是粗体，用一个<code>*</code>包含的一段文字就是斜体，例如：</p>
<pre><code>*黑云压城城欲摧*,**甲光向日金鳞开**
</code></pre><p>最终显示的就是前面一句话为斜体，后面一句话为粗体。</p>
<p>案例截图：</p>
<p><img src="http://ww2.sinaimg.cn/large/e3aca1a1jw1fafy4w14acj20ch00pa9v.jpg" alt="粗体和斜体的图片"></p>
<p><strong>注</strong>：当然你也可以使用标记<code>_</code>来替换<code>*</code>,效果是一样的。<br>快捷键：斜体-Cmd + B ， 粗体-Cmd + I  </p>
<p><br></p>
<h3 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h3><p>需要引用代码的时候，如果你引用的代码不分行的话，可以使用``将其包起来。</p>
<p>但是如果有好几行的话就不行了。这时候你就可以用```放在代码行的首行和末行这样的方式。当然还有最简单的一种方法，那就是按Tab键。</p>
<p><strong>效果图如下</strong>：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fafymxnw9aj20ce04kt8q.jpg" alt="代码引用的图片"></p>
<p><strong>注</strong>：在使用```这种方法时，里面面的代码不要出现空行，否则是不会显示的。</p>
<p><strong>扩展</strong>：标记代码的时候可以在```后面加上是哪种语言，这样代码显示的时候会根据不同的语言自动识别代码关键词，看上去十分美观，简洁易懂。具体可以参考：<a href="http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html" target="_blank" rel="external">代码识别语言汇总</a></p>
<h3 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h3><p>换行使用HTML里面的 <code>&lt;br /&gt;</code>。</p>
<h3 id="水平分割线的使用"><a href="#水平分割线的使用" class="headerlink" title="水平分割线的使用"></a>水平分割线的使用</h3><p>我们可以使用三种方式创建水平分割线<code>***</code>、<code>---</code>、<code>- - - -</code>,他们都是显示在文字下面。</p>
<h3 id="Headers头部"><a href="#Headers头部" class="headerlink" title="Headers头部"></a>Headers头部</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
<h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><p>任何数量的 = 和 - 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6"><a href="#这是-H6" class="headerlink" title="这是 H6"></a>这是 H6</h6><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<h1 id="这是-H1-1"><a href="#这是-H1-1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2-1"><a href="#这是-H2-1" class="headerlink" title="这是 H2"></a>这是 H2</h2><h3 id="这是-H3"><a href="#这是-H3" class="headerlink" title="这是 H3"></a>这是 H3</h3><p><br></p>
<h3 id="角标"><a href="#角标" class="headerlink" title="角标"></a>角标</h3><p>一般在一片论文中会有很多其他论文观点的支持，因此在有些结论之后会加上引用论文的角标号。如下：</p>
<p>爱因斯坦相对论原理.<a href="《相对论》.">^1</a></p>
<p><strong>注</strong>：<code>爱因斯坦相对论原理.[^1]</code>这个是放在文章中的。<br><code>[^1]:《相对论》.</code>这个则会显示在文章的最底部。类似于参考文献</p>
<p><br></p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>为一段文字填上删除的横线，我们使用~~将文字前后包含即可。如下：</p>
<p><code>~~Strikethrough~~</code></p>
<p>显示的效果：</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fag02m0qh1j203500odfl.jpg" alt="删除"></p>
<p><br></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>下面是创建的一个简单的表格:</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>或者：</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>效果如下：</p>
<p><img src="http://ww4.sinaimg.cn/large/e3aca1a1jw1fag01kz6j8j209e02igln.jpg" alt="表格"></p>
<p>通过添加冒号来设置内容的对齐方式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">First Header</th>
<th style="text-align:center">Second Header</th>
<th style="text-align:right">Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:left">Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
</tbody>
</table>
<p>效果如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/e3aca1a1jw1fag04e91w3j209802it8o.jpg" alt="表格对齐方式"><br><br></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用html的注释，好像只有这样？</p>
<!-- 注释 -->
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>Markdown中的转义字符为\，转义的有：</p>
<p>\ 反斜杠</p>
<p>` 反引号</p>
<p>* 星号</p>
<p>_ 下划线</p>
<p>{} 大括号</p>
<p>[] 中括号</p>
<p>() 小括号</p>
<p># 井号</p>
<p>+ 加号</p>
<p>- 减号</p>
<p>. 英文句号</p>
<p>! 感叹号</p>
<p><br></p>
<h3 id="段落缩进（空格）"><a href="#段落缩进（空格）" class="headerlink" title="段落缩进（空格）"></a>段落缩进（空格）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">半方大的空白`&amp;ensp;`或`&amp;#8194;`看，飞碟</div><div class="line">全方大的空白`&amp;emsp;`或`&amp;#8195;`看，飞碟</div><div class="line">不断行的空白格`&amp;nbsp;`或`&amp;#160;`看，飞碟</div><div class="line">`&amp;emsp;&amp;emsp;`段落从此开始。</div></pre></td></tr></table></figure>
<p><strong>效果如下</strong>：</p>
<p>半方大的空白 或 看，飞碟 </p>
<p>全方大的空白 或 看，飞碟 </p>
<p>不断行的空白格 或 看，飞碟 </p>
<p>  段落从此开始。<br><br></p>
<h3 id="字体、字号、颜色"><a href="#字体、字号、颜色" class="headerlink" title="字体、字号、颜色"></a>字体、字号、颜色</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</div><div class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</div><div class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</div><div class="line">&lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</div><div class="line">&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;</div><div class="line">&lt;font color=gray size=5&gt;gray&lt;/font&gt;</div></pre></td></tr></table></figure>
<p><strong>效果如下</strong>：</p>
<p>我是黑体字 </p>
<p>我是微软雅黑 </p>
<p>我是华文彩云 </p>
<p>黑体 </p>
<p>null </p>
<p>gray</p>
<p><br></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><ul>
<li>切换是否显示预览窗口: Shift + Cmd + I</li>
<li>切换是否显示文本单词数量: Shift + Cmd + W</li>
<li>切换透明度: Shift + Cmd + T</li>
<li>切换浮动效果: Shift + Cmd + F</li>
<li>左边大小/右边大小 = 1/1: Cmd + 0</li>
<li>左边大小/右边大小 = 3/1: Cmd + +</li>
<li>左边大小/右边大小 = 1/3: Cmd + -</li>
<li>切换文本书写的方向: Cmd + L</li>
<li>全屏: Control + Cmd + F</li>
</ul>
<h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><ul>
<li>Copy HTML: Option + Cmd + C</li>
<li>Strong: Select text, Cmd + B</li>
<li>Emphasize: Select text, Cmd + I</li>
<li>Inline Code: Select text, Cmd + K</li>
<li>Strikethrough: Select text, Cmd + U</li>
<li>Link: Select text, Control + Shift + L</li>
<li>Image: Select text, Control + Shift + I</li>
<li>Select Word: Control + Option + W</li>
<li>Select Line: Shift + Cmd + L</li>
<li>Select All: Cmd + A</li>
<li>Deselect All: Cmd + D</li>
<li>Convert to Uppercase: Select text, Control + U</li>
<li>Convert to Lowercase: Select text, Control + Shift + U</li>
<li>Convert to Titlecase: Select text, Control + Option + U</li>
<li>Convert to List: Select lines, Control + L</li>
<li>Convert to Blockquote: Select lines, Control + Q</li>
<li>Convert to H1: Cmd + 1</li>
<li>Convert to H2: Cmd + 2</li>
<li>Convert to H3: Cmd + 3</li>
<li>Convert to H4: Cmd + 4</li>
<li>Convert to H5: Cmd + 5</li>
<li>Convert to H6: Cmd + 6</li>
<li>Convert Spaces to Tabs: Control + [</li>
<li>Convert Tabs to Spaces: Control + ]</li>
<li>Insert Current Date: Control + Shift + 1</li>
<li>Insert Current Time: Control + Shift + 2</li>
<li>Insert entity &lt;: Control + Shift + ,</li>
<li>Insert entity &gt;: Control + Shift + .</li>
<li>Insert entity &amp;: Control + Shift + 7</li>
<li>Insert entity Space: Control + Shift + Space</li>
<li>Insert Scriptogr.am Header: Control + Shift + G</li>
<li>Shift Line Left: Select lines, Cmd + [</li>
<li>Shift Line Right: Select lines, Cmd + ]</li>
<li>New Line: Cmd + Return</li>
<li>Comment: Cmd + /</li>
<li>Hard Linebreak: Control + Return</li>
</ul>
<h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><ul>
<li>Auto complete current word: Esc</li>
<li>Find: Cmd + F</li>
<li>Close find bar: Esc</li>
</ul>
<h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><ul>
<li>Post on Scriptogr.am: Control + Shift + S</li>
<li>Post on Tumblr: Control + Shift + T</li>
</ul>
<h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><ul>
<li>Export HTML: Option + Cmd + E</li>
<li>Export PDF:  Option + Cmd + P</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown教程 </tag>
            
            <tag> 语法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
